Monitor As screen:
    Fill: =RGBA(226, 225, 221, 1)
    OnVisible: |+
        =Set(expandMenu, false);
        Set(openTemplate, false);
        Set(openEditor_kon, false);
        Set(openEditor_bra, false);
        Set(openEditor_myn, false);
        Set(openEditor_etc, false);
        Set(visOverview, true);
        Set(visDashboard1, true);
        
        Set(visReg, false);
        Set(visStatusListBox, false);
        Set(visControlMenuBar, false);
        Set(visOpgaveEdit, false);
        Set(visManagerEdit, false);
        Set(visWeekPlan, false);
        Set(visUserGal, false);
        Set(visUserGal2, false);
        
        Set(visPlan, false);
        
        //To make a collection to save current user names
        ClearCollect(col_currentUsers, {userName: Left(User().Email, 3)});
        If(Not(Left(User().Email, 3) exactin col_currentUsers), Patch(col_currentUsers, Defaults(col_currentUsers), {userName: Left(User().Email, 3)}));
        
        

    generalInfoBtn As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(51, 51, 51, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(245, 245, 242, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverFill: =RGBA(0, 0, 0, 1)
        OnSelect: =Set(selectedCategory, Blank())
        PaddingLeft: =2
        PaddingRight: =2
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =6
        RadiusTopRight: =6
        Size: =8
        Text: ="Generel"
        Visible: |-
            =true
            //If(visPlan = true, false, visManagerEdit)
        Width: =60
        X: =1276
        Y: =106
        ZIndex: =1

    overviewDashboard As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(245, 245, 242, 1)
        Height: =648
        Items: |
            =
            Switch(
                sortByWhat,
                "prjNumber", Sort(Sort(opgaver, savsnr, If(sortByPrjNumber, SortOrder.Ascending, SortOrder.Descending)), prjStatus, SortOrder.Ascending),
                "prjNumber", Sort(Sort(opgaver, savsnr, If(!sortByPrjNumber, SortOrder.Ascending, SortOrder.Descending)), prjStatus, SortOrder.Descending), 
                Blank(), Sort(Sort(opgaver, savsnr, SortOrder.Ascending), prjStatus, SortOrder.Ascending)
            )
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =20
        TemplateSize: =304
        Visible: =If(visPlan = true, false, visOverview = true, true)
        Width: =1325
        WrapCount: =5
        X: =40
        Y: =120
        ZIndex: =2

        Rectangle1_2 As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =304
            OnSelect: =Select(Parent)
            Width: =Parent.TemplateWidth
            ZIndex: =1

        phaseCard As button:
            BorderColor: =RGBA(0,0,0,0.2)
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 1)
            Fill: |-
                =If(
                    DateValue(First(ThisItem.currentPhaseTask).deadline) = Blank(), RGBA(219, 219, 219, 1),
                    If(
                        DateDiff(Today(), DateValue(First(ThisItem.currentPhaseTask).deadline)) < 0, RGBA(180, 80, 80, 0.6),
                        DateDiff(Today(), DateValue(First(ThisItem.currentPhaseTask).deadline)) >= 0, RGBA(215, 210, 175, 0.8)
                    )
                )
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            Height: =35
            HoverFill: =ColorFade(RGBA(0, 0, 0, 1), -5%)
            OnSelect: =
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: |+
                =0
                
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: |
                =0
            Size: =10
            Text: =ThisItem.prjPhase
            Width: =38
            X: =198
            Y: =7
            ZIndex: =2

        assignedCategories1 As gallery.galleryHorizontal:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            Height: =32
            Items: =First(ThisItem.currentPhaseTask).assignedTasks
            LoadingSpinner: =LoadingSpinner.Data
            TemplateSize: =Parent.TemplateWidth/6.8
            Visible: =false
            Width: =Parent.TemplateWidth
            Y: =228
            ZIndex: =3

            Label2 As label:
                Align: =Align.Center
                BorderColor: =RGBA(149, 149, 149, 1)
                Fill: =RGBA(237, 237, 237, 1)
                FontWeight: =FontWeight.Lighter
                Height: =21
                OnSelect: =Select(Parent)
                Size: =8
                Text: =ThisItem.value
                Width: =Parent.TemplateWidth
                ZIndex: =1

        Image1_1 As image:
            Height: =103
            Image: |
                =If(
                    DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline) < 0,
                    IfError(
                        With(
                            {segmentPercentage: 
                                Sum(
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, progressByHours), 
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).KON, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, progressByHours)
                                )
                                / 
                                Sum(
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, assignedHours), 
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).KON, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, assignedHours)
                                )
                            },   
                            
                            "data:image/svg+xml," & 
                            EncodeUrl(
                                "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                    class='donut' xmlns='http://www.w3.org/2000/svg'>
                                    <circle class='donut-hole' cx='21' cy='21' 
                                        r='15.91549430918954' fill='#fff'></circle>
                                    <circle class='donut-ring' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#ededed' stroke-width='5'></circle>
                                    
                                    <circle class='donut-segment1' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#d3979d' stroke-width='5' 
                                        stroke-dasharray='" & 
                                        segmentPercentage * 100 & " " & 
                                        (100 - (segmentPercentage * 100)) & " " &
                                        "' stroke-dashoffset='25'>
                                    </circle>
                                </svg>"
                            )
                        ),
                    ""),
                
                    IfError(    
                        With(
                            {segmentPercentage: 
                                Sum(
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, progressByHours), 
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).KON, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, progressByHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, progressByHours)
                                )
                                / 
                                Sum(
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, assignedHours), 
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).KON, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, assignedHours),
                                    Sum(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, assignedHours)
                                )
                            },   
                            
                            "data:image/svg+xml," & 
                            EncodeUrl(
                                "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                    class='donut' xmlns='http://www.w3.org/2000/svg'>
                                    <circle class='donut-hole' cx='21' cy='21' 
                                        r='15.91549430918954' fill='#fff'></circle>
                                    <circle class='donut-ring' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#ededed' stroke-width='5'></circle>
                                    
                                    <circle class='donut-segment1' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#d9d3ad' stroke-width='5' 
                                        stroke-dasharray='" & 
                                        segmentPercentage * 100 & " " & 
                                        (100 - (segmentPercentage * 100)) & " " &
                                        "' stroke-dashoffset='25'>
                                    </circle>
                                </svg>"
                            )
                        ), 
                    "")
                )
            OnSelect: =Select(Parent)
            Width: =103
            X: =15
            Y: =110
            ZIndex: =4

        Image1 As image:
            Height: =103
            Image: |+
                =If(
                    DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline, TimeUnit.Days) < 0,
                    IfError(
                        With(
                            {segmentPercentage:
                            Sum(
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).KON, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, ThisRecord.approval = true), progressByHours)
                            )
                            / 
                            Sum(
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).KON, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, assignedHours)
                            )
                            }, 
                
                        "data:image/svg+xml," & 
                        EncodeUrl(
                                "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                    class='donut' xmlns='http://www.w3.org/2000/svg'>
                                    
                                    <circle class='donut-segment' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#af3743' stroke-width='5' 
                                        stroke-dasharray='" & 
                                        segmentPercentage * 100 & " " & 
                                        (100 - segmentPercentage * 100) & " " &
                                        "' stroke-dashoffset='25'>
                                        </circle> 
                                </svg>"
                            )
                        ),
                    ""),
                
                    IfError(
                        With(
                            {segmentPercentage:
                            Sum(
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).KON, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, ThisRecord.approval = true), progressByHours),
                                Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, ThisRecord.approval = true), progressByHours)
                            )
                            / 
                            Sum(
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).KON, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, assignedHours),
                                Sum(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, assignedHours)
                            )
                            }, 
                
                        "data:image/svg+xml," & 
                        EncodeUrl(
                                "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                    class='donut' xmlns='http://www.w3.org/2000/svg'>
                                    
                                    
                                    <circle class='donut-segment' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#bfb369' stroke-width='5' 
                                        stroke-dasharray='" & 
                                        segmentPercentage * 100 & " " & 
                                        (100 - segmentPercentage * 100) & " " &
                                        "' stroke-dashoffset='25'>
                                        </circle> 
                                </svg>"
                            )
                        ),
                    "")
                )
                
                
            OnSelect: =Select(Parent)
            Width: =103
            X: =15
            Y: =110
            ZIndex: =5

        progressCard As label:
            Align: =Align.Center
            DisplayMode: =displayMode
            Font: =Font.'Open Sans Condensed'
            Height: =24
            Text: |
                =IfError(
                    Round(
                        Sum(
                            Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, ThisRecord.approval = true), progressByHours),
                            Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).KON, ThisRecord.approval = true), progressByHours),
                            Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, ThisRecord.approval = true), progressByHours),
                            Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, ThisRecord.approval = true), progressByHours),
                            Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, ThisRecord.approval = true), progressByHours),
                            Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, ThisRecord.approval = true), progressByHours),
                            Sum(Filter(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, ThisRecord.approval = true), progressByHours)
                        )           
                        / 
                        Sum(
                            Sum(First(First(ThisItem.currentPhaseTask).taskCategory).ARK, assignedHours),
                            Sum(First(First(ThisItem.currentPhaseTask).taskCategory).KON, assignedHours),
                            Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BRA, assignedHours),
                            Sum(First(First(ThisItem.currentPhaseTask).taskCategory).MYN, assignedHours),
                            Sum(First(First(ThisItem.currentPhaseTask).taskCategory).BÆR, assignedHours),
                            Sum(First(First(ThisItem.currentPhaseTask).taskCategory).VVS, assignedHours),
                            Sum(First(First(ThisItem.currentPhaseTask).taskCategory).UDF, assignedHours)
                        ) * 100, 0)& "%", "")
            Width: =133
            Y: =149
            ZIndex: =6

        phaseCard_1 As button:
            BorderColor: =RGBA(0,0,0,0.2)
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 1)
            Fill: =RGBA(219, 219, 219, 1)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Normal
            Height: =35
            HoverFill: =ColorFade(RGBA(0, 0, 0, 1), -5%)
            OnSelect: =
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: |+
                =0
                
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: |
                =0
            Size: =10
            Text: =Upper(ThisItem.prjType)
            Width: =80
            X: =115
            Y: =7
            ZIndex: =7

        phaseCard_2 As button:
            BorderColor: =RGBA(0,0,0,0.2)
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 1)
            Fill: =RGBA(219, 219, 219, 1)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Normal
            Height: =35
            HoverFill: =ColorFade(RGBA(0, 0, 0, 1), -5%)
            OnSelect: =
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: |+
                =0
                
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: |
                =0
            Size: =10
            Text: =Upper(ThisItem.bygCategory)
            Width: =105
            X: =7
            Y: =7
            ZIndex: =8

        deadlineCard As label:
            Align: =Align.Center
            Color: |
                =If(
                    DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline) < 0, RGBA(255, 255, 255, 1),
                    DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline) >= 0 && DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline) <= 14, RGBA(200, 80, 85, 1),
                    RGBA(0, 0, 0, 1)
                )
            Fill: |
                =If(
                    First(ThisItem.currentPhaseTask).deadline = Blank() || First(ThisItem.currentPhaseTask).deadline = Text(Blank()), RGBA(0, 0, 0, 0),
                    If(
                        DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline) < 0, RGBA(190, 80, 85, 1), 
                        DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline) >= 0 && DateDiff(Today(), First(ThisItem.currentPhaseTask).deadline) <= 14, RGBA(0, 80, 85, 0),
                        RGBA(0, 0, 0, 0)
                    )
                )  
            Font: =Font.'Lato Light'
            FontWeight: =FontWeight.Lighter
            Height: =21
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingRight: =2
            PaddingTop: =2
            Size: =11
            Text: =Text(DateValue(First(ThisItem.currentPhaseTask).deadline), "dd-mmm-yyyy")
            Width: =98
            X: =125
            Y: =193
            ZIndex: =9

        Label7_7 As label:
            FontWeight: =FontWeight.Lighter
            Height: =15
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingTop: =2
            Size: =8
            Text: |-
                ="Deadline:"
            Width: =88
            X: =125
            Y: =178
            ZIndex: =10

        Gallery3_1 As gallery.galleryHorizontal:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            Height: =32
            Items: =Choices('Project List'.AssignedScope)
            LoadingSpinner: =LoadingSpinner.Data
            TemplatePadding: =4
            TemplateSize: =Parent.TemplateWidth/8.08
            Width: =Parent.TemplateWidth
            Y: =258
            ZIndex: =11

            Label2_1 As label:
                Align: =Align.Center
                BorderColor: =RGBA(149, 149, 149, 1)
                Color: =If(ThisItem.Value in assignedCategories1.AllItems.value, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.4)) 
                Fill: =If(ThisItem.Value in assignedCategories1.AllItems.value, RGBA(80, 80, 80, 0.4), RGBA(230, 230, 230, 0.4))
                FontWeight: =FontWeight.Lighter
                Height: =21
                OnSelect: =Select(Parent)
                PaddingLeft: =0
                PaddingRight: =0
                Size: =7.5
                Text: =ThisItem.Value
                Width: =Parent.TemplateWidth
                ZIndex: =1

        HtmlText1 As htmlViewer:
            Height: =74
            HtmlText: |-
                ="<font size=2px>" & ThisItem.savsnr & ":" & "</font><br>
                <b>" & Upper(ThisItem.prjnavn) & "</b>"
            OnSelect: =Select(Parent)
            PaddingBottom: =0
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =0
            Size: =9.5
            Width: =241
            Y: =50
            ZIndex: =12

        Label7_8 As label:
            FontWeight: =FontWeight.Lighter
            Height: =15
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingTop: =2
            Size: =8
            Text: |-
                ="ext KS (KON) :" & 
                If(
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).extSendt <> Blank() &&
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).modtaget = Blank(),
                    " sendt, " & Text(DateValue(First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).extSendt),"dd/mm/yyyy"),
                
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).extSendt <> Blank() &&
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).modtaget <> Blank(), 
                    " modtaget, " & Text(DateValue(First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).modtaget),"dd/mm/yyyy"),
                
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).extSendt = Blank() &&
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).modtaget <> Blank(), 
                    " modtaget, " & Text(DateValue(First(First(First(ThisItem.currentPhaseTask).taskCategory).KON).modtaget),"dd/mm/yyyy")
                )
            Visible: =ThisItem.conClass <> "KK1"
            Width: =210
            X: =4
            Y: =228
            ZIndex: =13

        Label7_9 As label:
            FontWeight: =FontWeight.Lighter
            Height: =15
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingTop: =2
            Size: =8
            Text: |-
                ="ext KS (BRA)  :" & 
                If(
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).extSendt <> Blank() &&
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).modtaget = Blank(),
                    " sendt, " & Text(DateValue(First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).extSendt),"dd/mm/yyyy"),
                
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).extSendt <> Blank() &&
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).modtaget <> Blank(), 
                    " modtaget, " & Text(DateValue(First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).modtaget),"dd/mm/yyyy"),
                
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).extSendt = Blank() &&
                    First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).modtaget <> Blank(), 
                    " modtaget, " & Text(DateValue(First(First(First(ThisItem.currentPhaseTask).taskCategory).BRA).modtaget),"dd/mm/yyyy")
                )
            Visible: =ThisItem.brandClass <> "BK1"
            Width: =210
            X: =4
            Y: =243
            ZIndex: =14

        Rectangle7 As rectangle:
            Fill: =RGBA(237, 237, 237, 0.97)
            Height: =304
            OnSelect: =Select(Parent)
            Visible: =editMode
            Width: =241
            ZIndex: =15

        Button2 As button:
            BorderThickness: =0
            Fill: =RGBA(221, 79, 14, 1)
            FontWeight: =FontWeight.Lighter
            Height: =18
            OnSelect: =Select(Parent)
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            Size: =8
            Text: =ThisItem.currentEditor
            Visible: =If(ThisItem.currentEditor = Blank(), false, true)
            Width: =32
            X: =4
            Y: =286
            ZIndex: =16

        transparentButton As button:
            BorderThickness: =0
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: |-
                =If(
                    editMode, DisplayMode.Disabled, DisplayMode.Edit
                )
            Fill: |-
                =If(
                    ThisItem.prjStatus = "inactive" || ThisItem.prjStatus = "closed" || ThisItem.prjStatus = Blank(), RGBA(230, 230, 230, 0.92), 
                    ThisItem.prjStatus = "active", RGBA(0,0,0,0)
                )
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Normal
            Height: =304
            HoverFill: =RGBA(105, 95, 40, 0.1)
            OnSelect: |-
                =Refresh('Project List');
                
                // ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ visibility setup, create variables, other setups ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
                Set(selectedPrjName, ThisItem.prjnavn);
                Set(selectedPrj, Filter(opgaver, ThisRecord.prjnavn = selectedPrjName));
                Set(selectedPLinChange, First(selectedPrj).PL);
                Set(selectedBKChange, First(selectedPrj).brandClass);
                Set(selectedKKChange, First(selectedPrj).conClass);
                Set(selectedPrjPhase, ThisItem.prjPhase);
                Set(displayMode, DisplayMode.Edit);
                //Select(generalInfoBtn);
                
                Set(visDDmenu_phaseList, false);
                Set(visTaskCategorySelect, false);
                Set(visStatusMenu, !visStatusMenu);
                Set(visOverview, false);
                Set(visOpgaveEdit, false);
                Set(visManagerEdit, true);
                Set(visADoc, false);
                Set(visKDoc, false);
                Set(visBDoc, false);
                Set(visMDoc, false);
                Set(visNDoc, false);
                Set(visVDoc, false);
                Set(visUDoc, false);
                Set(visReg, false);
                
                Set(activateTimer_RefreshPrjList, true);
                Set(activateTimer_AutoGetOutPage, true);
                Set(refreshUserList, false); Set(refreshUserList, true);
                
                // ------------------------- visibility setup, create variables, other setups -------------------------
                
                
                // ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ staticTaskCategoryCurrentPhase is to extract the first layer(or Row) of the chosen project which will be static
                With(
                    {parent: LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).currentUsers},
                    ClearCollect(selPrjCurrentUserList,
                        ForAll(Table(ParseJSON(parent)) As userListRecord, {Name: Text(userListRecord.Value.Name), LogInTime: Text(userListRecord.Value.LogInTime)}))
                );
                
                Patch(selPrjCurrentUserList, Defaults(selPrjCurrentUserList), {Name: Left(User().Email, 3), LogInTime: Now()});
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), 
                    {
                        currentUsers: JSON(selPrjCurrentUserList),
                        currentEditor: First(selPrjCurrentUserList).Name
                    }
                );
                
                ClearCollect(opgaver_selPrj_static, LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName));
                
                ClearCollect(opgaver_selPrj_taskCategory, First(First(opgaver_selPrj_static).currentPhaseTask).taskCategory);
                
                
                ClearCollect(phaseToSeeByPrj, LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName, currentPhaseTask));
                ClearCollect(phaseToSeeByPrj_assignedTaskScope, First(phaseToSeeByPrj).assignedTasks);
                
                Set(selectedCategory, First(First(phaseToSeeByPrj).assignedTasks).value);
                // ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ Take the data of the chosen project from ProjectManagemet SP list ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
                
                //----------To group the tasks by document categories  
                //combinedTasks is dynamic
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    First(opgaver_selPrj_taskCategory).ARK, 
                    First(opgaver_selPrj_taskCategory).KON, 
                    First(opgaver_selPrj_taskCategory).BRA, 
                    First(opgaver_selPrj_taskCategory).MYN, 
                    First(opgaver_selPrj_taskCategory).BÆR, 
                    First(opgaver_selPrj_taskCategory).VVS, 
                    First(opgaver_selPrj_taskCategory).UDF
                );
                
                
                //currentAllTasks is protected from expanding/dropping
                
                ClearCollect(selPrj_currentPhase_task_A, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"));
                ClearCollect(selPrj_currentPhase_task_K, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"));
                ClearCollect(selPrj_currentPhase_task_B, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"));
                ClearCollect(selPrj_currentPhase_task_M, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"));
                ClearCollect(selPrj_currentPhase_task_N, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"));
                ClearCollect(selPrj_currentPhase_task_V, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"));
                ClearCollect(selPrj_currentPhase_task_U, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf"));
                
                //---------------------------------COMPILE/UPDATE/MODIFY OPGAVER collection for the SELECTED PROJECT---------------------------------------
                //Here, Before jumping to the project management, we need to take only the necessary project data from Overall Project&Task collection 'opgaver'
                //currentOpgaver, selPrj_currentPhase_task_K,B,M,E ,  combCurrentOpgaver
            PaddingLeft: =0
            PaddingRight: =0
            PressedFill: =RGBA(0,0,0,0)
            RadiusBottomLeft: |+
                =0
                
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: |
                =0
            Size: =8
            Text: =
            Width: =Parent.TemplateWidth
            ZIndex: =17

        Label8_9 As label:
            Align: =Align.Center
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =25
            OnSelect: =Select(Parent)
            Text: =ThisItem.savsnr
            Visible: =editMode
            Width: =241
            Y: =50
            ZIndex: =18

        Label8 As label:
            Align: =Align.Center
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Semibold
            Height: =71
            OnSelect: =Select(Parent)
            Size: =12
            Text: =Upper(ThisItem.prjnavn)
            Visible: =editMode
            Width: =241
            Y: =75
            ZIndex: =19

        Radio1 As radio:
            Default: =Upper(ThisItem.prjStatus)
            FocusedBorderThickness: =0
            FontWeight: =FontWeight.Lighter
            Height: =60
            Items: =["ACTIVE", "INACTIVE"]
            OnChange: |-
                =If(
                    Radio1.Selected.Value = "ACTIVE", 
                    UpdateIf(opgaver, ThisRecord.prjnavn = ThisItem.prjnavn, {prjStatus: "active"});
                    Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = ThisItem.prjnavn), {projectStatus: {Value:"active"}});
                    Radio1.Selected.Value = "INACTIVE", 
                    UpdateIf(opgaver, ThisRecord.prjnavn = ThisItem.prjnavn, {prjStatus: "inactive"});
                    Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = ThisItem.prjnavn), {projectStatus: {Value: "inactive"}})
                );
            OnSelect: =Select(Parent)
            PaddingLeft: =70
            PaddingRight: =50
            RadioBorderColor: =RGBA(0, 0, 0, 1)
            RadioSelectionFill: =If(ThisItem.prjStatus = "active", RGBA(175, 70, 50, 1), RGBA(150, 150, 150, 1))
            RadioSize: =18
            Size: =9
            Visible: =editMode
            Width: =241
            Y: =146
            ZIndex: =20

        Icon14 As icon.Trash:
            Color: =RGBA(116, 116, 116, 1)
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: |-
                =If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            Height: =22
            Icon: =Icon.Trash
            OnSelect: |-
                =Archive_closedProject.Run(ThisItem.prjnavn);
                
                RemoveIf(opgaver, ThisRecord.prjnavn = ThisItem.prjnavn);
                RemoveIf('Project List', ThisRecord.Projektnavn = ThisItem.prjnavn);
            Visible: =editMode
            Width: =25
            X: =107
            Y: =236
            ZIndex: =21

        Label8_10 As label:
            Align: =Align.Center
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =25
            OnSelect: =Select(Parent)
            Size: =9
            Text: ="to archive"
            Visible: =editMode
            Width: =241
            Y: =255
            ZIndex: =22

    Rectangle7_3 As rectangle:
        Fill: =RGBA(245, 245, 242, 1)
        Height: =635
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =900
        X: =436
        Y: =122
        ZIndex: =3

    barAtTop As rectangle:
        DisplayMode: =displayMode
        Fill: =RGBA(38, 35, 19, 1)
        Height: =68
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =1308
        X: =29
        Y: =22
        ZIndex: =5

    Rectangle4 As rectangle:
        Fill: =RGBA(245, 245, 242, 1)
        Height: =32
        Visible: =If(visPlan = true, false, visOverview = true, true)
        Width: =1326
        X: =40
        Y: =90
        ZIndex: =7

    Group3_1 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =3
        ZIndex: =7

        totalProjects As htmlViewer:
            Height: =80
            HtmlText: |-
                ="<p style = text-align:center><font size=6><b>" & 
                CountRows(opgaver) & 
                "</b></font></p>" &
                "<p style = text-align:center><font size=1.8>Projekter</font></p>" 
            PaddingBottom: =2
            PaddingLeft: =2
            PaddingRight: =2
            PaddingTop: =2
            Size: =2
            Visible: =If(visPlan = true, false, visOverview = true, true)
            Width: =108
            X: =79
            ZIndex: =6

        activeProjects As htmlViewer:
            Height: =80
            HtmlText: |-
                ="<p style = text-align:center><font size=6><b>" & 
                CountRows(Filter(opgaver, ThisRecord.prjStatus = "active")) & 
                "</b></font></p>" &
                "<p style = text-align:center><font size=1.8>Aktive Projekter</font></p>" 
            PaddingBottom: =2
            PaddingLeft: =2
            PaddingRight: =2
            PaddingTop: =2
            Size: =2
            Visible: =If(visPlan = true, false, visOverview = true, true)
            Width: =108
            X: =187
            ZIndex: =8

        totalOpgaver As htmlViewer:
            Height: =80
            HtmlText: |-
                ="<p style = text-align:center><font size=6><b>" & 
                //CountRows(Filter(opgaverWhole, ThisRecord.brandClass <> Blank())) & 
                "</b></font></p>" &
                "<p style = text-align:center><font size=2>Opgaver</font></p>" 
            PaddingBottom: =2
            PaddingLeft: =2
            PaddingRight: =2
            PaddingTop: =2
            Size: =2
            Visible: |-
                =false
                //If(visPlan = true, false, visOverview = true, true)
            Width: =108
            X: =476
            ZIndex: =9

        overdue As htmlViewer:
            Height: =80
            HtmlText: |-
                ="<p style = text-align:center><font size=6, color = red><b>" & 
                CountRows(Filter(opgaverWhole, DateDiff(Today(), DateValue(ThisRecord.deadline), TimeUnit.Days) < 0)) &
                "</b></font></p>" &
                "<p style = text-align:center><font size=1.8>Forfaldne Projekter</font></p>" 
                
                /*
                With(
                    {filteredData: Filter(opgaverWhole, ThisRecord.taskCategory <> Blank())},  
                    CountRows(Filter(filteredData.slutDato, DateDiff(Today(), DateValue(ThisRecord.slutDato), TimeUnit.Days) < 0))
                )
                */
            OnSelect: |-
                =Set(selectedPrjName, Blank());
                Set(visDueSoonOpgaver, false);
                Set(visOverdueOpgaver, !visOverdueOpgaver);
                /*
                ClearCollect(opgaverOverdue, ForAll(Distinct(With(
                    {filteredData: Filter(opgaverWhole, ThisRecord.udsendt <> Blank())},  
                    Filter(filteredData As secondRecord, DateDiff(Today(), DateValue(secondRecord.udsendt)) < 0)
                    ), ThisRecord.prjnavn), ThisRecord));
                    */
            PaddingBottom: =2
            PaddingLeft: =2
            PaddingRight: =2
            PaddingTop: =2
            Size: =2
            Visible: =If(visPlan = true, false, visOverview = true, true)
            Width: =151
            X: =299
            ZIndex: =10

        overdueSoon As htmlViewer:
            Height: =80
            HtmlText: |-
                ="<p style = text-align:center><font size=6, color = orange><b>" & 
                /*
                With(
                    {filteredData: Filter(opgaverWhole, ThisRecord.slutDato <> Blank())},  
                    CountRows(Filter(filteredData As secondRecord, 
                        And(DateDiff(Today(), DateValue(secondRecord.slutDato)) >= 0, DateDiff(Today(), DateValue(secondRecord.slutDato)) <= 3))
                    )
                ) &
                */ 
                "</b></font></p>" &
                "<p style = text-align:center><font size=2>Opgaver due soon (3d)</font></p>"
            OnSelect: |-
                =Set(visDueSoonOpgaver, !visDueSoonOpgaver);
                Set(visOverdueOpgaver, false);
            PaddingBottom: =2
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =2
            Size: =2
            Visible: |-
                =false
                //If(visPlan = true, false, visOverview = true, true)
            Width: =173
            X: =554
            ZIndex: =11

    columnName As group:
        Height: =5
        Width: =5
        X: =60
        Y: =11
        ZIndex: =22

        column1 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="PR / Status"
            Visible: =visOpgaveEdit
            Width: =70
            X: =41
            Y: =51
            ZIndex: =12

        column2 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="PL"
            Visible: =visOpgaveEdit
            Width: =30
            X: =column1.X + column1.Width
            Y: =51
            ZIndex: =13

        column3 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="SagsNr"
            Visible: =visOpgaveEdit
            Width: =55
            X: =column2.X + column2.Width
            Y: =51
            ZIndex: =14

        column4 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="Saganavn"
            Visible: =visOpgaveEdit
            Width: =170
            X: =column3.X + column3.Width
            Y: =51
            ZIndex: =15

        column5 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =1
            PaddingRight: =1
            Size: =8
            Text: ="Opgaver"
            Visible: =visOpgaveEdit
            Width: =260
            X: =column4.X + column4.Width
            Y: =51
            ZIndex: =16

        column6 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="Status"
            Visible: =visOpgaveEdit
            Width: =35
            X: =column5.X + column5.Width
            Y: =51
            ZIndex: =17

        column7 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="Ressource"
            Visible: =visOpgaveEdit
            Width: =40
            X: =column6.X + column6.Width
            Y: =51
            ZIndex: =18

        column8 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="KS"
            Visible: =visOpgaveEdit
            Width: =40
            X: =column7.X + column7.Width
            Y: =51
            ZIndex: =19

        column9 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="Udsendt (til/dato)"
            Visible: =visOpgaveEdit
            Width: =75
            X: =741
            Y: =51
            ZIndex: =20

        column10 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="Modtaget (fra/dato)"
            Visible: =visOpgaveEdit
            Width: =75
            X: =column9.X + column9.Width
            Y: =51
            ZIndex: =21

        column11 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="Slut dato"
            Visible: =visOpgaveEdit
            Width: =75
            X: =891
            Y: =51
            ZIndex: =22

        column12 As label:
            Align: =Align.Center
            BorderColor: =RGBA(255, 255, 255, 1)
            BorderThickness: =1
            DisabledFill: =RGBA(237, 237, 237, 1)
            DisplayMode: =If(visStatusListBox || visUserGal || visUserGal2= true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(212, 212, 212, 1)
            FontWeight: =FontWeight.Semibold
            Height: =29
            PaddingLeft: =3
            PaddingRight: =3
            Size: =8
            Text: ="Kommentator"
            Visible: =visOpgaveEdit
            Width: =440 - leftNavigationBar_2.Width
            X: =column11.X + column11.Width
            Y: =51
            ZIndex: =23

    Button19_3 As button:
        BorderThickness: =0
        FontWeight: =FontWeight.Normal
        Height: =22
        OnSelect: |-
            =Set(visOverview, false);
            Set(visOpgaveEdit, true);
            Set(visDashboard1, false);
            Set(visPrjByPL, false);
            Set(visDueSoonOpgaver, false);
            Set(visManagerEdit, false);
            Set(bvis, false);
            
            Set(selectedPrjName, Blank());
        RadiusBottomLeft: =15
        RadiusBottomRight: =15
        RadiusTopLeft: =15
        RadiusTopRight: =15
        Size: =9
        Text: ="go back to overview2"
        Visible: |-
            =//If(visPlan = true, false, visOverview = true, true)
            false
        Width: =44
        X: =1296
        ZIndex: =24

    yearSelect As dropdown:
        BorderColor: =RGBA(0, 0, 0, 1)
        BorderThickness: =0
        ChevronBackground: =RGBA(0, 0, 0, 1)
        ChevronHoverBackground: =ColorFade(RGBA(0, 0, 0, 1), -20%)
        Fill: =RGBA(237, 237, 237, 1)
        FocusedBorderThickness: =0
        FontWeight: =FontWeight.Lighter
        Height: =22
        HoverFill: =RGBA(203, 102, 102, 1)
        Items: =["From Today", Year(Today()), Year(Today()) +1]
        OnChange: =
        OnSelect: =
        PressedFill: =RGBA(0, 0, 0, 1)
        SelectionFill: =RGBA(0, 0, 0, 1)
        Size: =9
        Visible: =visPlan
        Width: =120
        X: =1239
        Y: =4
        ZIndex: =26

    leftNavigationBar_2 As leftNavigationBar:
        NavigationItems: =gblNavItems
        Visible: =false
        ZIndex: =28

    Icon4 As icon.Add:
        Color: =RGBA(255, 255, 255, 1)
        DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
        Fill: =RGBA(51, 51, 51, 1)
        Height: =20
        Icon: =Icon.Add
        OnSelect: |-
            =
            Set(activateTimer_EditPage, false);
             
            Set(visDDmenu_phaseChange, false);
            Set(visDDmenu_phaseList, false);
            Set(visDDmenu_PL, false);
            Set(visDDmenu_bygCategory, false);
            Set(visDDmenu_konklasse, false); 
            Set(visDDmenu_brandklasse, false);
            Set(visDDmenu_enterprise, false);
            Set(visDDmenu_radgivning, false); 
            
            Set(visTaskCategorySelect, false);
            
            
            Set(visPressedAddingTask, !visPressedAddingTask);
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), false, true))
        Width: =20
        X: =469
        Y: =192
        ZIndex: =29

    Gallery4 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        DisplayMode: =displayMode
        Height: |
            =565
        Items: |-
            =Table(
                {ID: "ARK", label: "ARKITEKTUR", icon: Icon.OfficeBuilding},
                {ID: "KON", label: "KONSTRUKTIONER", icon: Icon.Manufacture},
                {ID: "BRA", label: "BRAND", icon: Icon.Signal},
                {ID: "MYN", label: "MYN. BEHANDLING", icon: Icon.DocumentWithContent},
                {ID: "BÆR", label: "ENERGI", icon: Icon.Health},
                {ID: "VVS", label: "VVS", icon: Icon.DetailList},
                {ID: "UDF", label: "UDFØRELSESKONTROL", icon: Icon.Tools}
            )
            //"MYNDIGHEDSBEHANDLING"
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =0
        TemplateSize: =Self.Height/7
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =197
        X: =249
        Y: =192
        ZIndex: =32

        Rectangle2 As rectangle:
            Fill: =RGBA(245, 245, 242, 1)
            Height: =80.71428571428571
            OnSelect: =Select(Parent)
            Visible: |
                =If(visPlan = true, false, visManagerEdit, 
                    If(selectedCategory = ThisItem.ID, true, false)
                )
            Width: =196
            ZIndex: =2

        Label4 As label:
            Align: =Align.Center
            Color: |-
                =//If(ThisItem.ID in First(phaseToSeeByPrj).assignedTasks, RGBA(0, 0, 0, 1), RGBA(180,180,180,0.5))
                If(ThisItem.ID in phaseToSeeByPrj_assignedTaskScope, RGBA(0, 0, 0, 1), RGBA(180,180,180,0.5))
            Height: =21
            OnSelect: =Select(Parent)
            Size: =7
            Text: =ThisItem.label
            Width: =110
            Y: =50
            ZIndex: =3

        Icon_category As icon.Add:
            Color: |-
                =//If(ThisItem.ID in First(phaseToSeeByPrj).assignedTasks, RGBA(0, 0, 0, 1), RGBA(200,200,200,0.2))
                If(ThisItem.ID in phaseToSeeByPrj_assignedTaskScope, RGBA(0, 0, 0, 1), RGBA(200,200,200,0.2))
            DisabledColor: =RGBA(180,180,180,0.5)
            DisplayMode: |-
                =//If(ThisItem.ID in First(phaseToSeeByPrj).assignedTasks, DisplayMode.Edit, DisplayMode.Disabled)
                If(ThisItem.ID in phaseToSeeByPrj_assignedTaskScope, DisplayMode.Edit, DisplayMode.Disabled)
            Height: =31
            Icon: =ThisItem.icon
            OnSelect: =Set(selectedCategory, ThisItem.ID)
            Width: =34
            X: =38
            Y: =19
            ZIndex: =4

        Group4 As group:
            Height: =5
            Width: =5
            X: =60
            Y: =60
            ZIndex: =7

            small_donutChart1 As image:
                DisabledFill: =RGBA(0, 0, 0, 0)
                Height: =59
                Image: |+
                    =If(
                        DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0,
                        IfError(
                            With(
                                {segmentPercentage:
                                Switch(
                                    ThisItem.ID, 
                                    "ARK", 
                                    Sum(selPrj_currentPhase_task_A, progressByHours)/ Sum(selPrj_currentPhase_task_A, assignedHours),
                                    "KON", 
                                    Sum(selPrj_currentPhase_task_K, progressByHours)/ Sum(selPrj_currentPhase_task_K, assignedHours),
                                    "BRA", 
                                    Sum(selPrj_currentPhase_task_B, progressByHours)/ Sum(selPrj_currentPhase_task_B, assignedHours),
                                    "MYN", 
                                    Sum(selPrj_currentPhase_task_M, progressByHours)/ Sum(selPrj_currentPhase_task_M, assignedHours),
                                    "BÆR", 
                                    Sum(selPrj_currentPhase_task_N, progressByHours)/ Sum(selPrj_currentPhase_task_N, assignedHours),
                                    "VVS", 
                                    Sum(selPrj_currentPhase_task_V, progressByHours)/ Sum(selPrj_currentPhase_task_V, assignedHours),
                                    "UDF", 
                                    Sum(selPrj_currentPhase_task_U, progressByHours)/ Sum(selPrj_currentPhase_task_U, assignedHours)
                                )
                                },
                    
                                "data:image/svg+xml," & 
                                EncodeUrl(
                                        "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                            class='donut' xmlns='http://www.w3.org/2000/svg'>
                                            <circle class='donut-hole' cx='21' cy='21' 
                                                r='15.91549430918954' fill='RGBA(0,0,0,0)'></circle>
                                            <circle class='donut-ring' cx='21' cy='21' 
                                                r='15.91549430918954' fill='transparent' 
                                                stroke='#fff' stroke-width='4'></circle>
                                            <circle class='donut-segment' cx='21' cy='21' 
                                                r='15.91549430918954' fill='transparent' 
                                                stroke='#d3979d' stroke-width='4' 
                                                stroke-dasharray='" & 
                                                segmentPercentage * 100 & " " & 
                                                (100 - segmentPercentage * 100) & " " &
                                                "' stroke-dashoffset='25'>
                                                </circle> 
                                        </svg>"
                                )
                            ),
                        ""),
                    
                        IfError(
                            With(
                            {segmentPercentage:
                            Switch(
                                ThisItem.ID, 
                                "ARK", 
                                Sum(selPrj_currentPhase_task_A, progressByHours)/ Sum(selPrj_currentPhase_task_A, assignedHours),
                                "KON", 
                                Sum(selPrj_currentPhase_task_K, progressByHours)/ Sum(selPrj_currentPhase_task_K, assignedHours),
                                "BRA", 
                                Sum(selPrj_currentPhase_task_B, progressByHours)/ Sum(selPrj_currentPhase_task_B, assignedHours),
                                "MYN", 
                                Sum(selPrj_currentPhase_task_M, progressByHours)/ Sum(selPrj_currentPhase_task_M, assignedHours),
                                "BÆR", 
                                Sum(selPrj_currentPhase_task_N, progressByHours)/ Sum(selPrj_currentPhase_task_N, assignedHours),
                                "VVS", 
                                Sum(selPrj_currentPhase_task_V, progressByHours)/ Sum(selPrj_currentPhase_task_V, assignedHours),
                                "UDF", 
                                Sum(selPrj_currentPhase_task_U, progressByHours)/ Sum(selPrj_currentPhase_task_U, assignedHours)
                            )
                            },
                    
                            "data:image/svg+xml," & 
                            EncodeUrl(
                                    "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                        class='donut' xmlns='http://www.w3.org/2000/svg'>
                                        <circle class='donut-hole' cx='21' cy='21' 
                                            r='15.91549430918954' fill='RGBA(0,0,0,0)'></circle>
                                        <circle class='donut-ring' cx='21' cy='21' 
                                            r='15.91549430918954' fill='transparent' 
                                            stroke='#fff' stroke-width='4'></circle>
                                        <circle class='donut-segment' cx='21' cy='21' 
                                            r='15.91549430918954' fill='transparent' 
                                            stroke='#d9d3ad' stroke-width='4' 
                                            stroke-dasharray='" & 
                                            segmentPercentage * 100 & " " & 
                                            (100 - segmentPercentage * 100) & " " &
                                            "' stroke-dashoffset='25'>
                                            </circle> 
                                    </svg>"
                                )
                            ), 
                        "")
                    )
                    
                    
                    
                    
                    
                    
                Visible: |-
                    =//If(visPlan = true, false, visManagerEdit, If(ThisItem.ID in First(phaseToSeeByPrj).assignedTasks, true, false))
                    If(visPlan = true, false, visManagerEdit, If(ThisItem.ID in phaseToSeeByPrj_assignedTaskScope, true, false))
                Width: =71
                X: =96
                Y: =12
                ZIndex: =5

            small_donutChart2 As image:
                DisabledFill: =RGBA(0, 0, 0, 0)
                Height: =59
                Image: |-
                    =If(
                        DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0,
                        IfError(
                            With(
                                {segmentPercentage:
                                Switch(
                                    ThisItem.ID, 
                                    "ARK", 
                                    Sum(Filter(selPrj_currentPhase_task_A, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_A, assignedHours),
                                    "KON", 
                                    Sum(Filter(selPrj_currentPhase_task_K, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_K, assignedHours),
                                    "BRA", 
                                    Sum(Filter(selPrj_currentPhase_task_B, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_B, assignedHours),
                                    "MYN", 
                                    Sum(Filter(selPrj_currentPhase_task_M, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_M, assignedHours),
                                    "BÆR", 
                                    Sum(Filter(selPrj_currentPhase_task_N, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_N, assignedHours),
                                    "VVS", 
                                    Sum(Filter(selPrj_currentPhase_task_V, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_V, assignedHours),
                                    "UDF", 
                                    Sum(Filter(selPrj_currentPhase_task_U, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_U, assignedHours)
                                )  
                                },
                    
                                "data:image/svg+xml," & 
                                EncodeUrl(
                                        "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                            class='donut' xmlns='http://www.w3.org/2000/svg'>
                    
                                            <circle class='donut-segment' cx='21' cy='21' 
                                                r='15.91549430918954' fill='transparent' 
                                                stroke='#af3743' stroke-width='4' 
                                                stroke-dasharray='" & 
                                                segmentPercentage * 100 & " " & 
                                                (100 - segmentPercentage * 100) & " " &
                                                "' stroke-dashoffset='25'>
                                                </circle> 
                                        </svg>"
                                )
                            ),
                        ""),
                    
                        IfError(
                            With(
                                {segmentPercentage:
                                Switch(
                                    ThisItem.ID, 
                                    "ARK", 
                                    Sum(Filter(selPrj_currentPhase_task_A, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_A, assignedHours),
                                    "KON", 
                                    Sum(Filter(selPrj_currentPhase_task_K, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_K, assignedHours),
                                    "BRA", 
                                    Sum(Filter(selPrj_currentPhase_task_B, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_B, assignedHours),
                                    "MYN", 
                                    Sum(Filter(selPrj_currentPhase_task_M, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_M, assignedHours),
                                    "BÆR", 
                                    Sum(Filter(selPrj_currentPhase_task_N, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_N, assignedHours),
                                    "VVS", 
                                    Sum(Filter(selPrj_currentPhase_task_V, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_V, assignedHours),
                                    "UDF", 
                                    Sum(Filter(selPrj_currentPhase_task_U, ThisRecord.approval = true), progressByHours)/ Sum(selPrj_currentPhase_task_U, assignedHours)
                                )  
                                },
                    
                                "data:image/svg+xml," & 
                                EncodeUrl(
                                        "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                            class='donut' xmlns='http://www.w3.org/2000/svg'>
                    
                                            <circle class='donut-segment' cx='21' cy='21' 
                                                r='15.91549430918954' fill='transparent' 
                                                stroke='#bfb369' stroke-width='4' 
                                                stroke-dasharray='" & 
                                                segmentPercentage * 100 & " " & 
                                                (100 - segmentPercentage * 100) & " " &
                                                "' stroke-dashoffset='25'>
                                                </circle> 
                                        </svg>"
                                )
                            ),
                        "")
                    )
                Visible: |-
                    =//If(visPlan = true, false, visManagerEdit, If(ThisItem.ID in First(phaseToSeeByPrj).assignedTasks, true, false))
                    If(visPlan = true, false, visManagerEdit, If(ThisItem.ID in phaseToSeeByPrj_assignedTaskScope, true, false))
                Width: =71
                X: =small_donutChart1.X
                Y: =small_donutChart1.Y
                ZIndex: =6

            Label1_20 As label:
                Align: =Align.Center
                DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 || visWeekPlan = true, DisplayMode.Disabled, DisplayMode.Edit) 
                Font: =Font.'Open Sans Condensed'
                Height: =21
                Size: =9
                Text: |-
                    =Switch(
                        ThisItem.ID,
                        "ARK", 
                        IfError(
                            Round(Sum(Filter(selPrj_currentPhase_task_A, approval = true), progressByHours)
                            / Sum(selPrj_currentPhase_task_A, assignedHours) + 0.0001, 2) * 100 & " %", ""),
                        "KON", 
                        IfError(
                            Round(Sum(Filter(selPrj_currentPhase_task_K, approval = true), progressByHours)
                            / Sum(selPrj_currentPhase_task_K, assignedHours) + 0.0001, 2) * 100 & " %", ""),
                        "BRA", 
                        IfError(
                            Round(Sum(Filter(selPrj_currentPhase_task_B, approval = true), progressByHours)
                            / Sum(selPrj_currentPhase_task_B, assignedHours) + 0.0001, 2) * 100 & " %", ""),
                        "MYN", 
                        IfError(
                            Round(Sum(Filter(selPrj_currentPhase_task_M, approval = true), progressByHours)
                            / Sum(selPrj_currentPhase_task_M, assignedHours) + 0.0001, 2) * 100 & " %", ""),
                        "BÆR", 
                        IfError(
                            Round(Sum(Filter(selPrj_currentPhase_task_N, approval = true), progressByHours)
                            / Sum(selPrj_currentPhase_task_N, assignedHours) + 0.0001, 2) * 100 & " %", ""),
                        "VVS", 
                        IfError(
                            Round(Sum(Filter(selPrj_currentPhase_task_V, approval = true), progressByHours)
                            / Sum(selPrj_currentPhase_task_V, assignedHours) + 0.0001, 2) * 100 & " %", ""),
                        "UDF", 
                        IfError(
                            Round(Sum(Filter(selPrj_currentPhase_task_U, approval = true), progressByHours)
                            / Sum(selPrj_currentPhase_task_U, assignedHours) + 0.0001, 2) * 100 & " %", "")
                    )
                Visible: |-
                    =//If(visPlan = true, false, visManagerEdit, If(ThisItem.ID in First(phaseToSeeByPrj).assignedTasks, true, false))
                    If(visPlan = true, false, visManagerEdit, If(ThisItem.ID in phaseToSeeByPrj_assignedTaskScope, true, false))
                Width: =55
                X: =105
                Y: =31
                ZIndex: =7

        taskCategory_button As button:
            BorderThickness: =0
            DisabledFill: =RGBA(0, 0, 0, 0)
            Fill: =RGBA(0, 0, 0, 0)
            Height: =80.71428571428571
            HoverBorderColor: =
            HoverFill: =RGBA(245, 245, 242, 0.6)
            OnSelect: |-
                =Set(selectedCategory, ThisItem.ID);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
            PressedColor: =
            PressedFill: =
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Text: =
            Width: =197
            ZIndex: =8

    Label1_28 As label:
        DisabledColor: =RGBA(219, 219, 219, 1)
        DisplayMode: =displayMode
        Font: =Font.Lato
        FontWeight: =FontWeight.Semibold
        Height: =25
        Size: =12
        Text: |-
            =Switch(
                selectedCategory,
                Blank(), "Generel information",
                "ARK", "Arkitekturdokumentation  " & " (" & selectedPrjPhase & ")",
                "KON", "Konstruktionsdokumentation  " & " (" & selectedPrjPhase & ")",
                "BRA", "Branddokumentation  " & " (" & selectedPrjPhase & ")",
                "MYN", "Myndighedsdokumentation  " & " (" & selectedPrjPhase & ")",
                "BÆR", "Energidokumentation  " & " (" & selectedPrjPhase & ")",
                "VVS", "VVSdokumentation  " & " (" & selectedPrjPhase & ")",
                "UDF", "Udførelsesrådgivning  " & " (" & selectedPrjPhase & ")"
            )
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =300
        X: =465
        Y: =155
        ZIndex: =33

    Rectangle7_4 As rectangle:
        BorderColor: =RGBA(0, 0, 0, 1)
        Fill: =RGBA(51, 51, 51, 1)
        Height: =3
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =842
        X: =465
        Y: =182
        ZIndex: =34

    managerEditor As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        BorderColor: =RGBA(79, 90, 94, 1)
        DelayItemLoading: =true
        DisplayMode: |-
            =displayMode
            //If(visStatusListBox || visUserGal ||  visUserGal2 || visWeekPlan = true, DisplayMode.Disabled, DisplayMode.Edit) 
        Fill: =RGBA(245, 245, 242, 1)
        Height: =468
        Items: |
            =Switch(
                selectedCategory, 
                "ARK", selPrj_currentPhase_task_A,
                "KON", selPrj_currentPhase_task_K,
                "BRA", selPrj_currentPhase_task_B,
                "MYN", selPrj_currentPhase_task_M,
                "BÆR", selPrj_currentPhase_task_N,
                "VVS", selPrj_currentPhase_task_V,
                "UDF", selPrj_currentPhase_task_U
            )
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplateFill: |-
            =/*
            If(
                selectedPrjFromOverview = Blank(), RGBA(0,0,0,0), 
                selectedPrjFromOverview = projectName_1.Text, RGBA(0,0,0,0),
                RGBA(0, 0, 0, 0.05)
            )
            */
        TemplatePadding: =0
        TemplateSize: =30
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =852
        X: =459
        Y: =252
        ZIndex: =35

        resButton_9 As button:
            BorderThickness: =0
            Color: |-
                =If(
                    ThisItem.opgaveProgress < 100, RGBA(255, 255, 255, 1), 
                    (ThisItem.readyForKS = Blank() || ThisItem.readyForKS = false) && ThisItem.rejection = false && ThisItem.approval = false, RGBA(255, 255, 255, 1), 
                    ThisItem.readyForKS = true && ThisItem.rejection = false && ThisItem.approval = false, RGBA(0, 0, 0, 1),
                    ThisItem.readyForKS = false && ThisItem.rejection = true && ThisItem.approval = false, RGBA(255, 255, 255, 1),
                    ThisItem.readyForKS = false && ThisItem.rejection = false && ThisItem.approval = true, RGBA(0, 0, 0, 1),
                    //The last color parameter applies to Blank() data
                    RGBA(255, 255, 255, 1)
                )
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: |-
                =If(
                    ThisItem.opgaveProgress < 100, RGBA(80, 80, 80, 1),
                    (ThisItem.readyForKS = Blank() || ThisItem.readyForKS = false) && ThisItem.rejection = false && ThisItem.approval = false, RGBA(80, 80, 80, 1), 
                    ThisItem.readyForKS = true && ThisItem.rejection = false && ThisItem.approval = false, RGBA(0,0,0,0),
                    ThisItem.readyForKS = false && ThisItem.rejection = true && ThisItem.approval = false, RGBA(80, 80, 80, 1),
                    ThisItem.readyForKS = false && ThisItem.rejection = false && ThisItem.approval = true, RGBA(0,0,0,0),
                    RGBA(80, 80, 80, 1)
                )
            FocusedBorderThickness: =0
            FontWeight: =FontWeight.Normal
            Height: =25
            HoverFill: =RGBA(180, 180, 180, 1)
            OnSelect: |
                =Set(visControlMenu, true);
                Set(visRSCard, true);
                Set(visKSCard, true);
                Set(visStatusListBox, true);
                Set(visUserGal, false);
                
                Set(displayMode, DisplayMode.Disabled);
                
                Set(selectedOpgave, ThisItem);
                Set(selectedTask, ThisItem.docs);
                Set(selectedRowNr, ThisItem.delegation);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, false);
                
                ClearCollect(selPrj_logCollection, ThisItem.log);
                
                If(selectedOpgave.markColor = Blank() || selectedOpgave.markColor = "IKKE STARTET" || selectedOpgave.markColor = "I GANG", 
                    Set(visMessageBox, false), Set(visMessageBox, true));
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =8
            RadiusBottomRight: =8
            RadiusTopLeft: =8
            RadiusTopRight: =8
            Size: =9
            Text: |-
                =Upper(ThisItem.resources)
                //If(ThisItem.resources <> Blank(), ThisItem.resources, userSelectGallery.Selected.MailNickname)
            Width: =40
            X: =394
            Y: =2.5
            ZIndex: =5

        Icon6 As icon.Trash:
            Color: =RGBA(194, 194, 194, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit))
            Height: =15
            Icon: =Icon.Trash
            OnSelect: |+
                =Set(selectedTask, ThisItem.docs);
                Set(selectedRowNr, ThisItem.delegation);
                
                Switch(selectedCategory,
                    "ARK",
                    RemoveIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr);
                    ClearCollect(selPrj_currentPhase_task_A, ForAll(Sequence(CountRows(selPrj_currentPhase_task_A)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_A, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)}))),
                    "KON",
                    RemoveIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr);
                    ClearCollect(selPrj_currentPhase_task_K, ForAll(Sequence(CountRows(selPrj_currentPhase_task_K)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_K, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)}))),
                    "BRA",
                    RemoveIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr);
                    ClearCollect(selPrj_currentPhase_task_B, ForAll(Sequence(CountRows(selPrj_currentPhase_task_B)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_B, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)}))),
                    "MYN",
                    RemoveIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr);
                    ClearCollect(selPrj_currentPhase_task_M, ForAll(Sequence(CountRows(selPrj_currentPhase_task_M)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_M, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)}))),
                    "BÆR",
                    RemoveIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr);
                    ClearCollect(selPrj_currentPhase_task_N, ForAll(Sequence(CountRows(selPrj_currentPhase_task_N)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_N, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)}))),
                    "VVS",
                    RemoveIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr);
                    ClearCollect(selPrj_currentPhase_task_V, ForAll(Sequence(CountRows(selPrj_currentPhase_task_V)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_V, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)}))),
                    "UDF",
                    RemoveIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr);
                    ClearCollect(selPrj_currentPhase_task_U, ForAll(Sequence(CountRows(selPrj_currentPhase_task_U)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_U, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})))
                );
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
                
            Visible: |-
                =If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    true, false
                )
            Width: =15
            X: =823
            Y: =7
            ZIndex: =14

        Button3 As button:
            Align: =Align.Left
            BorderThickness: =0
            Color: =If(ThisItem.complMark = true, RGBA(210, 210, 210, 1), RGBA(0, 0, 0, 1)) 
            DisabledColor: =RGBA(219, 219, 219, 1)
            Fill: =RGBA(0, 0, 0, 0)
            Font: =Font.Lato
            FontWeight: =FontWeight.Normal
            Height: =30
            HoverFill: =RGBA(128, 128, 128, 1)
            OnSelect: |-
                =Set(selectedOpgave, ThisItem);
                Set(selectedTask, ThisItem.docs);
                Set(selectedRowNr, ThisItem.delegation);
                Set(selTaskPopup, !selTaskPopup);
                Set(titleEditor, false);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, false);
                
                ClearCollect(selPrj_logCollection, ThisItem.log);
            PaddingLeft: =2
            PaddingRight: =3
            PressedFill: =RGBA(0,0,0,0.1)
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =9
            Text: =ThisItem.docs
            Width: =350
            X: =30
            ZIndex: =15

        ksButton_9 As button:
            BorderThickness: =0
            Color: |-
                =If(
                    ThisItem.opgaveProgress < 100, RGBA(0, 0, 0, 1), 
                    (ThisItem.readyForKS = Blank() || ThisItem.readyForKS = false) && ThisItem.rejection = false && ThisItem.approval = false, RGBA(0, 0, 0, 1), 
                    ThisItem.readyForKS = true && ThisItem.rejection = false && ThisItem.approval = false, RGBA(255, 255, 255, 1),
                    ThisItem.readyForKS = false && ThisItem.rejection = true && ThisItem.approval = false, RGBA(255, 255, 255, 1),
                    ThisItem.readyForKS = false && ThisItem.rejection = false && ThisItem.approval = true, RGBA(255, 255, 255, 1),
                    //The last color parameter applies to Blank() data
                    RGBA(0, 0, 0, 1)
                )
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: |-
                =If(    
                    ThisItem.opgaveProgress < 100, RGBA(0,0,0,0),
                    ThisItem.approval = true, approvalToggle.TrueFill,
                    ThisItem.rejection = true, rejectionToggle.TrueFill,
                    ThisItem.readyForKS = true, RGBA(80, 80, 80, 1), 
                
                    //The last color parameter applies to Blank() data
                    RGBA(0,0,0,0)
                )
            FocusedBorderThickness: =0
            FontWeight: =FontWeight.Normal
            Height: =25
            HoverFill: =RGBA(180, 180, 180, 1)
            OnSelect: |+
                =Set(visControlMenu, true);
                Set(visRSCard, true);
                Set(visKSCard, true);
                Set(visStatusListBox, true);
                
                Set(displayMode, DisplayMode.Disabled);
                
                Set(selectedOpgave, ThisItem);
                Set(selectedTask, ThisItem.docs);
                Set(selectedRowNr, ThisItem.delegation);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, false);
                
                ClearCollect(selPrj_logCollection, ThisItem.log);
                
                
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =8
            RadiusBottomRight: =8
            RadiusTopLeft: =8
            RadiusTopRight: =8
            Size: =9
            Text: |-
                =Upper(ThisItem.ks)
                //If(ThisItem.resources <> Blank(), ThisItem.resources, userSelectGallery.Selected.MailNickname)
            Width: =40
            X: =608
            Y: =2.5
            ZIndex: =16

        Icon13 As icon.Lock:
            Color: =RGBA(116, 116, 116, 1)
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: |-
                =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled)
                //, If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit))
            Height: =13
            Icon: |-
                =Switch( 
                    ThisItem.complMark,
                    true, Icon.Lock,
                    false, Icon.Unlock,
                    Boolean(Blank()), Icon.Unlock
                )
            OnSelect: |-
                =Set(selectedDocType, ThisItem.docCategory);
                Set(selectedTask, ThisItem.docs);
                Set(selectedRowNr, ThisItem.delegation);
                ClearCollect(selPrj_logCollection, ThisItem.log);
                
                Switch(
                    ThisItem.complMark,
                    false,
                    If(
                        selectedDocType = "ark",
                            UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {complMark: true}),
                        selectedDocType = "kon",
                            UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {complMark: true}),
                        selectedDocType = "bra",
                            UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {complMark: true}),
                        selectedDocType = "myn",
                            UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {complMark: true}),
                        selectedDocType = "bær",
                            UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {complMark: true}),
                        selectedDocType = "vvs",
                            UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {complMark: true}),
                        selectedDocType = "udf",
                            UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {complMark: true})
                    );
                    ClearCollect(opgaver_selPrj_allTasks, 
                        selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                        selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                    );
                    Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                        {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: Upper(Left(User().Email, 3)) & " closed the task"});
                    Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
                    ),
                    
                    
                    true,
                    If(
                        selectedDocType = "ark",
                            UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {complMark: false}),
                        selectedDocType = "kon",
                            UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {complMark: false}),
                        selectedDocType = "bra",
                            UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {complMark: false}),
                        selectedDocType = "myn",
                            UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {complMark: false}),
                        selectedDocType = "bær",
                            UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {complMark: false}),
                        selectedDocType = "vvs",
                            UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {complMark: false}),
                        selectedDocType = "udf",
                            UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {complMark: false})
                    );
                
                    ClearCollect(opgaver_selPrj_allTasks, 
                        selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                        selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                    );
                );
            Visible: =If(User().Email = "jpa@aticon.dk", true, If(ThisItem.approval = true, true, false))
            Width: =13
            X: =10
            Y: =9
            ZIndex: =18

        GroupSlutDato_9 As group:
            Height: =5
            Width: =5
            X: =-756
            Y: =24
            ZIndex: =20

            slutText_9 As button:
                BorderThickness: =0
                Color: |-
                    =If(
                        DateDiff(Today(), DateTimeValue(ThisItem.slutDato)) < 0, Color.Red, 
                        DateDiff(Today(), DateTimeValue(ThisItem.slutDato)) > 0 && DateDiff(Today(), DateTimeValue(ThisItem.slutDato)) < 3, Color.Orange,
                        RGBA(0, 0, 0, 0.75)
                    )
                DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: =RGBA(0, 0, 0, 0)
                FontWeight: =FontWeight.Normal
                Height: =24
                OnSelect: =Select(slutDatePicker_9)
                PaddingLeft: =2
                PaddingRight: =2
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =9
                Text: =Text(DateTimeValue(ThisItem.slutDato), "dd/mm/yy")
                Visible: |-
                    =If(
                        ThisItem.docCategory = "ark", visADoc,
                        ThisItem.docCategory = "kon", visKDoc,
                        ThisItem.docCategory = "bra", visBDoc,
                        ThisItem.docCategory = "myn", visMDoc,
                        ThisItem.docCategory = "bær", visNDoc,
                        ThisItem.docCategory = "vvs", visVDoc,
                        ThisItem.docCategory = "udf", visUDoc
                    )
                Width: =70
                X: =562
                ZIndex: =8

            slutDatePicker_9 As datepicker:
                BorderThickness: =0
                Color: =RGBA(0, 0, 0, 0)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(0, 0, 0, 0)
                DisabledFill: =RGBA(0, 0, 0, 0)
                DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =24
                IconBackground: =RGBA(237, 237, 237, 0)
                IconFill: =If(ThisItem.slutDato <> Blank(), RGBA(0, 0, 0, 0), RGBA(0,0,0,0.2))
                OnChange: |-
                    =Set(selectedOpgave, ThisItem);
                    
                    /*
                    With(
                        {parentOpgaver: LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName)},
                            UpdateIf(parentOpgaver.byDocs, docs = selectedOpgave.docs,
                                {
                                    slutDato: Text(slutDatePicker_8.SelectedDate)
                                }
                            );
                            Patch(combinedAllTasks, LookUp(combinedAllTasks, ThisRecord.docs = selectedOpgave.docs), {slutDato: Text(slutDatePicker_8.SelectedDate)});
                    );
                    */
                OnSelect: =Set(selectedOpgave, ThisItem);
                PaddingLeft: =3
                PaddingRight: =0
                Size: =8
                StartYear: =2010
                Visible: |-
                    =If(
                        ThisItem.docCategory = "ark", visADoc,
                        ThisItem.docCategory = "kon", visKDoc,
                        ThisItem.docCategory = "bra", visBDoc,
                        ThisItem.docCategory = "myn", visMDoc,
                        ThisItem.docCategory = "bær", visNDoc,
                        ThisItem.docCategory = "vvs", visVDoc,
                        ThisItem.docCategory = "udf", visUDoc
                    )
                Width: =70
                X: =562
                ZIndex: =9

        Group1 As group:
            Height: =5
            Width: =5
            X: =40
            Y: =30
            ZIndex: =20

            Circle1 As circle:
                Fill: =RGBA(255, 255, 255, 1)
                Height: =14
                OnSelect: =Select(Parent)
                Visible: =If(ThisItem.markColor = "STÅR FAST" || ThisItem.markColor = "AFVENTER EKST.", true, false)
                Width: =14
                X: =318
                ZIndex: =12

            Icon8 As icon.Error:
                Color: |-
                    =Switch(ThisItem.markColor, "AFVENTER EKST.", ColorValue("#9984b3"), "STÅR FAST", ColorValue("#af3743"))
                Height: =15
                Icon: =Icon.Error
                OnSelect: |+
                    =//Set(visHelpMessage, !visHelpMessage);
                    
                    Set(visControlMenu, true);
                    Set(visRSCard, true);
                    Set(visKSCard, true);
                    Set(visStatusListBox, true);
                    Set(visUserGal, false);
                    
                    Set(displayMode, DisplayMode.Disabled);
                    
                    Set(selectedOpgave, ThisItem);
                    Set(selectedTask, ThisItem.docs);
                    Set(selectedRowNr, ThisItem.delegation);
                    
                    
                    ClearCollect(selPrj_logCollection, ThisItem.log);
                    
                    If(selectedOpgave.markColor = Blank() || selectedOpgave.markColor = "IKKE STARTET" || selectedOpgave.markColor = "I GANG", 
                        Set(visMessageBox, false), Set(visMessageBox, true));
                    
                    
                    
                Visible: =If(ThisItem.markColor = "STÅR FAST" || ThisItem.markColor = "AFVENTER EKST.", true, false)
                Width: =15
                X: =318
                ZIndex: =13

        GroupEXTsendt_1 As group:
            Height: =5
            Width: =5
            X: =-576
            Y: =24
            ZIndex: =21

            extSendTXT_1 As button:
                BorderThickness: =0
                Color: |-
                    =If(
                        DateDiff(Today(), DateTimeValue(ThisItem.extSendt)) < 0, Color.Red, 
                        DateDiff(Today(), DateTimeValue(ThisItem.extSendt)) > 0 && DateDiff(Today(), DateTimeValue(ThisItem.extSendt)) < 3, Color.Orange,
                        RGBA(0, 0, 0, 0.75)
                    )
                DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: =RGBA(0, 0, 0, 0)
                FontWeight: =FontWeight.Normal
                Height: =24
                OnSelect: =Select(extSend_1)
                PaddingLeft: =2
                PaddingRight: =2
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =9
                Text: =Text(DateTimeValue(ThisItem.extSendt), "dd/mm/yy")
                Visible: |-
                    =If(
                        ThisItem.docCategory = "ark", visADoc,
                        ThisItem.docCategory = "kon", visKDoc,
                        ThisItem.docCategory = "bra", visBDoc,
                        ThisItem.docCategory = "myn", visMDoc,
                        ThisItem.docCategory = "bær", visNDoc,
                        ThisItem.docCategory = "vvs", visVDoc,
                        ThisItem.docCategory = "udf", visUDoc
                    )
                Width: =60
                X: =404
                ZIndex: =10

            extSend_1 As datepicker:
                BorderThickness: =0
                Color: =RGBA(0, 0, 0, 0)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(0, 0, 0, 0)
                DisabledFill: =RGBA(0, 0, 0, 0)
                DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =24
                IconBackground: =RGBA(237, 237, 237, 0)
                IconFill: =If(ThisItem.extSendt <> Blank(), RGBA(0, 0, 0, 0), RGBA(0,0,0,0.2))
                OnChange: |+
                    =Set(selectedOpgave, ThisItem);
                    
                    If(
                        selectedOpgave.docCategory = "ark",
                        Patch(selPrj_currentPhase_task_A, LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedOpgave.docs), 
                            {extSendt: extSend_1.SelectedDate}),
                        selectedOpgave.docCategory = "kon",
                        Patch(selPrj_currentPhase_task_K, LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedOpgave.docs), 
                            {extSendt: extSend_1.SelectedDate}),
                        selectedOpgave.docCategory = "bra",
                        Patch(selPrj_currentPhase_task_B, LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedOpgave.docs), 
                            {extSendt: extSend_1.SelectedDate}),
                        selectedOpgave.docCategory = "myn",
                        Patch(selPrj_currentPhase_task_M, LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedOpgave.docs), 
                            {extSendt: extSend_1.SelectedDate}),
                        selectedOpgave.docCategory = "bær",
                        Patch(selPrj_currentPhase_task_N, LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedOpgave.docs), 
                            {extSendt: extSend_1.SelectedDate}),
                        selectedOpgave.docCategory = "vvs",
                        Patch(selPrj_currentPhase_task_V, LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedOpgave.docs), 
                            {extSendt: extSend_1.SelectedDate}),
                        selectedOpgave.docCategory = "udf",
                        Patch(selPrj_currentPhase_task_U, LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedOpgave.docs), 
                            {extSendt: extSend_1.SelectedDate})
                    );
                    
                    Patch(opgaver_selPrj_allTasks, LookUp(opgaver_selPrj_allTasks, ThisRecord.docs = selectedOpgave.docs && ThisRecord.docCategory = selectedOpgave.docCategory), 
                    {extSendt: Text(extSend_1.SelectedDate)}
                    );
                    
                    Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                        {
                            task: 
                                [{
                                ARK: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"),
                                KON: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"),
                                BRA: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"),
                                MYN: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"),
                                BÆR: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"),
                                VVS: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"),
                                UDF: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf")
                                }]
                        }
                    );
                    
                OnSelect: =Set(selectedOpgave, ThisItem);
                PaddingLeft: =3
                PaddingRight: =0
                Size: =8
                StartYear: =2010
                Visible: |-
                    =If(
                        ThisItem.docCategory = "ark", visADoc,
                        ThisItem.docCategory = "kon", visKDoc,
                        ThisItem.docCategory = "bra", visBDoc,
                        ThisItem.docCategory = "myn", visMDoc,
                        ThisItem.docCategory = "bær", visNDoc,
                        ThisItem.docCategory = "vvs", visVDoc,
                        ThisItem.docCategory = "udf", visUDoc
                    )
                Width: =60
                X: =404
                ZIndex: =11

        Group8 As group:
            Height: =5
            Width: =5
            X: =40
            Y: =30
            ZIndex: =23

            Rectangle3_1 As rectangle:
                Fill: =RGBA(219, 219, 219, 0.5)
                Height: =Rectangle3.Height
                Width: =120
                X: =461
                Y: =Rectangle3.Y
                ZIndex: =2

            Rectangle3 As rectangle:
                DisabledFill: =Color.LightGray
                DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: |-
                    =If(
                        ThisItem.markColor = "STÅR FAST", RGBA(175, 55, 65, 1),
                        ThisItem.markColor = "AFVENTER EKST.", RGBA(153, 132, 179, 1),
                        RGBA(200, 219, 217, 1)
                    )
                Height: =25
                Width: =120 * ThisItem.opgaveProgress/100
                X: =461
                Y: =(30 - Rectangle3.Height) * 0.5
                ZIndex: =3

            statusNumber_9 As button:
                BorderThickness: =0
                Color: =ColorValue(ThisItem.fontColor)
                DisabledFill: =RGBA(0, 0, 0, 0)
                DisplayMode: =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: =RGBA(0,0,0,0)
                FocusedBorderThickness: =0
                FontWeight: =FontWeight.Normal
                Height: =Rectangle3.Height
                HoverFill: =RGBA(0, 0, 0, 1)
                Italic: =ThisItem.fontItalic
                OnSelect: |-
                    =Set(visControlMenu, true);
                    Set(visRSCard, true);
                    Set(visKSCard, true);
                    Set(visStatusListBox, true);
                    /*
                    If(selectedOpgave.markColor = "STÅR FAST" || selectedOpgave.markColor = "AFVENTER EKST.", 
                        Set(visMessageBox, true), Set(visMessageBox, false));
                    */
                    
                    Set(selectedOpgave, ThisItem);
                    Set(selectedTask, ThisItem.docs);
                    Set(selectedRowNr, ThisItem.delegation);
                    Set(visUserGal, false);
                    Set(displayMode, DisplayMode.Disabled);
                    
                    //Reset the auto kick-out timer
                    Reset(timerAutoPopUpWindow);
                    Set(activateTimer_AutoGetOutPage, false);
                    Set(activateTimer_AutoGetOutPage, true);
                    
                    Set(activateTimer_RefreshPrjList, false);
                    
                    
                    ClearCollect(selPrj_logCollection, ThisItem.log);
                    
                    If(selectedOpgave.markColor = Blank() || selectedOpgave.markColor = "IKKE STARTET" || selectedOpgave.markColor = "I GANG", 
                        Set(visMessageBox, false), Set(visMessageBox, true));
                PaddingLeft: =2
                PaddingRight: =2
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =8
                Strikethrough: =ThisItem.fontStrike
                Text: =If(ThisItem.opgaveProgress = Blank(), "0%", ThisItem.opgaveProgress & "%")
                Width: =120
                X: =461
                Y: =Rectangle3.Y
                ZIndex: =4

        Group7 As group:
            Height: =5
            Width: =5
            X: =40
            Y: =30
            ZIndex: =24

            IndvDeadline_Textbox As label:
                Align: =Align.Center
                Color: |+
                    =If(
                        DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) < 0, RGBA(255, 255, 255, 1), 
                        DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) >= 0 && DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) <= 14, RGBA(200, 80, 85, 1),
                        RGBA(80, 80, 80, 1)
                    )
                    
                DisabledColor: =RGBA(220, 220, 220, 1)
                DisabledFill: =RGBA(0,0,0,0)
                DisplayMode: |
                    =If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: |-
                    =If(
                        DateTimeValue(ThisItem.indvDeadline) = Blank(), RGBA(0,0,0,0),
                        If(
                            DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) < 0, RGBA(190, 80, 85, 1), 
                            DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) >= 0 && DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) <= 14, RGBA(0, 80, 85, 0),
                            RGBA(0, 0, 0, 0))  
                    )
                Height: =IndvDeadline_Text.Height
                OnSelect: =Select(Parent)
                PaddingLeft: =2
                PaddingRight: =2
                Size: =9
                Text: =Text(DateValue(ThisItem.indvDeadline), "dd-mm-yyyy")
                Width: =IndvDeadline_Text.Width
                X: =718
                Y: =IndvDeadline_Text.Y
                ZIndex: =1

            IndvDeadline_Text As button:
                BorderThickness: =0
                Color: |+
                    =If(
                        DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) < 0, RGBA(255, 255, 255, 1), 
                        DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) >= 0 && DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) <= 14, RGBA(200, 80, 85, 1),
                        RGBA(170, 170, 170, 1)
                    )
                    
                DisabledColor: |+
                    =If(
                        DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) <= 0, RGBA(255, 255, 255, 1), 
                        DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) > 0 && DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) < 14, RGBA(200, 80, 85, 1),
                        RGBA(170, 170, 170, 1)
                    )
                    
                DisabledFill: |-
                    =If(
                        DateTimeValue(ThisItem.indvDeadline) = Blank(), RGBA(0,0,0,0),
                        If(
                            DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) < 0, RGBA(190, 80, 85, 1), 
                            DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) >= 0 && DateDiff(Today(), DateTimeValue(ThisItem.indvDeadline)) <= 14, RGBA(0, 80, 85, 0),
                            RGBA(0, 0, 0, 0))  
                    )
                DisplayMode: |-
                    =//If(ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                    DisplayMode.Disabled
                Fill: =RGBA(0, 0, 0, 0)
                FontWeight: =FontWeight.Normal
                Height: =20
                OnSelect: =Select(IndvDeadline)
                PaddingLeft: =2
                PaddingRight: =2
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =9
                Text: =Text(DateValue(ThisItem.indvDeadline), "dd-mm-yyyy")
                Visible: =false
                Width: =70
                X: =718
                Y: =5
                ZIndex: =6

            IndvDeadline As datepicker:
                BorderThickness: =0
                Color: =RGBA(0, 0, 0, 0)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(0, 0, 0, 0)
                DisabledFill: =RGBA(0, 0, 0, 0)
                DisplayMode: |-
                    =DisplayMode.Disabled
                    /*
                    If(ThisItem.complMark = true, DisplayMode.Disabled, 
                        If(ThisItem.indvDeadline = Text(Blank()) || ThisItem.indvDeadline = Blank(), DisplayMode.Disabled), DisplayMode.Edit
                    )
                    */
                Fill: =RGBA(0, 0, 0, 0)
                Height: =30
                IconBackground: =RGBA(237, 237, 237, 0)
                IconFill: =If(ThisItem.indvDeadline = Text(Blank()) || ThisItem.indvDeadline = Blank(), RGBA(0,0,0,0.3), RGBA(0, 0, 0, 0))
                OnChange: |+
                    =Set(selectedOpgave, ThisItem);
                    Set(selectedIndvDeadline, IndvDeadline.SelectedDate);
                    
                    Switch(selectedCategory,
                        "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: IndvDeadline.SelectedDate}),
                        "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: IndvDeadline.SelectedDate}),
                        "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: IndvDeadline.SelectedDate}),
                        "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: IndvDeadline.SelectedDate}),
                        "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: IndvDeadline.SelectedDate}),
                        "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: IndvDeadline.SelectedDate}),
                        "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: IndvDeadline.SelectedDate})
                    );
                    
                    ClearCollect(selPrj_logCollection, ThisItem.log);
                    Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                        {
                            date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                            text: "Individuel deadline sat til " & Text(selectedIndvDeadline, "dd-mm-yyyy")
                        }
                    );
                    
                    Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    );
                    
                    Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                        {
                            task: 
                                [{
                                ARK: Filter(opgaver_selPrj_allTasks, docCategory = "ark"),
                                KON: Filter(opgaver_selPrj_allTasks, docCategory = "kon"),
                                BRA: Filter(opgaver_selPrj_allTasks, docCategory = "bra"),
                                MYN: Filter(opgaver_selPrj_allTasks, docCategory = "myn"),
                                BÆR: Filter(opgaver_selPrj_allTasks, docCategory = "bær"),
                                VVS: Filter(opgaver_selPrj_allTasks, docCategory = "vvs"),
                                UDF: Filter(opgaver_selPrj_allTasks, docCategory = "udf")
                                }]
                        }
                    );
                    
                    
                OnSelect: |-
                    =Set(selectedDocType, ThisItem.docCategory);
                    Set(selectedTask, ThisItem.docs);
                    Set(selectedDate, Text(ThisItem.indvDeadline));
                PaddingLeft: =3
                PaddingRight: =0
                Size: =8
                StartYear: =2010
                Visible: =false
                Width: =70
                X: =718
                ZIndex: =7

            Icon10 As icon.Cancel:
                Color: =RGBA(128, 128, 128, 1)
                DisabledColor: =RGBA(244, 244, 244, 0)
                DisabledFill: =RGBA(220, 220, 220, 0)
                DisplayMode: |-
                    =If(ThisItem.indvDeadline = Text(Blank()) || ThisItem.indvDeadline = Blank() || ThisItem.complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                    //If( ThisItem.complMark = false || ThisItem.complMark = Blank(), DisplayMode.Edit, DisplayMode.Disabled)
                Height: =30
                HoverFill: =RGBA(50, 50, 50, 0.3)
                Icon: =Icon.Cancel
                OnSelect: |-
                    =Set(selectedTask, ThisItem.docs);
                    Switch(
                        selectedCategory,
                        "ARK", UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {indvDeadline: Text(Blank())}),
                        "KON", UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {indvDeadline: Text(Blank())}),
                        "BRA", UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {indvDeadline: Text(Blank())}),
                        "MYN", UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {indvDeadline: Text(Blank())}),
                        "BÆR", UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {indvDeadline: Text(Blank())}),
                        "VVS", UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {indvDeadline: Text(Blank())}),
                        "UDF", UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {indvDeadline: Text(Blank())})
                    )
                Visible: =false
                Width: =12
                X: =790
                ZIndex: =17

    Rectangle7_5 As rectangle:
        BorderColor: =RGBA(0, 0, 0, 1)
        Fill: =RGBA(51, 51, 51, 1)
        Height: =2
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =842
        X: =465
        Y: =340
        ZIndex: =49

    Label1_37 As label:
        DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 || visWeekPlan = true, DisplayMode.Disabled, DisplayMode.Edit) 
        Font: =Font.Lato
        FontWeight: =FontWeight.Semibold
        Height: =25
        Size: =9
        Text: ="Tilbud accepteret"
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =115
        X: =477
        Y: =577
        ZIndex: =50

    Rectangle7_6 As rectangle:
        BorderColor: =RGBA(0, 0, 0, 1)
        Fill: =RGBA(51, 51, 51, 1)
        Height: =2
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =842
        X: =465
        Y: =553
        ZIndex: =61

    Button19_19 As button:
        BorderColor: =RGBA(102, 102, 102, 1)
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        Fill: =RGBA(149, 149, 149, 1)
        FocusedBorderThickness: =0
        FontWeight: =FontWeight.Normal
        Height: =22
        HoverFill: =Color.Black
        OnSelect: =
        PaddingLeft: =0
        PaddingRight: =0
        RadiusBottomLeft: =5
        RadiusBottomRight: =5
        RadiusTopLeft: =5
        RadiusTopRight: =5
        Size: =8
        Text: =
        Visible: =//If(visPlan = true, false, visOverview = true, true)
        Width: =20
        X: =60
        Y: =97
        ZIndex: =64

    sortingButton As icon.ArrowsUpDown:
        Color: =RGBA(255, 255, 255, 1)
        Fill: =RGBA(149, 149, 149, 1)
        Height: =18
        Icon: =Icon.Sort
        OnSelect: |-
            =UpdateContext({sortByWhat: "prjNumber", sortByPrjNumber: !sortByPrjNumber})
        PaddingBottom: =3
        PaddingLeft: =2
        PaddingRight: =2
        PaddingTop: =3
        Visible: =If(visPlan = true, false, visOverview = true, true)
        Width: =18
        X: =60
        Y: =97
        ZIndex: =65

    Icon4_1 As icon.Add:
        Color: =RGBA(255, 255, 255, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(51, 51, 51, 1)
        Height: =19
        Icon: =Icon.Add
        OnSelect: |
            =Set(visReg, !visReg);
            
            Set(selectedbygCategory_regist, {Value: "Enfamiliehus"});
            Set(selectedPrjType_regist, {Value: "Nybyggeri"});
            Set(selectedEntreprise_regist, {Value: "Totalentreprise"});
            Set(selectedradgivning_regist, {Value: "TR"});
            
            ClearCollect(testPL, Choices('Project List'.projectLeader));//, ThisRecord.DisplayName in employeeList.DisplayName));
            ClearCollect(entrepriseTable, ForAll(Choices('Project List'.Entreprise), {original: ThisRecord.Value, style: Upper(ThisRecord.Value)}));
            ClearCollect(bygCategoriTable, ForAll(Choices('Project List'.bygCategories),  {original: ThisRecord.Value, style: Upper(ThisRecord.Value)}));
            ClearCollect(prjTypeTable, ForAll(Choices('Project List'.projectType), {original: ThisRecord.Value, style: Upper(ThisRecord.Value)}));
            ClearCollect(radgivningTable, ForAll(Choices('Project List'.Rådgivning), {original: ThisRecord.Value, style: Upper(ThisRecord.Value)}));
            
            /*
            ForAll(Filter(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, 
                ThisRecord.GivenName = "Elmira" ||
                ThisRecord.GivenName = "Jannie" ||
                //ThisRecord.GivenName = "Joonseok" || 
                ThisRecord.GivenName = "Kristel" || 
                ThisRecord.GivenName = "Matias" ||
                ThisRecord.GivenName = "Pawel"
            ), Left(Upper(ThisRecord.Mail), 3))
            */
            
            //{DisplayName: "Elmira Vilain", Claims: Text(Blank()), Department: Text(Blank()), Email: "evi@aticon.dk", JobTitle: Text(Blank()), Picture: Blank()}
            
            ClearCollect(taskTable, 
                {value: "ARK", mark: Boolean(Blank())},
                {value: "KON", mark: Boolean(Blank())},
                {value: "BRA", mark: Boolean(Blank())},
                {value: "MYN", mark: Boolean(Blank())},
                {value: "BÆR", mark: Boolean(Blank())},
                {value: "VVS", mark: Boolean(Blank())},
                {value: "UDF", mark: Boolean(Blank())}
            );
            
            ClearCollect(selectPhaseInRegist, {phase: Text(Blank()), deadline: Text(Blank()), task: Table({value: Text(Blank()), mark: Boolean(Blank())})});
            Clear(selectPhaseInRegist);
            
            
            ClearCollect(selectTaskInRegist_FOR, selectTaskInRegist_FOR);
            ClearCollect(selectTaskInRegist_SKI, selectTaskInRegist_SKI);
            ClearCollect(selectTaskInRegist_MYN, selectTaskInRegist_MYN);
            ClearCollect(selectTaskInRegist_HOV, selectTaskInRegist_HOV);
            ClearCollect(selectTaskInRegist_UDB, selectTaskInRegist_UDB);
            ClearCollect(selectTaskInRegist_UDF, selectTaskInRegist_UDF);
            ClearCollect(selectTaskInRegist_AFL, selectTaskInRegist_AFL);
            
            
            Reset(sagsNrTextInput);
            Reset(prjNameTextInput);
            Reset(clientTextInput);
            Reset(bygherreTextInput);
            Reset(plDD); Reset(bygcategoryDD); Reset(prjTypeDD); Reset(entrePriseDD); Reset(conClassDD); Reset(brandClassDD); Reset(radgivningDD);
        Visible: =If(visPlan = true, false, visOverview = true, true)
        Width: =20
        X: =64
        Y: =26
        ZIndex: =66

    Icon11 As icon.DetailList:
        Color: =RGBA(0, 0, 0, 1)
        DisabledColor: =RGBA(202, 202, 202, 1)
        DisplayMode: =DisplayMode.Disabled
        Height: =25
        Icon: =Icon.DetailList
        Visible: |-
            =false
            //If(visPlan = true, false, visOverview = true, true)
        Width: =18
        X: =1302
        Y: =93
        ZIndex: =69

    Icon12 As icon.Waffle:
        Color: =RGBA(0, 0, 0, 1)
        DisabledColor: =RGBA(202, 202, 202, 1)
        DisplayMode: =DisplayMode.Disabled
        Height: =15
        Icon: =Icon.Waffle
        Visible: |-
            =false
            //If(visPlan = true, false, visOverview = true, true)
        Width: =15
        X: =1329
        Y: =98
        ZIndex: =70

    editModeBtn As icon.ColorPicker:
        Color: =RGBA(149, 149, 149, 1)
        DisabledColor: =RGBA(219, 219, 219, 1)
        DisplayMode: |-
            =If(
                User().Email = "jkh@aticon.dk" || 
                User().Email = "jpa@aticon.dk" ||
                Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                DisplayMode.Edit, DisplayMode.Disabled
            )
        Height: =18
        Icon: =Icon.Settings
        OnSelect: =Set(editMode, !editMode)
        Visible: =If(visPlan = true, false, visOverview = true, true)
        Width: =18
        X: =82
        Y: =97
        ZIndex: =71

    newProject_1 As rectangle:
        Fill: =RGBA(235, 235, 235, 0.96)
        Height: =768
        Visible: =visReg
        Width: =1326
        X: =40
        ZIndex: =72

    Group1_1 As group:
        Height: =5
        Width: =5
        X: =7
        Y: =40
        ZIndex: =89

        userSelectGallery_3 As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            Default: ={}
            DelayItemLoading: =true
            Fill: =RGBA(255, 255, 255, 0)
            Height: =419
            Items: |-
                =Filter(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, 
                    ThisRecord.GivenName <> "Admin", 
                    ThisRecord.GivenName <> "ATICON-15", 
                    ThisRecord.GivenName <> "Belinda", 
                    ThisRecord.GivenName <> "Daniel Sang-Hoon", 
                    ThisRecord.GivenName <> "Jacob", 
                    ThisRecord.GivenName <> "kimo", 
                    ThisRecord.GivenName <> "BN", 
                    ThisRecord.DisplayName <> "Bogholderi"
                )
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            TemplatePadding: =3
            TemplateSize: =28
            Transition: =Transition.Pop
            Visible: =visPlan
            Width: =71
            X: =40
            Y: =64
            ZIndex: =25

            Label11_1 As label:
                Align: =Align.Right
                Fill: =RGBA(241, 244, 249, 1)
                FontWeight: =FontWeight.Semibold
                Height: =28
                OnSelect: =Select(Parent)
                PaddingLeft: =0
                PaddingRight: =3
                Size: =8.5
                Text: =ThisItem.GivenName
                Width: =65
                ZIndex: =2

        Label6_1 As label:
            Align: =Align.Center
            Color: =RGBA(255, 255, 255, 1)
            Fill: =RGBA(149, 149, 149, 1)
            Height: =28
            PaddingLeft: =0
            PaddingRight: =0
            Size: =9
            Text: ="Resource"
            Visible: =visPlan
            Width: =65
            X: =43
            Y: =31
            ZIndex: =27

    Group6 As group:
        Height: =5
        Width: =5
        X: =60
        Y: =60
        ZIndex: =104

        Label1_33 As label:
            Align: =Align.Center
            DisplayMode: =displayMode
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Bold
            Height: =29
            Size: =9
            Text: ="RESSOURCE"
            Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), false, true))
            Width: =80
            X: =831
            Y: =217
            ZIndex: =45

        Label1_34 As label:
            Align: =Align.Center
            DisplayMode: =displayMode
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Bold
            Height: =29
            Size: =9
            Text: ="STATUS"
            Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), false, true))
            Width: =80
            X: =940
            Y: =217
            ZIndex: =46

        Label1_35 As label:
            Align: =Align.Center
            DisplayMode: =displayMode
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Bold
            Height: =29
            Size: =9
            Text: ="KONTROLLANT"
            Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), false, true))
            Width: =80
            X: =1047
            Y: =217
            ZIndex: =47

        Label1_36 As label:
            Align: =Align.Center
            DisplayMode: =displayMode
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Bold
            Height: =29
            Size: =9
            Text: ="DEADLINE"
            Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), false, true))
            Width: =80
            X: =1170
            Y: =217
            ZIndex: =48

    Circle2 As circle:
        BorderColor: =RGBA(0, 0, 0, 1)
        BorderThickness: =1.5
        Fill: =RGBA(237, 237, 237, 1)
        Height: =45
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =45
        X: =512
        Y: =204
        ZIndex: =117

    Icon15 As icon.Add:
        Color: =RGBA(0, 0, 0, 1)
        DisabledColor: =RGBA(77, 77, 77, 1)
        DisplayMode: =DisplayMode.Disabled
        Height: =30
        Icon: =Icon.People
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =30
        X: =520
        Y: =212
        ZIndex: =118

    Circle2_1 As circle:
        BorderColor: =RGBA(0, 0, 0, 1)
        BorderThickness: =1.5
        Fill: =RGBA(237, 237, 237, 1)
        Height: =45
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =45
        X: =604
        Y: =204
        ZIndex: =119

    Circle2_2 As circle:
        BorderColor: =RGBA(0, 0, 0, 1)
        BorderThickness: =1.5
        Fill: =RGBA(237, 237, 237, 1)
        Height: =45
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =45
        X: =696
        Y: =204
        ZIndex: =120

    Circle2_3 As circle:
        BorderColor: =RGBA(0, 0, 0, 1)
        BorderThickness: =1.5
        Fill: =RGBA(237, 237, 237, 1)
        Height: =45
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =45
        X: =788
        Y: =204
        ZIndex: =121

    Circle2_4 As circle:
        BorderColor: =RGBA(0, 0, 0, 1)
        BorderThickness: =1.5
        Fill: =RGBA(237, 237, 237, 1)
        Height: =45
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =45
        X: =881
        Y: =204
        ZIndex: =122

    Icon15_1 As icon.Add:
        Color: =RGBA(0, 0, 0, 1)
        DisabledColor: =RGBA(77, 77, 77, 1)
        DisplayMode: =DisplayMode.Disabled
        Height: =30
        Icon: =Icon.OfficeBuilding
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =30
        X: =612
        Y: =212
        ZIndex: =123

    Icon15_2 As icon.Add:
        Color: =RGBA(0, 0, 0, 1)
        DisabledColor: =RGBA(77, 77, 77, 1)
        DisplayMode: =DisplayMode.Disabled
        Height: =30
        Icon: =Icon.Manufacture
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =30
        X: =704
        Y: =212
        ZIndex: =124

    Group16 As group:
        Height: =5
        Width: =5
        X: =60
        Y: =60
        ZIndex: =124

        Label1_29 As label:
            Align: =Align.Center
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Semibold
            Height: =29
            Size: =9
            Text: ="Sendt til KS"
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =106
            X: =790
            Y: =128
            ZIndex: =36

        Label1_31 As label:
            Align: =Align.Center
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Semibold
            Height: =29
            Size: =9
            Text: ="Modtaget fra KS"
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =106
            X: =955
            Y: =128
            ZIndex: =37

        Label1_32 As label:
            Align: =Align.Center
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Semibold
            Height: =29
            Size: =9
            Text: ="Sendt til kunde"
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =106
            X: =1142
            Y: =128
            ZIndex: =38

        SendtKS_text As button:
            Align: =Align.Left
            BorderThickness: =0
            Color: |-
                =/*
                If(
                    DateDiff(Today(), DateTimeValue(First(First(opgaver_Project_taskCategory).ARK).udsendt)) < 0, Color.Red, 
                    DateDiff(Today(), DateTimeValue(First(First(opgaver_Project_taskCategory).ARK).udsendt)) > 0 && DateDiff(Today(), DateTimeValue(ThisItem.modtaget)) < 3, Color.Orange,
                    RGBA(170, 170, 170, 1)
                )
                */
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisplayMode: =displayMode
            Fill: =RGBA(0, 0, 0, 0)
            FontWeight: =FontWeight.Lighter
            Height: =27
            OnSelect: =Select(SendtKS_datepicker)
            PaddingLeft: =2
            PaddingRight: =2
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =14
            Text: |+
                =Switch(
                    selectedCategory, 
                    "ARK", Text(DateValue(First(selPrj_currentPhase_task_A).extSendt), "dd-mm-yyyy"),
                    "KON", Text(DateValue(First(selPrj_currentPhase_task_K).extSendt), "dd-mm-yyyy"),
                    "BRA", Text(DateValue(First(selPrj_currentPhase_task_B).extSendt), "dd-mm-yyyy"),
                    "MYN", Text(DateValue(First(selPrj_currentPhase_task_M).extSendt), "dd-mm-yyyy"),
                    "BÆR", Text(DateValue(First(selPrj_currentPhase_task_N).extSendt), "dd-mm-yyyy"),
                    "VVS", Text(DateValue(First(selPrj_currentPhase_task_V).extSendt), "dd-mm-yyyy"),
                    "UDF", Text(DateValue(First(selPrj_currentPhase_task_U).extSendt), "dd-mm-yyyy")
                )
                
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =110
            X: =792
            Y: =151
            ZIndex: =39

        SendtKS_datepicker As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: |-
                =If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =0
            Height: =SendtKS_text.Height
            IconBackground: =RGBA(237, 237, 237, 0)
            IconFill: |+
                =Switch(
                    selectedCategory, 
                    "ARK", If(First(selPrj_currentPhase_task_A).extSendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "KON", If(First(selPrj_currentPhase_task_K).extSendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "BRA", If(First(selPrj_currentPhase_task_B).extSendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "MYN", If(First(selPrj_currentPhase_task_M).extSendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "BÆR", If(First(selPrj_currentPhase_task_N).extSendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "VVS", If(First(selPrj_currentPhase_task_V).extSendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "UDF", If(First(selPrj_currentPhase_task_U).extSendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0))
                )
                
            OnChange: |-
                =Set(selectedExtKSDate, SendtKS_datepicker.SelectedDate);
                
                Switch(selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, true, {extSendt: SendtKS_datepicker.SelectedDate}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, true, {extSendt: SendtKS_datepicker.SelectedDate}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, true, {extSendt: SendtKS_datepicker.SelectedDate}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, true, {extSendt: SendtKS_datepicker.SelectedDate}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, true, {extSendt: SendtKS_datepicker.SelectedDate}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, true, {extSendt: SendtKS_datepicker.SelectedDate}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, true, {extSendt: SendtKS_datepicker.SelectedDate})
                );
                
                //ClearCollect(selPrj_logCollection, ThisItem.log);
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                        text: "External Kontrol Sendt sat til " & Text(selectedExtKSDate, "dd-mm-yyyy")
                    }
                );
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                );
                
                Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                    {
                        task: 
                            [{
                            ARK: Filter(opgaver_selPrj_allTasks, docCategory = "ark"),
                            KON: Filter(opgaver_selPrj_allTasks, docCategory = "kon"),
                            BRA: Filter(opgaver_selPrj_allTasks, docCategory = "bra"),
                            MYN: Filter(opgaver_selPrj_allTasks, docCategory = "myn"),
                            BÆR: Filter(opgaver_selPrj_allTasks, docCategory = "bær"),
                            VVS: Filter(opgaver_selPrj_allTasks, docCategory = "vvs"),
                            UDF: Filter(opgaver_selPrj_allTasks, docCategory = "udf")
                            }]
                    }
                );
            OnSelect: |-
                =
                //Set(selectedDocType, ThisItem.docCategory);
                //Set(selectedDate, Text(ThisItem.modtaget));
            PaddingLeft: =3
            PaddingRight: =0
            Size: =8
            StartYear: =2010
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =SendtKS_text.Width
            X: =SendtKS_text.X
            Y: =151
            ZIndex: =40

        ModtagetKS_text As button:
            Align: =Align.Left
            BorderThickness: =0
            Color: |-
                =/*
                If(
                    DateDiff(Today(), DateTimeValue(First(First(opgaver_Project_taskCategory).ARK).udsendt)) < 0, Color.Red, 
                    DateDiff(Today(), DateTimeValue(First(First(opgaver_Project_taskCategory).ARK).udsendt)) > 0 && DateDiff(Today(), DateTimeValue(ThisItem.modtaget)) < 3, Color.Orange,
                    RGBA(170, 170, 170, 1)
                )
                */
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisplayMode: =displayMode
            Fill: =RGBA(0, 0, 0, 0)
            FontWeight: =FontWeight.Lighter
            Height: =27
            OnSelect: =Select(ModtagetKS_datepicker)
            PaddingLeft: =2
            PaddingRight: =2
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =14
            Text: |+
                =Switch(
                    selectedCategory, 
                    "ARK", Text(DateValue(First(selPrj_currentPhase_task_A).modtaget), "dd-mm-yyyy"),
                    "KON", Text(DateValue(First(selPrj_currentPhase_task_K).modtaget), "dd-mm-yyyy"),
                    "BRA", Text(DateValue(First(selPrj_currentPhase_task_B).modtaget), "dd-mm-yyyy"),
                    "MYN", Text(DateValue(First(selPrj_currentPhase_task_M).modtaget), "dd-mm-yyyy"),
                    "BÆR", Text(DateValue(First(selPrj_currentPhase_task_N).modtaget), "dd-mm-yyyy"),
                    "VVS", Text(DateValue(First(selPrj_currentPhase_task_V).modtaget), "dd-mm-yyyy"),
                    "UDF", Text(DateValue(First(selPrj_currentPhase_task_U).modtaget), "dd-mm-yyyy")
                )
                
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =110
            X: =959
            Y: =151
            ZIndex: =41

        ModtagetKS_datepicker As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: |-
                =If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =0
            Height: =ModtagetKS_text.Height
            IconBackground: =RGBA(237, 237, 237, 0)
            IconFill: |+
                =Switch(
                    selectedCategory, 
                    "ARK", If(First(selPrj_currentPhase_task_A).modtaget = Blank() || First(selPrj_currentPhase_task_A).modtaget = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "KON", If(First(selPrj_currentPhase_task_K).modtaget = Blank() || First(selPrj_currentPhase_task_K).modtaget = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "BRA", If(First(selPrj_currentPhase_task_B).modtaget = Blank() || First(selPrj_currentPhase_task_B).modtaget = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "MYN", If(First(selPrj_currentPhase_task_M).modtaget = Blank() || First(selPrj_currentPhase_task_M).modtaget = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "BÆR", If(First(selPrj_currentPhase_task_N).modtaget = Blank() || First(selPrj_currentPhase_task_N).modtaget = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "VVS", If(First(selPrj_currentPhase_task_V).modtaget = Blank() || First(selPrj_currentPhase_task_V).modtaget = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "UDF", If(First(selPrj_currentPhase_task_U).modtaget = Blank() || First(selPrj_currentPhase_task_U).modtaget = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0))
                )
                
            OnChange: |-
                =Set(selectedModKSDate, ModtagetKS_datepicker.SelectedDate);
                
                Switch(selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, true, {modtaget: ModtagetKS_datepicker.SelectedDate}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, true, {modtaget: ModtagetKS_datepicker.SelectedDate}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, true, {modtaget: ModtagetKS_datepicker.SelectedDate}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, true, {modtaget: ModtagetKS_datepicker.SelectedDate}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, true, {modtaget: ModtagetKS_datepicker.SelectedDate}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, true, {modtaget: ModtagetKS_datepicker.SelectedDate}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, true, {modtaget: ModtagetKS_datepicker.SelectedDate})
                );
                
                //ClearCollect(selPrj_logCollection, ThisItem.log);
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                        text: "External Kontrol modtaget sat til " & Text(selectedModKSDate, "dd-mm-yyyy")
                    }
                );
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                );
                
                Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                    {
                        task: 
                            [{
                            ARK: Filter(opgaver_selPrj_allTasks, docCategory = "ark"),
                            KON: Filter(opgaver_selPrj_allTasks, docCategory = "kon"),
                            BRA: Filter(opgaver_selPrj_allTasks, docCategory = "bra"),
                            MYN: Filter(opgaver_selPrj_allTasks, docCategory = "myn"),
                            BÆR: Filter(opgaver_selPrj_allTasks, docCategory = "bær"),
                            VVS: Filter(opgaver_selPrj_allTasks, docCategory = "vvs"),
                            UDF: Filter(opgaver_selPrj_allTasks, docCategory = "udf")
                            }]
                    }
                );
            OnSelect: |-
                =
                //Set(selectedDocType, ThisItem.docCategory);
                //Set(selectedDate, Text(ThisItem.modtaget));
            PaddingLeft: =3
            PaddingRight: =0
            Size: =8
            StartYear: =2010
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =ModtagetKS_text.Width
            X: =959
            Y: =151
            ZIndex: =42

        SendtKunde_text As button:
            Align: =Align.Left
            BorderThickness: =0
            Color: |-
                =/*
                If(
                    DateDiff(Today(), DateTimeValue(First(First(opgaver_Project_taskCategory).ARK).udsendt)) < 0, Color.Red, 
                    DateDiff(Today(), DateTimeValue(First(First(opgaver_Project_taskCategory).ARK).udsendt)) > 0 && DateDiff(Today(), DateTimeValue(ThisItem.modtaget)) < 3, Color.Orange,
                    RGBA(170, 170, 170, 1)
                )
                */
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisplayMode: =displayMode
            Fill: =RGBA(0, 0, 0, 0)
            FontWeight: =FontWeight.Lighter
            Height: =27
            OnSelect: =Select(SendtKunde_datepicker)
            PaddingLeft: =2
            PaddingRight: =2
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =14
            Text: |+
                =Switch(
                    selectedCategory, 
                    "ARK", Text(DateValue(First(selPrj_currentPhase_task_A).udsendt), "dd-mm-yyyy"),
                    "KON", Text(DateValue(First(selPrj_currentPhase_task_K).udsendt), "dd-mm-yyyy"),
                    "BRA", Text(DateValue(First(selPrj_currentPhase_task_B).udsendt), "dd-mm-yyyy"),
                    "MYN", Text(DateValue(First(selPrj_currentPhase_task_M).udsendt), "dd-mm-yyyy"),
                    "BÆR", Text(DateValue(First(selPrj_currentPhase_task_N).udsendt), "dd-mm-yyyy"),
                    "VVS", Text(DateValue(First(selPrj_currentPhase_task_V).udsendt), "dd-mm-yyyy"),
                    "UDF", Text(DateValue(First(selPrj_currentPhase_task_U).udsendt), "dd-mm-yyyy")
                )
                
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =110
            X: =1145
            Y: =151
            ZIndex: =43

        SendtKunde_datepicker As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: |-
                =If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =0
            Height: =SendtKunde_text.Height
            IconBackground: =RGBA(237, 237, 237, 0)
            IconFill: |+
                =Switch(
                    selectedCategory, 
                    "ARK", If(First(selPrj_currentPhase_task_A).udsendt = Text(Blank()) || First(selPrj_currentPhase_task_A).udsendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "KON", If(First(selPrj_currentPhase_task_K).udsendt = Text(Blank()) || First(selPrj_currentPhase_task_K).udsendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "BRA", If(First(selPrj_currentPhase_task_B).udsendt = Text(Blank()) || First(selPrj_currentPhase_task_B).udsendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "MYN", If(First(selPrj_currentPhase_task_M).udsendt = Text(Blank()) || First(selPrj_currentPhase_task_M).udsendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "BÆR", If(First(selPrj_currentPhase_task_N).udsendt = Text(Blank()) || First(selPrj_currentPhase_task_N).udsendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "VVS", If(First(selPrj_currentPhase_task_V).udsendt = Text(Blank()) || First(selPrj_currentPhase_task_V).udsendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0)),
                    "UDF", If(First(selPrj_currentPhase_task_U).udsendt = Text(Blank()) || First(selPrj_currentPhase_task_U).udsendt = Blank(), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0))
                )
                
            OnChange: |-
                =Set(selectedSentKundDate, SendtKunde_datepicker.SelectedDate);
                
                Switch(selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, true, {udsendt: SendtKunde_datepicker.SelectedDate}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, true, {udsendt: SendtKunde_datepicker.SelectedDate}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, true, {udsendt: SendtKunde_datepicker.SelectedDate}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, true, {udsendt: SendtKunde_datepicker.SelectedDate}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, true, {udsendt: SendtKunde_datepicker.SelectedDate}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, true, {udsendt: SendtKunde_datepicker.SelectedDate}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, true, {udsendt: SendtKunde_datepicker.SelectedDate})
                );
                
                //ClearCollect(selPrj_logCollection, ThisItem.log);
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                        text: "Tasks were sent to Kunde at " & Text(selectedSentKundDate, "dd-mm-yyyy")
                    }
                );
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                );
                
                Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                    {
                        task: 
                            [{
                            ARK: Filter(opgaver_selPrj_allTasks, docCategory = "ark"),
                            KON: Filter(opgaver_selPrj_allTasks, docCategory = "kon"),
                            BRA: Filter(opgaver_selPrj_allTasks, docCategory = "bra"),
                            MYN: Filter(opgaver_selPrj_allTasks, docCategory = "myn"),
                            BÆR: Filter(opgaver_selPrj_allTasks, docCategory = "bær"),
                            VVS: Filter(opgaver_selPrj_allTasks, docCategory = "vvs"),
                            UDF: Filter(opgaver_selPrj_allTasks, docCategory = "udf")
                            }]
                    }
                );
            OnSelect: |-
                =
                //Set(selectedDocType, ThisItem.docCategory);
                //Set(selectedDate, Text(ThisItem.modtaget));
            PaddingLeft: =3
            PaddingRight: =0
            Size: =8
            StartYear: =2010
            Visible: |-
                =If(visPlan = true, false, visManagerEdit, 
                    If(
                        selectedCategory = "KON" && selectedKKChange <> "KK1", true,
                        selectedCategory = "BRA" && selectedBKChange <> "BK1", true, 
                        false
                    )
                )
            Width: =SendtKunde_text.Width
            X: =1145
            Y: =151
            ZIndex: =44

    Icon15_3 As icon.Add:
        Color: =RGBA(0, 0, 0, 1)
        DisabledColor: =RGBA(77, 77, 77, 1)
        DisplayMode: =DisplayMode.Disabled
        Height: =30
        Icon: =Icon.Signal
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =30
        X: =796
        Y: =212
        ZIndex: =125

    Icon15_4 As icon.Add:
        Color: =RGBA(0, 0, 0, 1)
        DisabledColor: =RGBA(77, 77, 77, 1)
        DisplayMode: =DisplayMode.Disabled
        Height: =30
        Icon: =Icon.Health
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =30
        X: =889
        Y: =212
        ZIndex: =126

    prjDescript_head As text:
        BorderColor: =RGBA(219, 219, 219, 1)
        BorderThickness: =0.1
        Default: =First(First(opgaver_selPrj_static).prjDescription).head
        DisabledColor: =RGBA(219, 219, 219, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        Fill: =RGBA(0, 0, 0, 0)
        FocusedBorderThickness: =1
        FontWeight: =FontWeight.Bold
        Height: =137
        HoverBorderColor: =RGBA(0, 0, 0, 0.1)
        HoverFill: =RGBA(150, 150, 150, 0.2)
        LineHeight: =1.5
        Mode: =TextMode.MultiLine
        OnChange: |-
            =Patch(opgaver_selPrj_static, First(opgaver_selPrj_static), {prjDescription: Table({head: prjDescript_head.Text, body: prjDescript_body.Text})});
            Set(json_prjDescription, JSON(First(opgaver_selPrj_static).prjDescription));
            Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {prjDescription: json_prjDescription});
        OnSelect: =
        PaddingLeft: =5
        Reset: =true
        Size: =8
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =159
        X: =480
        Y: =375
        ZIndex: =127

    prjDescript_body As text:
        BorderColor: =RGBA(219, 219, 219, 1)
        BorderThickness: =0.1
        Default: =First(First(opgaver_selPrj_static).prjDescription).body
        DisabledColor: =RGBA(219, 219, 219, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        Fill: =RGBA(0, 0, 0, 0)
        FocusedBorderThickness: =1
        FontWeight: =FontWeight.Lighter
        Height: =137
        HoverBorderColor: =RGBA(0, 0, 0, 0.1)
        HoverFill: =RGBA(150, 150, 150, 0.2)
        LineHeight: =1.5
        Mode: =TextMode.MultiLine
        OnChange: |-
            =Patch(opgaver_selPrj_static, First(opgaver_selPrj_static), {prjDescription: Table({head: prjDescript_head.Text, body: prjDescript_body.Text})});
            Set(json_prjDescription, JSON(First(opgaver_selPrj_static).prjDescription));
            Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {prjDescription: json_prjDescription});
        OnSelect: =
        PaddingLeft: =5
        Reset: =true
        Size: =8
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =645
        X: =649
        Y: =375
        ZIndex: =128

    prjGenInfo As button:
        BorderThickness: =0
        DisabledColor: =RGBA(255, 255, 255, 1)
        DisabledFill: =RGBA(0, 0, 0, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        Fill: =If(selectedCategory <> Blank(), RGBA(181, 179, 175, 1))
        FocusedBorderThickness: =0
        FontWeight: =FontWeight.Normal
        HoverFill: =RGBA(0, 0, 0, 1)
        OnSelect: |
            =Set(visTaskCategorySelect, !visTaskCategorySelect);
            //Set(selectedCategory, Blank())
            
            Set(visDDmenu_phaseChange, false);
            Set(visDDmenu_phaseList, false);
            Set(visDDmenu_PL, false);
            Set(visDDmenu_bygCategory, false);
            Set(visDDmenu_konklasse, false); 
            Set(visDDmenu_brandklasse, false);
            Set(visDDmenu_enterprise, false);
            Set(visDDmenu_radgivning, false); 
            
            Set(visPressedAddingTask, false);
        RadiusBottomLeft: =6
        RadiusBottomRight: =6
        RadiusTopLeft: =6
        RadiusTopRight: =6
        Size: =9
        Text: |-
            ="FAGOMRAÅDER i
            DENNE FASE"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =120
        X: =266
        Y: =137
        ZIndex: =131

    rightMenuBar As rectangle:
        DisplayMode: =displayMode
        Fill: =RGBA(226, 225, 221, 1)
        Height: =670
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =280
        X: |-
            =If(visControlMenu = true, App.Width - rightMenuBar.Width, App.Width)
            // * Timer1.Value/Timer1.Duration
        Y: =98
        ZIndex: =132

    Icon7_5 As icon.Cancel:
        Fill: =RGBA(255, 255, 255, 1)
        Height: =20
        Icon: =Icon.Cancel
        OnSelect: |-
            =Switch(selectedCategory,
                "ARK",
                UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                "KON",
                UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                "BRA",
                UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                "MYN",
                UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                "BÆR",
                UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                "VVS",
                UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                "UDF",
                UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
            );
            
            ClearCollect(opgaver_selPrj_allTasks, 
                selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
            );
            
            Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                {
                    task: 
                        [{
                        ARK: Filter(opgaver_selPrj_allTasks, docCategory = "ark"),
                        KON: Filter(opgaver_selPrj_allTasks, docCategory = "kon"),
                        BRA: Filter(opgaver_selPrj_allTasks, docCategory = "bra"),
                        MYN: Filter(opgaver_selPrj_allTasks, docCategory = "myn"),
                        BÆR: Filter(opgaver_selPrj_allTasks, docCategory = "bær"),
                        VVS: Filter(opgaver_selPrj_allTasks, docCategory = "vvs"),
                        UDF: Filter(opgaver_selPrj_allTasks, docCategory = "udf")
                        }]
                }
            );
            
            Set(visControlMenu, false);
            
            Set(visRSCard, false);
            Set(visKSCard, false);
            Set(visStatusListBox, false);
            
            Set(statusCode, Blank());
            Set(displayMode, DisplayMode.Edit);
            Set(visRSsaveBtn, false);
            
            Set(activateTimer_AutoGetOutPage, true);
            Set(activateTimer_RefreshPrjList, true);
        PaddingBottom: =5
        PaddingLeft: =5
        PaddingRight: =5
        PaddingTop: =5
        Visible: =visRSCard
        Width: =20
        X: =1328
        Y: =114
        ZIndex: =134

    opgaveStatus_8 As label:
        BorderColor: =RGBA(0, 0, 0, 1)
        Color: =
        FontWeight: =FontWeight.Bold
        Height: =39
        Italic: =
        PaddingLeft: =1
        PaddingRight: =0
        Size: =9
        Text: =selectedTask
        VerticalAlign: =VerticalAlign.Top
        Visible: =visRSCard
        Width: =250
        X: =1100
        Y: =139
        ZIndex: =135

    Button19_16 As button:
        BorderColor: =RGBA(0,0,0,1)
        BorderThickness: =0.1
        Color: =RGBA(0, 0, 0, 1)
        DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 || visWeekPlan = true, DisplayMode.Disabled, DisplayMode.Edit) 
        Fill: =RGBA(0, 0, 0, 0)
        FocusedBorderThickness: =0
        FontWeight: =FontWeight.Normal
        Height: =18
        HoverFill: =RGBA(0, 0, 0, 1)
        OnSelect: |-
            =Set(visRSCard, false);
            Set(statusCode, Blank());
            Set(displayMode, DisplayMode.Edit);
        RadiusBottomLeft: =3
        RadiusBottomRight: =3
        RadiusTopLeft: =3
        RadiusTopRight: =3
        Size: =9
        Text: ="SAVE"
        Visible: =false
        Width: =40
        X: =1195
        Y: =486
        ZIndex: =138

    entreTextInput As text:
        Align: =Align.Center
        BorderThickness: =0
        Default: |-
            =//Upper(First(selectedPrj).entrepreneur)
            Upper(LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName).entrepreneur)
        DisabledColor: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(237, 237, 237, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        FocusedBorderThickness: =0
        Font: =Font.'Open Sans Condensed'
        Height: =16
        HoverFill: =RGBA(202, 202, 202, 1)
        OnChange: |
            =Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {entrepreneur:entreTextInput.Text});
        PaddingLeft: =5
        Size: =8.2
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =78
        X: =496
        Y: =273
        ZIndex: =158

    archFirmTextInput As text:
        Align: =Align.Center
        BorderThickness: =0
        Default: |-
            =//Upper(First(selectedPrj).entrepreneur)
            Upper(LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName).architect)
        DisabledColor: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(237, 237, 237, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        FocusedBorderThickness: =0
        Font: =Font.'Open Sans Condensed'
        Height: =16
        HoverFill: =RGBA(202, 202, 202, 1)
        OnChange: |
            =Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {architect:archFirmTextInput.Text});
        PaddingLeft: =5
        Size: =8.2
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =78
        X: =588
        Y: =273
        ZIndex: =159

    engnFirmTextInput As text:
        Align: =Align.Center
        BorderThickness: =0
        Default: |-
            =//Upper(First(selectedPrj).entrepreneur)
            Upper(LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName).engineer)
        DisabledColor: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(237, 237, 237, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        FocusedBorderThickness: =0
        Font: =Font.'Open Sans Condensed'
        Height: =16
        HoverFill: =RGBA(202, 202, 202, 1)
        OnChange: |
            =Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {engineer:engnFirmTextInput.Text});
        PaddingLeft: =5
        Size: =8.2
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =78
        X: =680
        Y: =273
        ZIndex: =160

    fireFirmTextInput As text:
        Align: =Align.Center
        BorderThickness: =0
        Default: |-
            =//Upper(First(selectedPrj).entrepreneur)
            Upper(LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName).brand)
        DisabledColor: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(237, 237, 237, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        FocusedBorderThickness: =0
        Font: =Font.'Open Sans Condensed'
        Height: =16
        HoverFill: =RGBA(202, 202, 202, 1)
        OnChange: |
            =Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {brand:fireFirmTextInput.Text});
        PaddingLeft: =5
        Size: =8.2
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =78
        X: =772
        Y: =273
        ZIndex: =161

    sustFirmTextInput As text:
        Align: =Align.Center
        BorderThickness: =0
        Default: |-
            =//Upper(First(selectedPrj).entrepreneur)
            Upper(LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName).sustainability)
        DisabledColor: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(237, 237, 237, 1)
        DisplayMode: |-
            =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            )
        FocusedBorderThickness: =0
        Font: =Font.'Open Sans Condensed'
        Height: =16
        HoverFill: =RGBA(202, 202, 202, 1)
        OnChange: |+
            =Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {baeredygtighed: sustFirmTextInput.Text});
            
        PaddingLeft: =5
        Size: =8.2
        Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
        Width: =78
        X: =865
        Y: =273
        ZIndex: =162

    backwardButton As icon.ChevronLeft:
        Color: =RGBA(255, 0, 0, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(38, 35, 19, 1)
        Height: =68
        HoverFill: =RGBA(153, 172, 169, 1)
        Icon: =Icon.ChevronLeft
        OnSelect: |+
            =If(
                //Necessary to divide the functions below by the users' status such as editor and viewer
                
                //1. when you are the editor
                Left(User().Email, 3) = First(selPrjCurrentUserList).Name, 
                
                //Get rid of a current editor from the current user list
                RemoveIf(selPrjCurrentUserList, ThisRecord.Name = Left(User().Email, 3));
                //if the editor changes the projectPhase, it should be reflected(updated)
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName),
                    {
                        currentEditor: First(selPrjCurrentUserList).Name,
                        currentUsers: JSON(selPrjCurrentUserList)
                    }
                );
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
            
                //The code lines below applies only to the editor. This is because viewer shouldn't change any data when they leave 
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: selectedPLinChange,
                        prjName: selectedPrjName,
                        prjNr: selectedSagsNr,
                        bClass: selectedBKChange,
                        kClass: selectedKKChange,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
            
                //If the latest phase is always equal to the phase of the 'projectPhase' column of 'Project list', the data of the latest one should be stored in 'currentPhase' column
                If(
                    selectedPrjPhase = LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).projectPhase.Value, 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {currentPhase: makeJsonCurrentPhase})
                );
                If(
                    selectedPrjPhase = "FOR", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {FOR: makeJsonCurrentPhase}),
                    selectedPrjPhase = "SKI", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {SKI: makeJsonCurrentPhase}),
                    selectedPrjPhase = "MYN", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {MYN: makeJsonCurrentPhase}),
                    selectedPrjPhase = "HOV", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {HOV: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDB", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDB: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDF", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDF: makeJsonCurrentPhase}),
                    selectedPrjPhase = "AFL", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {AFL: makeJsonCurrentPhase})
                );
                 
                //2. when you are a viewer
                //when you are a viewer, the projectPhase shouldn't be changed, but to indicate you are not in the que any longer, we update 'currentEditor and currentUsers data'
                Left(User().Email, 3) <> First(selPrjCurrentUserList).Name,
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName),
                    {
                        currentEditor: First(selPrjCurrentUserList).Name,
                        currentUsers: JSON(selPrjCurrentUserList)
                    }
                )
            );
            
            
            
            //The code below is for quick refresh with the updated information
            ClearCollect(opgaver, 
                ForAll('Project List' As firstRecord,
                    {   
                        currentEditor: firstRecord.currentEditor,
                        currentUsers: ForAll(Table(ParseJSON(firstRecord.currentUsers)) As userListRecord, {Name: Text(userListRecord.Value.Name), LogInTime: Text(userListRecord.Value.LogInTime)}),
                        ID: firstRecord.ID,
                        PL: firstRecord.PL,
                        savsnr: firstRecord.'Sagsnr. ATICONs ',
                        prjnavn: firstRecord.Projektnavn,
                        prjType: firstRecord.projectType.Value,
                        prjPhase: firstRecord.projectPhase.Value,
                        assignedPhase: ForAll(Table(ParseJSON(firstRecord.assignedPhase)) As phaseRecord, {phase: Text(phaseRecord.Value.phase)}),
                        prjStatus: firstRecord.projectStatus.Value,
                        bygCategory: firstRecord.bygCategories.Value,
                        prjEntreprise: firstRecord.Entreprise.Value,
                        prjRadgivning: firstRecord.Rådgivning.Value,
                        conClass: firstRecord.Konstruktionsklasse.Value,
                        brandClass: firstRecord.Brandklasse.Value,
                        client: firstRecord.Opdragsgiver,
                        builder: firstRecord.Bygherre,
                        entrepreneur: firstRecord.entrepreneur,
                        architect: firstRecord.architect,
                        engineer: firstRecord.engineer,
                        brand: firstRecord.brand,
                        sustainability: firstRecord.baeredygtighed,
                        tilbudAccepted: firstRecord.tilbudAccepted,
                        prjDescription: ForAll(Table(ParseJSON(firstRecord.prjDescription)) As descriptionRecord,
                                    {
                                        head: Text(descriptionRecord.Value.head),
                                        body: Text(descriptionRecord.Value.body)
                                    } 
                        ), 
                        currentPhaseTask:
                        ForAll(Table(ParseJSON(firstRecord.currentPhase)) As secondRecord,
                            {
                                tilbudAccepteret: Text(secondRecord.Value.tilbudAccepteret),
                                deadline: Text(secondRecord.Value.deadline),                     
                                assignedTasks: ForAll(Table(secondRecord.Value.assignedTasks) As assignedRecord,
                                    {
                                        value: Text(assignedRecord.Value.value)   
                                    }
                                ),             
                                taskCategory: ForAll(Table(secondRecord.Value.task) As thirdRecord,
                                    { 
                                        ARK: ForAll(Table(thirdRecord.Value.ARK) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        KON: ForAll(Table(thirdRecord.Value.KON) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        BRA: ForAll(Table(thirdRecord.Value.BRA) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        MYN: ForAll(Table(thirdRecord.Value.MYN) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        BÆR: ForAll(Table(thirdRecord.Value.BÆR) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        VVS: ForAll(Table(thirdRecord.Value.VVS) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        UDF: ForAll(Table(thirdRecord.Value.UDF) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        )
                                    }
                                )
                            }
                        )
                    }
                )
            );
            
            //-----------------In case, there is an error making 'No name projects'
            RemoveIf(opgaver, prjnavn = Blank());
            //-----------------For numbering the Projects. Could be useful to prioritize the projects.
            ClearCollect(opgaver,
                ForAll(Sequence(CountRows(opgaver)) As ThisSequence, 
                    Patch(Last(FirstN(opgaver, ThisSequence.Value)), {rowNumberPlanning: ThisSequence.Value})
                )
            );
            ClearCollect(opgaverWhole, Ungroup(opgaver, currentPhaseTask));
            
            
            Clear(phaseToSeeByPrj);
            Set(selectedPrjName, Blank());
            Set(selectedPLinChange, Blank());
            Set(edited_selectedTask, Blank());
            
            Reset(timerAutoPopUpWindow);
            Reset(countdownTimer);
            
            
            Set(timerStart, true);
            Set(activateTimer_AutoGetOutPage, false);
            Set(activateTimer_RefreshPrjList, false);
            Reset(timerRefreshProjectList);
            Set(refreshUserList, true);
            
            Set(visOverview, true);
            Set(visOpgaveEdit, false);
            Set(visDashboard1, false);
            Set(visManagerEdit, false);
            Set(visRegist, false);
            Set(visSaveButton, false);
            Set(visPrjByPL, false);
            Set(visDDmenu_phaseChange, false);
            Set(visDueSoonOpgaver, false);
            Set(visOverdueOpgaver, false);
            Set(bvis, false);
            
            Set(visDDmenu_PL, false);
            Set(visDDmenu_phaseChange, false);
            Set(visDDmenu_phaseList, false);
            Set(visDDmenu_bygCategory, false);
            Set(visDDmenu_konklasse, false);
            Set(visDDmenu_brandklasse, false);
            Set(visDDmenu_enterprise, false);
            Set(visDDmenu_radgivning, false);
            
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =20
        X: =5
        Y: =22
        ZIndex: =163

    Label3 As label:
        Align: =Align.Right
        Font: =Font.'Open Sans Condensed'
        FontWeight: =FontWeight.Bold
        Height: =25
        Text: |-
            =Switch(
                First(selPrjCurrentUserList).Name,
                Left(User().Email, 3), "I am The Editor", "I am a Viewer"
            )
        Visible: =If(visPlan = true, false, visManagerEdit)
        X: =1216
        Y: =743
        ZIndex: =164

    phaseSelectGallery_1 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        Height: =185
        Items: =Choices('Project List'.projectPhase)
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =2
        TemplateSize: =24
        Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_phaseChange)
        Width: =40
        X: =515
        Y: =78
        ZIndex: =165

        Button18_5 As button:
            BorderThickness: =0
            Color: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
            Fill: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(194, 101, 72, 1), RGBA(220, 220, 220, 1))
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =//Update(selectedPrj, First(selectedPrj), {prjPhase: selectedPrjPhase});
                
                //To save the data of the previously edited before moving to a new phase.
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: selectedPLinChange,
                        prjName: selectedPrjName,
                        prjNr: selectedSagsNr,
                        bClass: selectedBKChange,
                        kClass: selectedKKChange,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {currentPhase: makeJsonCurrentPhase});
                If(
                    selectedPrjPhase = "FOR", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {FOR: makeJsonCurrentPhase}),
                    selectedPrjPhase = "SKI", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {SKI: makeJsonCurrentPhase}),
                    selectedPrjPhase = "MYN", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {MYN: makeJsonCurrentPhase}),
                    selectedPrjPhase = "HOV", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {HOV: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDB", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDB: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDF", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDF: makeJsonCurrentPhase}),
                    selectedPrjPhase = "AFL", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {AFL: makeJsonCurrentPhase})
                );    
                
                
                //To fetch the data from the chosen phase on the dropdown menu
                Switch(
                    phaseSelectGallery_1.Selected.Value,
                    "FOR", Set(selectedPrjPhase, "FOR"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).FOR),
                    "SKI", Set(selectedPrjPhase, "SKI"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).SKI),
                    "MYN", Set(selectedPrjPhase, "MYN"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).MYN),
                    "HOV", Set(selectedPrjPhase, "HOV"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).HOV),
                    "UDB", Set(selectedPrjPhase, "UDB"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).UDB),
                    "UDF", Set(selectedPrjPhase, "UDF"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).UDF),
                    "AFL", Set(selectedPrjPhase, "AFL"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).AFL)
                );
                
                //To change the current phase into the latest one chosen by PL
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName),
                    {
                        projectPhase: {Value: selectedPrjPhase}
                    }
                );
                
                
                //The codes below is common both for the editor and viewers
                ClearCollect(phaseToSeeByPrj,
                    ForAll(Table(ParseJSON(phaseWannaSee)) As secondRecord,
                        {
                            deadline: Text(secondRecord.Value.deadline),                     
                            assignedTasks: ForAll(Table(secondRecord.Value.assignedTasks) As assignedRecord,
                                {
                                    value: Text(assignedRecord.Value.value)   
                                }
                            ),             
                            taskCategory: ForAll(Table(secondRecord.Value.task) As thirdRecord,
                                { 
                                    ARK: ForAll(Table(thirdRecord.Value.ARK) As forthRecord,
                                        {
                                            assignedHours: Value(forthRecord.Value.assignedHours),
                                            delegation: Value(forthRecord.Value.delegation),
                                            delegation2: Value(forthRecord.Value.delegation2),
                                            docCategory: Text(forthRecord.Value.docCategory),
                                            docs: Text(forthRecord.Value.docs),
                                            fontColor: Text(forthRecord.Value.fontColor),
                                            fontItalic: Boolean(forthRecord.Value.fontItalic),
                                            fontStrike: Boolean(forthRecord.Value.fontStrike),
                                            kommentator: Text(forthRecord.Value.kommentator),
                                            ks: Text(forthRecord.Value.ks),
                                            markColor: Text(forthRecord.Value.markColor),
                                            modtaget: Text(forthRecord.Value.modtaget),
                                            indvDeadline: Text(forthRecord.Value.indvDeadline),
                                            deadlineComment: Text(forthRecord.Value.deadlineComment),
                                            statusMessage: Text(forthRecord.Value.statusMessage),
                                            opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                            progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                            progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                            resources: Text(forthRecord.Value.resources),
                                            slutDato: Text(forthRecord.Value.slutDato),
                                            udsendt: Text(forthRecord.Value.udsendt),
                                            complMark: Boolean(forthRecord.Value.complMark),
                                            readyForKS: Boolean(forthRecord.Value.readyForKS),
                                            rejection: Boolean(forthRecord.Value.rejection),
                                            approval: Boolean(forthRecord.Value.approval),
                                            extSendt: Text(forthRecord.Value.extSendt),
                                            extReceive: Text(forthRecord.Value.extReceive),
                                            log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                        }
                                    ),
                                    KON: ForAll(Table(thirdRecord.Value.KON) As forthRecord,
                                        {
                                            assignedHours: Value(forthRecord.Value.assignedHours),
                                            delegation: Value(forthRecord.Value.delegation),
                                            delegation2: Value(forthRecord.Value.delegation2),
                                            docCategory: Text(forthRecord.Value.docCategory),
                                            docs: Text(forthRecord.Value.docs),
                                            fontColor: Text(forthRecord.Value.fontColor),
                                            fontItalic: Boolean(forthRecord.Value.fontItalic),
                                            fontStrike: Boolean(forthRecord.Value.fontStrike),
                                            kommentator: Text(forthRecord.Value.kommentator),
                                            ks: Text(forthRecord.Value.ks),
                                            markColor: Text(forthRecord.Value.markColor),
                                            modtaget: Text(forthRecord.Value.modtaget),
                                            indvDeadline: Text(forthRecord.Value.indvDeadline),
                                            deadlineComment: Text(forthRecord.Value.deadlineComment),
                                            statusMessage: Text(forthRecord.Value.statusMessage),
                                            opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                            progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                            progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                            resources: Text(forthRecord.Value.resources),
                                            slutDato: Text(forthRecord.Value.slutDato),
                                            udsendt: Text(forthRecord.Value.udsendt),
                                            complMark: Boolean(forthRecord.Value.complMark),
                                            readyForKS: Boolean(forthRecord.Value.readyForKS),
                                            rejection: Boolean(forthRecord.Value.rejection),
                                            approval: Boolean(forthRecord.Value.approval),
                                            extSendt: Text(forthRecord.Value.extSendt),
                                            extReceive: Text(forthRecord.Value.extReceive),
                                            log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                        }
                                    ),
                                    BRA: ForAll(Table(thirdRecord.Value.BRA) As forthRecord,
                                        {
                                            assignedHours: Value(forthRecord.Value.assignedHours),
                                            delegation: Value(forthRecord.Value.delegation),
                                            delegation2: Value(forthRecord.Value.delegation2),
                                            docCategory: Text(forthRecord.Value.docCategory),
                                            docs: Text(forthRecord.Value.docs),
                                            fontColor: Text(forthRecord.Value.fontColor),
                                            fontItalic: Boolean(forthRecord.Value.fontItalic),
                                            fontStrike: Boolean(forthRecord.Value.fontStrike),
                                            kommentator: Text(forthRecord.Value.kommentator),
                                            ks: Text(forthRecord.Value.ks),
                                            markColor: Text(forthRecord.Value.markColor),
                                            modtaget: Text(forthRecord.Value.modtaget),
                                            indvDeadline: Text(forthRecord.Value.indvDeadline),
                                            deadlineComment: Text(forthRecord.Value.deadlineComment),
                                            statusMessage: Text(forthRecord.Value.statusMessage),
                                            opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                            progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                            progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                            resources: Text(forthRecord.Value.resources),
                                            slutDato: Text(forthRecord.Value.slutDato),
                                            udsendt: Text(forthRecord.Value.udsendt),
                                            complMark: Boolean(forthRecord.Value.complMark),
                                            readyForKS: Boolean(forthRecord.Value.readyForKS),
                                            rejection: Boolean(forthRecord.Value.rejection),
                                            approval: Boolean(forthRecord.Value.approval),
                                            extSendt: Text(forthRecord.Value.extSendt),
                                            extReceive: Text(forthRecord.Value.extReceive),
                                            log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                        }
                                    ),
                                    MYN: ForAll(Table(thirdRecord.Value.MYN) As forthRecord,
                                        {
                                            assignedHours: Value(forthRecord.Value.assignedHours),
                                            delegation: Value(forthRecord.Value.delegation),
                                            delegation2: Value(forthRecord.Value.delegation2),
                                            docCategory: Text(forthRecord.Value.docCategory),
                                            docs: Text(forthRecord.Value.docs),
                                            fontColor: Text(forthRecord.Value.fontColor),
                                            fontItalic: Boolean(forthRecord.Value.fontItalic),
                                            fontStrike: Boolean(forthRecord.Value.fontStrike),
                                            kommentator: Text(forthRecord.Value.kommentator),
                                            ks: Text(forthRecord.Value.ks),
                                            markColor: Text(forthRecord.Value.markColor),
                                            modtaget: Text(forthRecord.Value.modtaget),
                                            indvDeadline: Text(forthRecord.Value.indvDeadline),
                                            deadlineComment: Text(forthRecord.Value.deadlineComment),
                                            statusMessage: Text(forthRecord.Value.statusMessage),
                                            opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                            progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                            progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                            resources: Text(forthRecord.Value.resources),
                                            slutDato: Text(forthRecord.Value.slutDato),
                                            udsendt: Text(forthRecord.Value.udsendt),
                                            complMark: Boolean(forthRecord.Value.complMark),
                                            readyForKS: Boolean(forthRecord.Value.readyForKS),
                                            rejection: Boolean(forthRecord.Value.rejection),
                                            approval: Boolean(forthRecord.Value.approval),
                                            extSendt: Text(forthRecord.Value.extSendt),
                                            extReceive: Text(forthRecord.Value.extReceive),
                                            log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                        }
                                    ),
                                    BÆR: ForAll(Table(thirdRecord.Value.BÆR) As forthRecord,
                                        {
                                            assignedHours: Value(forthRecord.Value.assignedHours),
                                            delegation: Value(forthRecord.Value.delegation),
                                            delegation2: Value(forthRecord.Value.delegation2),
                                            docCategory: Text(forthRecord.Value.docCategory),
                                            docs: Text(forthRecord.Value.docs),
                                            fontColor: Text(forthRecord.Value.fontColor),
                                            fontItalic: Boolean(forthRecord.Value.fontItalic),
                                            fontStrike: Boolean(forthRecord.Value.fontStrike),
                                            kommentator: Text(forthRecord.Value.kommentator),
                                            ks: Text(forthRecord.Value.ks),
                                            markColor: Text(forthRecord.Value.markColor),
                                            modtaget: Text(forthRecord.Value.modtaget),
                                            indvDeadline: Text(forthRecord.Value.indvDeadline),
                                            deadlineComment: Text(forthRecord.Value.deadlineComment),
                                            statusMessage: Text(forthRecord.Value.statusMessage),
                                            opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                            progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                            progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                            resources: Text(forthRecord.Value.resources),
                                            slutDato: Text(forthRecord.Value.slutDato),
                                            udsendt: Text(forthRecord.Value.udsendt),
                                            complMark: Boolean(forthRecord.Value.complMark),
                                            readyForKS: Boolean(forthRecord.Value.readyForKS),
                                            rejection: Boolean(forthRecord.Value.rejection),
                                            approval: Boolean(forthRecord.Value.approval),
                                            extSendt: Text(forthRecord.Value.extSendt),
                                            extReceive: Text(forthRecord.Value.extReceive),
                                            log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                        }
                                    ),
                                    VVS: ForAll(Table(thirdRecord.Value.VVS) As forthRecord,
                                        {
                                            assignedHours: Value(forthRecord.Value.assignedHours),
                                            delegation: Value(forthRecord.Value.delegation),
                                            delegation2: Value(forthRecord.Value.delegation2),
                                            docCategory: Text(forthRecord.Value.docCategory),
                                            docs: Text(forthRecord.Value.docs),
                                            fontColor: Text(forthRecord.Value.fontColor),
                                            fontItalic: Boolean(forthRecord.Value.fontItalic),
                                            fontStrike: Boolean(forthRecord.Value.fontStrike),
                                            kommentator: Text(forthRecord.Value.kommentator),
                                            ks: Text(forthRecord.Value.ks),
                                            markColor: Text(forthRecord.Value.markColor),
                                            modtaget: Text(forthRecord.Value.modtaget),
                                            indvDeadline: Text(forthRecord.Value.indvDeadline),
                                            deadlineComment: Text(forthRecord.Value.deadlineComment),
                                            statusMessage: Text(forthRecord.Value.statusMessage),
                                            opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                            progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                            progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                            resources: Text(forthRecord.Value.resources),
                                            slutDato: Text(forthRecord.Value.slutDato),
                                            udsendt: Text(forthRecord.Value.udsendt),
                                            complMark: Boolean(forthRecord.Value.complMark),
                                            readyForKS: Boolean(forthRecord.Value.readyForKS),
                                            rejection: Boolean(forthRecord.Value.rejection),
                                            approval: Boolean(forthRecord.Value.approval),
                                            extSendt: Text(forthRecord.Value.extSendt),
                                            extReceive: Text(forthRecord.Value.extReceive),
                                            log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                        }
                                    ),
                                    UDF: ForAll(Table(thirdRecord.Value.UDF) As forthRecord,
                                        {
                                            assignedHours: Value(forthRecord.Value.assignedHours),
                                            delegation: Value(forthRecord.Value.delegation),
                                            delegation2: Value(forthRecord.Value.delegation2),
                                            docCategory: Text(forthRecord.Value.docCategory),
                                            docs: Text(forthRecord.Value.docs),
                                            fontColor: Text(forthRecord.Value.fontColor),
                                            fontItalic: Boolean(forthRecord.Value.fontItalic),
                                            fontStrike: Boolean(forthRecord.Value.fontStrike),
                                            kommentator: Text(forthRecord.Value.kommentator),
                                            ks: Text(forthRecord.Value.ks),
                                            markColor: Text(forthRecord.Value.markColor),
                                            modtaget: Text(forthRecord.Value.modtaget),
                                            indvDeadline: Text(forthRecord.Value.indvDeadline),
                                            deadlineComment: Text(forthRecord.Value.deadlineComment),
                                            statusMessage: Text(forthRecord.Value.statusMessage),
                                            opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                            progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                            progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                            resources: Text(forthRecord.Value.resources),
                                            slutDato: Text(forthRecord.Value.slutDato),
                                            udsendt: Text(forthRecord.Value.udsendt),
                                            complMark: Boolean(forthRecord.Value.complMark),
                                            readyForKS: Boolean(forthRecord.Value.readyForKS),
                                            rejection: Boolean(forthRecord.Value.rejection),
                                            approval: Boolean(forthRecord.Value.approval),
                                            extSendt: Text(forthRecord.Value.extSendt),
                                            extReceive: Text(forthRecord.Value.extReceive),
                                            log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                        }
                                    )
                                }
                            )
                        }
                    )
                );
                
                ClearCollect(opgaver_selPrj_taskCategory, First(phaseToSeeByPrj).taskCategory);
                ClearCollect(opgaver_selPrj_allTasks, 
                    First(opgaver_selPrj_taskCategory).ARK, First(opgaver_selPrj_taskCategory).KON, First(opgaver_selPrj_taskCategory).BRA, 
                    First(opgaver_selPrj_taskCategory).MYN, First(opgaver_selPrj_taskCategory).BÆR, First(opgaver_selPrj_taskCategory).VVS, First(opgaver_selPrj_taskCategory).UDF
                );
                ClearCollect(phaseToSeeByPrj_assignedTaskScope, First(phaseToSeeByPrj).assignedTasks);
                
                ClearCollect(selPrj_currentPhase_task_A, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"));
                ClearCollect(selPrj_currentPhase_task_K, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"));
                ClearCollect(selPrj_currentPhase_task_B, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"));
                ClearCollect(selPrj_currentPhase_task_M, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"));
                ClearCollect(selPrj_currentPhase_task_N, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"));
                ClearCollect(selPrj_currentPhase_task_V, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"));
                ClearCollect(selPrj_currentPhase_task_U, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf"));
                
                //To save the currently fetched data (phaseToSeeByPrj) to 'currentPhase' column in 'Project List'
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: selectedPLinChange,
                        prjName: First(selectedPrj).prjnavn,
                        prjNr: First(selectedPrj).savsnr,
                        bClass: First(selectedPrj).brandClass,
                        kClass: First(selectedPrj).conClass,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {currentPhase: makeJsonCurrentPhase});
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(visDDmenu_phaseChange, !visDDmenu_phaseChange);
                Set(visDDmenu_phaseList, false);
                Set(selectedCategory, First(First(phaseToSeeByPrj).assignedTasks).value);
                Set(visTaskCategorySelect, false);
                
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =ThisItem.Value
            Width: =36
            ZIndex: =1

    phaseSelectGallery_2 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(0,0,0,0)
        Height: =40
        Items: |-
            =[{type: "SINGLE"}, {type: "PACKAGE"}]
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =0
        TemplateSize: |
            =20
        Visible: =visPressedAddingTask
        Width: =53
        X: =489
        Y: =192
        ZIndex: =166

        Button18_6 As button:
            BorderColor: =RGBA(153, 152, 144, 1)
            BorderThickness: =0
            Color: =RGBA(0,0,0,1)
            Fill: |
                =RGBA(255, 255, 255, 1)
            FocusedBorderThickness: =1
            Height: =20
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =Switch(
                    ThisItem.type = "SINGLE", Set(visAddingTask_single, true); Set(visAddingTask_package, false),
                    ThisItem.type = "PACKAGE", Set(visAddingTask_package, true); Set(visAddingTask_single, false)
                );
                
                Set(visPressedAddingTask, !visPressedAddingTask);
                
                //Pause the timers
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_RefreshPrjList, false);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =ThisItem.type
            Width: =53
            ZIndex: =1

    phaseSelectGallery_3 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        Height: =Self.TemplateHeight * 6.6
        Items: =Left(Upper(prjLeaderTable.Email), 3)
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =2
        TemplateSize: =24
        Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_PL)
        Width: =50
        X: =559
        Y: =78
        ZIndex: =167

        Button18_7 As button:
            BorderThickness: =0
            Color: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
            Fill: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(194, 101, 72, 1), RGBA(220, 220, 220, 1))
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =Set(selectedPLinChange, phaseSelectGallery_3.Selected.Value);
                
                //To save the data of the previously edited before moving to a new phase.
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: selectedPLinChange,
                        prjName: selectedPrjName,
                        prjNr: selectedSagsNr,
                        bClass: selectedBKChange,
                        kClass: selectedKKChange,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {PL:selectedPLinChange ,currentPhase: makeJsonCurrentPhase}); 
                If(
                    selectedPrjPhase = "FOR", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {FOR: makeJsonCurrentPhase}),
                    selectedPrjPhase = "SKI", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {SKI: makeJsonCurrentPhase}),
                    selectedPrjPhase = "MYN", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {MYN: makeJsonCurrentPhase}),
                    selectedPrjPhase = "HOV", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {HOV: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDB", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDB: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDF", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDF: makeJsonCurrentPhase}),
                    selectedPrjPhase = "AFL", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {AFL: makeJsonCurrentPhase})
                );  
                
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(visDDmenu_PL, false);  
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
                
                Set(visTaskCategorySelect, false);
                
                Set(selectedCategory, First(First(phaseToSeeByPrj).assignedTasks).value);
                Set(visTaskCategorySelect, false);
                
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =ThisItem.Value
            Width: =46
            ZIndex: =1

    phaseSelectGallery_4 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        Height: =Self.TemplateHeight * 6.6
        Items: =Choices('Project List'.bygCategories)
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =2
        TemplateSize: =24
        Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_bygCategory)
        Width: =150
        X: =613
        Y: =78
        ZIndex: =168

        Button18_8 As button:
            BorderThickness: =0
            Color: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
            Fill: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(194, 101, 72, 1), RGBA(220, 220, 220, 1))
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =Set(selectedCategoryChange, phaseSelectGallery_4.Selected.Value);
                
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {bygCategories: {Value: selectedCategoryChange}}); 
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(visDDmenu_PL, false);  
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
                
                Set(visTaskCategorySelect, false);
                
                Set(selectedCategory, First(First(phaseToSeeByPrj).assignedTasks).value);
                Set(visTaskCategorySelect, false);
                
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =Upper(ThisItem.Value)
            Width: =146
            ZIndex: =1

    phaseSelectGallery_5 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        Height: |
            =Self.TemplateHeight * 4.5
        Items: =Choices('Project List'.Konstruktionsklasse)
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =2
        TemplateSize: =24
        Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_konklasse)
        Width: =60
        X: =767
        Y: =78
        ZIndex: =169

        Button18_9 As button:
            BorderThickness: =0
            Color: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
            Fill: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(194, 101, 72, 1), RGBA(220, 220, 220, 1))
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =Set(selectedKKChange, phaseSelectGallery_5.Selected.Value);
                
                //To save the data of the previously edited before moving to a new phase.
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: selectedPLinChange,
                        prjName: selectedPrjName,
                        prjNr: selectedSagsNr,
                        bClass: selectedBKChange,
                        kClass: selectedKKChange,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {Konstruktionsklasse: {Value: selectedKKChange}, currentPhase: makeJsonCurrentPhase});
                If(
                    selectedPrjPhase = "FOR", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {FOR: makeJsonCurrentPhase}),
                    selectedPrjPhase = "SKI", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {SKI: makeJsonCurrentPhase}),
                    selectedPrjPhase = "MYN", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {MYN: makeJsonCurrentPhase}),
                    selectedPrjPhase = "HOV", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {HOV: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDB", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDB: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDF", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDF: makeJsonCurrentPhase}),
                    selectedPrjPhase = "AFL", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {AFL: makeJsonCurrentPhase})
                );    
                
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(visTaskCategorySelect, false);
                
                Set(visDDmenu_PL, false);  
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
                
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =ThisItem.Value
            Width: =56
            ZIndex: =1

    phaseSelectGallery_6 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        Height: =Self.TemplateHeight * 3.35
        Items: =Choices('Project List'.Brandklasse)
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =2
        TemplateSize: =24
        Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_brandklasse)
        Width: =60
        X: =831
        Y: =78
        ZIndex: =170

        Button18_10 As button:
            BorderThickness: =0
            Color: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
            Fill: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(194, 101, 72, 1), RGBA(220, 220, 220, 1))
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =Set(selectedBKChange, phaseSelectGallery_6.Selected.Value);
                
                //To save the data of the previously edited before moving to a new phase.
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: selectedPLinChange,
                        prjName: selectedPrjName,
                        prjNr: selectedSagsNr,
                        bClass: selectedBKChange,
                        kClass: selectedKKChange,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {Brandklasse: {Value: selectedBKChange}, currentPhase: makeJsonCurrentPhase});
                If(
                    selectedPrjPhase = "FOR", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {FOR: makeJsonCurrentPhase}),
                    selectedPrjPhase = "SKI", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {SKI: makeJsonCurrentPhase}),
                    selectedPrjPhase = "MYN", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {MYN: makeJsonCurrentPhase}),
                    selectedPrjPhase = "HOV", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {HOV: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDB", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDB: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDF", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDF: makeJsonCurrentPhase}),
                    selectedPrjPhase = "AFL", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {AFL: makeJsonCurrentPhase})
                );    
                
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(visTaskCategorySelect, false);
                
                Set(visDDmenu_PL, false);  
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
                
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =ThisItem.Value
            Width: =56
            ZIndex: =1

    phaseSelectGallery_7 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        Height: =Self.TemplateHeight * 3.35
        Items: =Choices('Project List'.Entreprise)
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =2
        TemplateSize: =24
        Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_enterprise)
        Width: =150
        X: =895
        Y: =78
        ZIndex: =171

        Button18_11 As button:
            BorderThickness: =0
            Color: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
            Fill: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(194, 101, 72, 1), RGBA(220, 220, 220, 1))
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =Set(selectedEnterpriseChange, phaseSelectGallery_7.Selected.Value);
                
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {Entreprise: {Value: selectedEnterpriseChange}});
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(visTaskCategorySelect, false);
                
                Set(visDDmenu_PL, false);  
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
                
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =Upper(ThisItem.Value)
            Width: =146
            ZIndex: =1

    phaseSelectGallery_8 As gallery.galleryVertical:
        '#CopilotOverlayLabel': ="Filtered"
        DelayItemLoading: =true
        Fill: =RGBA(255, 255, 255, 1)
        Height: =Self.TemplateHeight * 5.5
        Items: =Choices('Project List'.Rådgivning)
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        TemplatePadding: =2
        TemplateSize: =24
        Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_radgivning)
        Width: =125
        X: =1049
        Y: =78
        ZIndex: =172

        Button18_12 As button:
            BorderThickness: =0
            Color: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
            Fill: |
                =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, RGBA(194, 101, 72, 1), RGBA(220, 220, 220, 1))
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
            OnSelect: |
                =Set(selectedRadgivningChange, phaseSelectGallery_8.Selected.Value);
                
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {Rådgivning: {Value: selectedRadgivningChange}});
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(visTaskCategorySelect, false);
                
                Set(visDDmenu_PL, false);  
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
                
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingLeft: =1
            PaddingRight: =1
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =7.2
            Text: =ThisItem.Value
            Width: =121
            ZIndex: =1

    Label1 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="BRA-klasse"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =65
        X: =831
        Y: =38
        ZIndex: =173

    Label1_2 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="PL"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =49
        X: =558
        Y: =38
        ZIndex: =174

    Label1_4 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="Enterprise"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =98
        X: =895
        Y: =38
        ZIndex: =175

    Label1_1 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="KON-klasse  "
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =65
        X: =767
        Y: =38
        ZIndex: =176

    Label1_13 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="Rådgivning"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =98
        X: =1049
        Y: =38
        ZIndex: =177

    Label1_3 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="Kategori"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =95
        X: =612
        Y: =38
        ZIndex: =178

    Label1_21 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="Opdragsgiver"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =98
        X: =1178
        Y: =38
        ZIndex: =179

    Label1_5 As label:
        Color: =RGBA(237, 237, 237, 1)
        DisplayMode: =displayMode
        FontWeight: =FontWeight.Lighter
        Height: =20
        PaddingLeft: =0
        Size: =8
        Text: ="FASE"
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =40
        X: =515
        Y: =38
        ZIndex: =180

    Button4 As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(150, 150, 150, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(194, 101, 72, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverColor: =RGBA(0, 0, 0, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: |-
            =If(
                User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                
                Set(visDDmenu_phaseChange, !visDDmenu_phaseChange);
            
                Set(visOpdragsgiverEditor, false);
                Set(visPrjNavnEditor, false);
                Set(visSagsNrEditor, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_PL, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
                
                Set(visTaskCategorySelect, false);
            
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            );
            
            Set(visPressedAddingTask, false);
            //
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =8
        Text: =Upper(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).projectPhase.Value)
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =40
        X: =515
        Y: =58
        ZIndex: =181

    Button4_1 As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(150, 150, 150, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(194, 101, 72, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverColor: =RGBA(0, 0, 0, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: |-
            =If(
                User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                Set(visDDmenu_PL, !visDDmenu_PL);
                
                Set(visOpdragsgiverEditor, false);
                Set(visPrjNavnEditor, false);
                Set(visSagsNrEditor, false);
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
            
                Set(visTaskCategorySelect, false);
            
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            );
            
            Set(visPressedAddingTask, false);
            //
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =8
        Text: =Upper(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).PL)
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =50
        X: =559
        Y: =58
        ZIndex: =182

    Button4_2 As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(150, 150, 150, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(153, 172, 169, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverColor: =RGBA(0, 0, 0, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: |-
            =If(
                User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                Set(visDDmenu_bygCategory, !visDDmenu_bygCategory);
                
                Set(visOpdragsgiverEditor, false);
                Set(visPrjNavnEditor, false);
                Set(visSagsNrEditor, false);
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_PL, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);
            
                Set(visTaskCategorySelect, false);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            );
            
            Set(visPressedAddingTask, false);
            //
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =8
        Text: =Upper(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).bygCategories.Value)
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =150
        X: =613
        Y: =58
        ZIndex: =183

    Button4_3 As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(150, 150, 150, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(153, 172, 169, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverColor: =RGBA(0, 0, 0, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: |-
            =If(
                User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                Set(visDDmenu_konklasse, !visDDmenu_konklasse);
                
                Set(visOpdragsgiverEditor, false);
                Set(visPrjNavnEditor, false);
                Set(visSagsNrEditor, false);
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_PL, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);   
            
                Set(visTaskCategorySelect, false);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            );
            
            Set(visPressedAddingTask, false);
            //
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =8
        Text: =Upper(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Konstruktionsklasse.Value)
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =60
        X: =767
        Y: =58
        ZIndex: =184

    Button4_4 As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(150, 150, 150, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(153, 172, 169, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverColor: =RGBA(0, 0, 0, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: |-
            =If(
                User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                Set(visDDmenu_brandklasse, !visDDmenu_brandklasse);
                
                Set(visOpdragsgiverEditor, false);
                Set(visPrjNavnEditor, false);
                Set(visSagsNrEditor, false);
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_PL, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false);  
            
                Set(visTaskCategorySelect, false);
                Set(visPressedAddingTask, false);
            
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            );
            
            
            //
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =8
        Text: =Upper(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Brandklasse.Value)
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =60
        X: =831
        Y: =58
        ZIndex: =186

    Button4_5 As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(150, 150, 150, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(153, 172, 169, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverColor: =RGBA(0, 0, 0, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: |-
            =If(
                User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                Set(visDDmenu_enterprise, !visDDmenu_enterprise);
                
                Set(visOpdragsgiverEditor, false);
                Set(visPrjNavnEditor, false);
                Set(visSagsNrEditor, false);
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_PL, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_konklasse, false);
                Set(visDDmenu_radgivning, false);  
            
                Set(visTaskCategorySelect, false);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            );
            
            Set(visPressedAddingTask, false);
            //
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =8
        Text: =Upper(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Entreprise.Value)
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =150
        X: =895
        Y: =58
        ZIndex: =187

    Button4_6 As button:
        BorderThickness: =0
        Color: =RGBA(0, 0, 0, 1)
        DisabledFill: =RGBA(150, 150, 150, 1)
        DisplayMode: =displayMode
        Fill: =RGBA(153, 172, 169, 1)
        FocusedBorderThickness: =0
        Height: =20
        HoverColor: =RGBA(0, 0, 0, 1)
        HoverFill: =RGBA(255, 255, 255, 1)
        OnSelect: |-
            =If(
                User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                Set(visDDmenu_radgivning, !visDDmenu_radgivning);
                
                Set(visOpdragsgiverEditor, false);
                Set(visPrjNavnEditor, false);
                Set(visSagsNrEditor, false);
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_phaseList, false);
                Set(visDDmenu_PL, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_konklasse, false);  
            
                Set(visTaskCategorySelect, false);
                
                //Reset the auto kick-out timer
                Reset(timerAutoPopUpWindow);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            );
            
            Set(visPressedAddingTask, false);
            //
        RadiusBottomLeft: =0
        RadiusBottomRight: =0
        RadiusTopLeft: =0
        RadiusTopRight: =0
        Size: =8
        Text: =Upper(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Rådgivning.Value)
        Visible: =If(visPlan = true, false, visManagerEdit)
        Width: =125
        X: =1049
        Y: =58
        ZIndex: =188

    Group17 As group:
        Height: =5
        Width: =5
        X: =60
        Y: =60
        ZIndex: =193

        Rectangle8 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            BorderStyle: =BorderStyle.Dashed
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(255, 255, 255, 1)
            Height: =300
            Visible: =visStatusListBox
            Width: =250
            X: =1100
            Y: =185
            ZIndex: =139

        Icon7 As icon.Cancel:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(230, 230, 230, 1)
            Height: =20
            Icon: =Icon.Cancel
            OnSelect: |-
                =Set(visControlMenu, false);
                
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = ThisRecord.docs, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = ThisRecord.docs, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = ThisRecord.docs, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = ThisRecord.docs, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = ThisRecord.docs, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = ThisRecord.docs, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = ThisRecord.docs, {log: A.log}))
                );
                
                Set(visUserGal, false);
                Set(statusCode, Blank());
                Set(visStatusListBox, false);
                Set(displayMode, DisplayMode.Edit);
                Reset(statusMessageBox);
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =//visStatusListBox
            Width: =20
            X: =1318
            Y: =184
            ZIndex: =140

        opgaveStatus_2 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            Height: =29
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =10
            Strikethrough: =
            Text: ="1. STATUS"
            VerticalAlign: =VerticalAlign.Top
            Visible: =visStatusListBox
            Width: =234
            X: =1110
            Y: =189
            ZIndex: =141

        taskProgress As gallery.galleryHorizontal:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Height: =33
            Items: |-
                =Table({a: 0}, {a: 25}, {a: 50}, {a: 75}, {a: 100})
            LoadingSpinner: =LoadingSpinner.Data
            TemplatePadding: =3
            TemplateSize: =41
            Visible: =visStatusListBox
            Width: =224
            X: =1114
            Y: =272
            ZIndex: =142

            Button1 As button:
                BorderThickness: =0
                Color: |-
                    =Switch(
                        selectedCategory, 
                        "ARK", If(ThisItem.a = LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.3)),
                        "KON", If(ThisItem.a = LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.3)),
                        "BRA", If(ThisItem.a = LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.3)),
                        "MYN", If(ThisItem.a = LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.3)),
                        "BÆR", If(ThisItem.a = LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.3)),
                        "VVS", If(ThisItem.a = LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.3)),
                        "UDF", If(ThisItem.a = LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(0, 0, 0, 1), RGBA(0, 0, 0, 0.3))
                    )
                DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
                Fill: |-
                    =Switch(
                        selectedCategory, 
                        "ARK", 
                        If(ThisItem.a = LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(200, 219, 217, 1), RGBA(240,240,240,1)),
                        "KON", 
                        If(ThisItem.a = LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(200, 219, 217, 1), RGBA(240,240,240,1)),
                        "BRA", 
                        If(ThisItem.a = LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(200, 219, 217, 1), RGBA(240,240,240,1)),
                        "MYN", 
                        If(ThisItem.a = LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(200, 219, 217, 1), RGBA(240,240,240,1)),
                        "BÆR", 
                        If(ThisItem.a = LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(200, 219, 217, 1), RGBA(240,240,240,1)),
                        "VVS", 
                        If(ThisItem.a = LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(200, 219, 217, 1), RGBA(240,240,240,1)),
                        "UDF", 
                        If(ThisItem.a = LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, RGBA(200, 219, 217, 1), RGBA(240,240,240,1))
                    )
                FocusedBorderThickness: =0
                FontWeight: |
                    =Switch(
                        selectedCategory, 
                        "ARK", If(ThisItem.a = LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, FontWeight.Bold,  FontWeight.Lighter),
                        "KON", If(ThisItem.a = LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, FontWeight.Bold,  FontWeight.Lighter),
                        "BRA", If(ThisItem.a = LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, FontWeight.Bold,  FontWeight.Lighter),
                        "MYN", If(ThisItem.a = LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, FontWeight.Bold,  FontWeight.Lighter),
                        "BÆR", If(ThisItem.a = LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, FontWeight.Bold,  FontWeight.Lighter),
                        "VVS", If(ThisItem.a = LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, FontWeight.Bold,  FontWeight.Lighter),
                        "UDF", If(ThisItem.a = LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).opgaveProgress, FontWeight.Bold,  FontWeight.Lighter)
                    )
                Height: =Parent.TemplateHeight
                HoverFill: =RGBA(0,0,0,1)
                OnSelect: |
                    =Switch(
                        selectedCategory, 
                        "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {opgaveProgress: ThisItem.a, progressByHours:ThisItem.a/100 * assignedHours}),
                        "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {opgaveProgress: ThisItem.a, progressByHours:ThisItem.a/100 * assignedHours}),
                        "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {opgaveProgress: ThisItem.a, progressByHours:ThisItem.a/100 * assignedHours}),
                        "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {opgaveProgress: ThisItem.a, progressByHours:ThisItem.a/100 * assignedHours}),
                        "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {opgaveProgress: ThisItem.a, progressByHours:ThisItem.a/100 * assignedHours}),
                        "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {opgaveProgress: ThisItem.a, progressByHours:ThisItem.a/100 * assignedHours}),
                        "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {opgaveProgress: ThisItem.a, progressByHours:ThisItem.a/100 * assignedHours})
                    );
                    
                    ClearCollect(opgaver_selPrj_allTasks, 
                        selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                        selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                    );
                    
                    Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                        {date: Text(Now(),"dd-mm-yyyy hh:mm:ss"), text: Upper(Left(User().Email, 3)) & " markerede " & ThisItem.a & "%"});
                    
                    Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
                    );
                    
                    //Select(saveBUTTON); // I don't remember why this is necessary to save it every time...
                    Reset(timerRefreshProjectList);
                    Set(visDropMenu, false);
                PaddingLeft: =0
                PaddingRight: =0
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =9
                Text: =ThisItem.a & "%"
                Width: =Parent.TemplateWidth
                ZIndex: =1

        opgaveStatus_3 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            Height: =23
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =8.5
            Strikethrough: =
            Text: |-
                ="Status:"
            Visible: =visStatusListBox
            Width: =219
            X: =1118
            Y: =319
            ZIndex: =143

        opgaveStatus_4 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            Height: =18
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =8.5
            Strikethrough: =
            Text: |-
                ="Status færdiggørelse:"
            Visible: =visStatusListBox
            Width: =184
            X: =1118
            Y: =253
            ZIndex: =144

        Rectangle5 As rectangle:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: |-
                =Switch(
                    StatusDDmenu.Selected.a,
                    "STÅR FAST", RGBA(175, 55, 65, 1),
                    "AFVENTER EKST.", RGBA(153, 132, 179, 1),
                    "I GANG", RGBA(200, 219, 217, 1), 
                    "IKKE STARTET", RGBA(200, 219, 217, 1)
                )
            Height: =StatusDDmenu.Height
            Visible: =visStatusListBox
            Width: =StatusDDmenu.Width
            X: =StatusDDmenu.X
            Y: =StatusDDmenu.Y
            ZIndex: =145

        statusMessageBox As text:
            BorderColor: =RGBA(202, 202, 202, 1)
            BorderThickness: =0
            Default: |-
                =Switch(
                    selectedCategory, 
                    "ARK", LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).statusMessage,
                    "KON", LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).statusMessage,
                    "BRA", LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).statusMessage,
                    "MYN", LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).statusMessage,
                    "BÆR", LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).statusMessage,
                    "VVS", LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).statusMessage,
                    "UDF", LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).statusMessage
                )
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0.2
            Height: =82
            HintText: |-
                ="ex) Mangler check fra #TLA"
            HoverBorderColor: =RGBA(0, 0, 0, 1)
            HoverFill: =RGBA(219, 219, 219, 1)
            Mode: =TextMode.MultiLine
            OnChange: |
                =Switch(
                    selectedCategory, 
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {statusMessage: statusMessageBox.Text}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {statusMessage: statusMessageBox.Text}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {statusMessage: statusMessageBox.Text}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {statusMessage: statusMessageBox.Text}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {statusMessage: statusMessageBox.Text}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {statusMessage: statusMessageBox.Text}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {statusMessage: statusMessageBox.Text})
                );
            PaddingLeft: =5
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =10
            Visible: |
                =If(visStatusListBox,
                    If(visMessageBox, 
                        Switch(
                            selectedCategory, 
                            "ARK", 
                            If(
                                LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).markColor = Blank() ||
                                LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).markColor = "IKKE STARTET" || 
                                LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).markColor = "I GANG", false, true),
                            "KON", 
                            If(
                                LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).markColor = Blank() ||
                                LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).markColor = "IKKE STARTET" || 
                                LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).markColor = "I GANG", false, true),
                            "BRA", 
                            If(
                                LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).markColor = Blank() ||
                                LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).markColor = "IKKE STARTET" || 
                                LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).markColor = "I GANG", false, true),
                            "MYN", 
                            If(
                                LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).markColor = Blank() ||
                                LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).markColor = "IKKE STARTET" || 
                                LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).markColor = "I GANG", false, true),
                            "BÆR", 
                            If(
                                LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).markColor = Blank() ||
                                LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).markColor = "IKKE STARTET" || 
                                LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).markColor = "I GANG", false, true),
                            "VVS", 
                            If(
                                LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).markColor = Blank() ||
                                LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).markColor = "IKKE STARTET" || 
                                LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).markColor = "I GANG", false, true),
                            "UDF", 
                            If(
                                LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).markColor = Blank() ||
                                LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).markColor = "IKKE STARTET" || 
                                LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).markColor = "I GANG", false, true)
                        )
                    )
                )
            Width: =220
            X: =1114
            Y: =379
            ZIndex: =146

        StatusDDmenu As dropdown:
            BorderColor: =RGBA(102, 102, 102, 1)
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 0)
            ChevronHoverBackground: =RGBA(56, 96, 178, 0)
            ChevronHoverFill: =RGBA(255, 255, 255, 0)
            Default: |-
                =Switch(
                    selectedCategory, 
                    "ARK", 
                    If(LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).markColor = "STÅR FAST", "STÅR FAST",
                    LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).markColor = "AFVENTER EKST.", "AFVENTER EKST.",
                    "I GANG" || "IKKE STARTET"),
                    "KON", 
                    If(LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).markColor = "STÅR FAST", "STÅR FAST",
                    LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).markColor = "AFVENTER EKST.", "AFVENTER EKST.",
                    "I GANG" || "IKKE STARTET"),
                    "BRA", 
                    If(LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).markColor = "STÅR FAST", "STÅR FAST",
                    LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).markColor = "AFVENTER EKST.", "AFVENTER EKST.",
                    "I GANG" || "IKKE STARTET"),
                    "MYN", 
                    If(LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).markColor = "STÅR FAST", "STÅR FAST",
                    LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).markColor = "AFVENTER EKST.", "AFVENTER EKST.",
                    "I GANG" || "IKKE STARTET"),
                    "BÆR", 
                    If(LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).markColor = "STÅR FAST", "STÅR FAST",
                    LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).markColor = "AFVENTER EKST.", "AFVENTER EKST.",
                    "I GANG" || "IKKE STARTET"),
                    "VVS", 
                    If(LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).markColor = "STÅR FAST", "STÅR FAST",
                    LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).markColor = "AFVENTER EKST.", "AFVENTER EKST.",
                    "I GANG" || "IKKE STARTET"),
                    "UDF", 
                    If(LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).markColor = "STÅR FAST", "STÅR FAST",
                    LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).markColor = "AFVENTER EKST.", "AFVENTER EKST.",
                    "I GANG" || "IKKE STARTET")
                )
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(255, 255, 255, 0)
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Semibold
            Height: =28
            HoverColor: =RGBA(255, 255, 255, 1)
            HoverFill: =RGBA(0, 0, 0, 1)
            Items: |-
                =Switch(
                    selectedCategory, 
                    "ARK", 
                    If(
                        LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).opgaveProgress = 0,
                        Table({a: "IKKE STARTET"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}), Table({a: "I GANG"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."})),      
                    "KON",
                    If(
                        LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).opgaveProgress = 0, 
                        Table({a: "IKKE STARTET"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}), Table({a: "I GANG"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."})),
                    "BRA", 
                    If(
                        LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).opgaveProgress = 0, 
                        Table({a: "IKKE STARTET"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}), Table({a: "I GANG"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."})),
                    "MYN", 
                    If(
                        LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).opgaveProgress = 0, 
                        Table({a: "IKKE STARTET"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}), Table({a: "I GANG"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."})),
                    "BÆR", 
                    If(
                        LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).opgaveProgress = 0, 
                        Table({a: "IKKE STARTET"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}), Table({a: "I GANG"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."})),
                    "VVS", 
                    If(
                        LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).opgaveProgress = 0, 
                        Table({a: "IKKE STARTET"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}), Table({a: "I GANG"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."})),
                    "UDF", 
                    If(
                        LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).opgaveProgress = 0, 
                        Table({a: "IKKE STARTET"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}), Table({a: "I GANG"}, {a: "STÅR FAST"}, {a: "AFVENTER EKST."}))
                )
            OnChange: |-
                =Switch(
                    selectedCategory, 
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {markColor: StatusDDmenu.Selected.a}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {markColor: StatusDDmenu.Selected.a}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {markColor: StatusDDmenu.Selected.a}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {markColor: StatusDDmenu.Selected.a}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {markColor: StatusDDmenu.Selected.a}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {markColor: StatusDDmenu.Selected.a}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {markColor: StatusDDmenu.Selected.a})
                );
                
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                        text: 
                        Switch(StatusDDmenu.Selected.a, 
                        "I GANG", Upper(Left(User().Email, 3)) & " markerede aktivitet med 'i gang'",
                        "STÅR FAST", Upper(Left(User().Email, 3)) & " markerede aktivitet med 'står fast'",
                        "AFVENTER EKST.", Upper(Left(User().Email, 3)) & " markerede aktivitet med 'afventer ekst.'"
                        )
                    }
                );
                
                Set(visMessageBox, true);
            OnSelect: =Set(visMessageBox, !visMessageBox);
            SelectionColor: =RGBA(168, 0, 0, 1)
            SelectionFill: =RGBA(0, 0, 0, 0)
            Size: =8
            Visible: =visStatusListBox
            Width: =220
            X: =1114
            Y: =342
            ZIndex: =147

    Group11 As group:
        Height: =5
        Width: =5
        X: =60
        Y: =60
        ZIndex: =194

        Rectangle8_1 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            BorderStyle: =BorderStyle.Dashed
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(255, 255, 255, 1)
            Height: =121
            Visible: =visKSCard
            Width: =250
            X: =1100
            Y: =620
            ZIndex: =148

        Icon7_4 As icon.Cancel:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(230, 230, 230, 1)
            Height: =20
            Icon: =Icon.Cancel
            OnSelect: |-
                =Set(visControlMenu, false);
                Set(visKSCard, false);
                Set(statusCode, Blank());
                Set(displayMode, DisplayMode.Edit);
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =//visKSCard
            Width: =20
            X: =1317
            Y: =603
            ZIndex: =149

        opgaveStatus_5 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =Color.White
            FontWeight: =FontWeight.Bold
            Height: =27
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =10
            Strikethrough: =
            Text: ="3. KONTROLLANT"
            VerticalAlign: =VerticalAlign.Top
            Visible: =visKSCard
            Width: =232
            X: =1110
            Y: =625
            ZIndex: =150

        rejectionToggle As toggleSwitch:
            Default: |-
                =Switch(
                    selectedCategory, 
                    "ARK", LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).rejection,
                    "KON", LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).rejection,
                    "BRA", LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).rejection,
                    "MYN", LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).rejection,
                    "BÆR", LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).rejection,
                    "VVS", LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).rejection,
                    "UDF", LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).rejection
                )
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            FalseText: ="Nej"
            FocusedBorderThickness: =1
            Height: =15
            OnChange: =
            OnCheck: |
                =/*
                Switch(
                    selectedCategory, 
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {rejection: true, readyForKS: false, approval: false}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {rejection: true, readyForKS: false, approval: false}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {rejection: true, readyForKS: false, approval: false}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {rejection: true, readyForKS: false, approval: false}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {rejection: true, readyForKS: false, approval: false}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {rejection: true, readyForKS: false, approval: false}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {rejection: true, readyForKS: false, approval: false})
                );
                
                
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: Upper(Left(User().Email, 3)) & " afvist KS"});
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                );
                */
            OnSelect: |+
                =Switch(
                    selectedCategory, 
                    "ARK",
                    Switch(rejectionToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: true, readyForKS: false, approval: false});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 2, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: false, readyForKS: true})
                    ),
                    "KON",
                    Switch(rejectionToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: true, readyForKS: false, approval: false});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 2, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: false, readyForKS: true})
                    ),
                    "BRA",
                    Switch(rejectionToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: true, readyForKS: false, approval: false});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 2, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: false, readyForKS: true})
                    ),
                    "MYN",
                    Switch(rejectionToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: true, readyForKS: false, approval: false});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 2, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: false, readyForKS: true})
                    ),
                    "BÆR",
                    Switch(rejectionToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: true, readyForKS: false, approval: false});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 2, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: false, readyForKS: true})
                    ),
                    "VVS",
                    Switch(rejectionToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: true, readyForKS: false, approval: false});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 2, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: false, readyForKS: true})
                    ),
                    "UDF",
                    Switch(rejectionToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: true, readyForKS: false, approval: false});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 2, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {rejection: false, readyForKS: true})
                    )
                );
                
                Switch(rejectionToggle.Value,
                        true, Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                            {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: Upper(Left(User().Email, 3)) & " afvist KS"})
                );
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
                );
                
            OnUncheck: |-
                =/*
                Switch(
                    selectedCategory, 
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {
                            rejection: false,
                            readyForKS: true
                        }),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {
                            rejection: false,
                            readyForKS: true
                        }),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {
                            rejection: false,
                            readyForKS: true
                        }),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {
                            rejection: false,
                            readyForKS: true
                        }),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {
                            rejection: false,
                            readyForKS: true
                        }),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {
                            rejection: false,
                            readyForKS: true
                        }),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {
                            rejection: false,
                            readyForKS: true
                        })
                );
                */
            Reset: =true
            Size: =9
            TrueFill: =RGBA(221, 79, 14, 1)
            TrueText: ="Ja"
            Visible: =visKSCard
            Width: =60
            X: =1202
            Y: =694
            ZIndex: =151

        approvalToggle As toggleSwitch:
            Default: |-
                =Switch(
                    selectedCategory, 
                    "ARK", LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).approval,
                    "KON", LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).approval,
                    "BRA", LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).approval,
                    "MYN", LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).approval,
                    "BÆR", LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).approval,
                    "VVS", LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).approval,
                    "UDF", LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).approval
                )
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            FalseText: ="Nej"
            FocusedBorderThickness: =1
            Height: =15
            OnChange: =
            OnCheck: |-
                =/*
                Switch(
                    selectedCategory, 
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, 
                    {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"}),      
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, 
                    {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, 
                    {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, 
                    {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, 
                    {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, 
                    {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, 
                    {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"})
                );
                
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: Upper(Left(User().Email, 3)) & " godkendte KS"});
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                );
                */
            OnSelect: |
                =Switch(
                    selectedCategory, 
                    "ARK",
                    Switch(approvalToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 3, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                    ),
                    "KON",
                    Switch(approvalToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 3, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                    ),
                    "BRA",
                    Switch(approvalToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 3, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                    ),
                    "MYN",
                    Switch(approvalToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 3, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"), 
                        false,
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                    ),
                    "BÆR",
                    Switch(approvalToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 3, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"), 
                        false,
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                    ),
                    "VVS",
                    Switch(approvalToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 3, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                    ),
                    "UDF",
                    Switch(approvalToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {approval:true, rejection: false, readyForKS: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 3, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"), 
                        false,
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                    )
                );
                
                Switch(approvalToggle.Value,
                        true, Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                            {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: Upper(Left(User().Email, 3)) & " godkendte KS"})
                );
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
                );
            OnUncheck: |-
                =/*
                Switch(
                    selectedCategory, 
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {approval:false})
                );
                */
            Size: =9
            TrueFill: =RGBA(51, 158, 69, 1)
            TrueText: ="Ja"
            Visible: =visKSCard
            Width: =60
            X: =1202
            Y: =717
            ZIndex: =152

        opgaveStatus_7 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Height: =25
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =9
            Strikethrough: =
            Text: ="AFVIST"
            Visible: =visKSCard
            Width: =80
            X: =1118
            Y: =689
            ZIndex: =153

        opgaveStatus_6 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Height: =25
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =9
            Strikethrough: =
            Text: ="GODKENDT"
            Visible: =visKSCard
            Width: =80
            X: =1118
            Y: =712
            ZIndex: =154

        Button19_20 As button:
            BorderColor: =RGBA(0,0,0,1)
            BorderThickness: =0.1
            Color: =RGBA(0, 0, 0, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =0
            FontWeight: =FontWeight.Normal
            Height: =18
            HoverFill: =RGBA(0, 0, 0, 1)
            OnSelect: |
                =Set(statusCode, Blank());
                Set(displayMode, DisplayMode.Edit);
                Set(visKSCard, false);
            RadiusBottomLeft: =3
            RadiusBottomRight: =3
            RadiusTopLeft: =3
            RadiusTopRight: =3
            Size: =9
            Text: ="SAVE"
            Visible: |-
                =false
                //visKSCard
            Width: =40
            X: =1223
            Y: =625
            ZIndex: =155

    AddingTask_single As group:
        Height: =5
        Width: =5
        X: =60
        Y: =60
        ZIndex: =201

        Rectangle1_3 As rectangle:
            Fill: =RGBA(242, 241, 237, 0.95)
            Height: =768
            Visible: =visAddingTask_single
            Width: =1366
            ZIndex: =197

        taskName As text:
            BorderThickness: =0
            Default: =""
            DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 = true, DisplayMode.Disabled, DisplayMode.Edit) 
            FocusedBorderThickness: =1
            Height: =22
            HintText: ="Indtast et opgavenavn "
            OnChange: =Set(decidedTaskName, taskName.Text);
            PaddingLeft: =5
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Reset: =true
            Size: =9
            Visible: =visAddingTask_single
            Width: =361
            X: =505
            Y: =283
            ZIndex: =198

        Button19_5 As button:
            BorderThickness: =0
            DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 = true, DisplayMode.Disabled, DisplayMode.Edit) 
            Fill: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Normal
            Height: =20
            OnSelect: |
                =Clear(selPrj_logCollection);
                Collect(selPrj_logCollection, {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: "Oprettet"}); 
                Switch(selectedCategory,
                    "ARK",
                    Patch(selPrj_currentPhase_task_A, Defaults(selPrj_currentPhase_task_A), 
                        {docs: decidedTaskName, docCategory:"ark", assignedHours: Value(weight.Text), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                        complMark: false});
                    ClearCollect(selPrj_currentPhase_task_A, ForAll(Sequence(CountRows(selPrj_currentPhase_task_A)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_A, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_A).delegation),
                    "KON",
                    Patch(selPrj_currentPhase_task_K, Defaults(selPrj_currentPhase_task_K), 
                        {docs: decidedTaskName, docCategory:"kon", assignedHours: Value(weight.Text), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                        complMark: false});
                    ClearCollect(selPrj_currentPhase_task_K, ForAll(Sequence(CountRows(selPrj_currentPhase_task_K)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_K, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_K).delegation),
                    "BRA",
                    Patch(selPrj_currentPhase_task_B, Defaults(selPrj_currentPhase_task_B), 
                        {docs: decidedTaskName, docCategory:"bra", assignedHours: Value(weight.Text), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                        complMark: false});
                    ClearCollect(selPrj_currentPhase_task_B, ForAll(Sequence(CountRows(selPrj_currentPhase_task_B)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_B, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_B).delegation),
                    "MYN",
                    Patch(selPrj_currentPhase_task_M, Defaults(selPrj_currentPhase_task_M), 
                        {docs: decidedTaskName, docCategory:"myn", assignedHours: Value(weight.Text), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                        complMark: false});
                    ClearCollect(selPrj_currentPhase_task_M, ForAll(Sequence(CountRows(selPrj_currentPhase_task_M)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_M, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_M).delegation),
                    "BÆR",
                    Patch(selPrj_currentPhase_task_N, Defaults(selPrj_currentPhase_task_N), 
                        {docs: decidedTaskName, docCategory:"bær", assignedHours: Value(weight.Text), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                        complMark: false});
                    ClearCollect(selPrj_currentPhase_task_N, ForAll(Sequence(CountRows(selPrj_currentPhase_task_N)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_N, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_N).delegation),
                    "VVS",
                    Patch(selPrj_currentPhase_task_V, Defaults(selPrj_currentPhase_task_V), 
                        {docs: decidedTaskName, docCategory:"vvs", assignedHours: Value(weight.Text), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                        complMark: false});
                    ClearCollect(selPrj_currentPhase_task_V, ForAll(Sequence(CountRows(selPrj_currentPhase_task_V)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_V, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_V).delegation),
                    "UDF",
                    Patch(selPrj_currentPhase_task_U, Defaults(selPrj_currentPhase_task_U), 
                        {docs: decidedTaskName, docCategory:"udf", assignedHours: Value(weight.Text), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                        complMark: false});
                    ClearCollect(selPrj_currentPhase_task_U, ForAll(Sequence(CountRows(selPrj_currentPhase_task_U)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_U, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_U).delegation)
                );
                
                
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
                /*
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = ThisRecord.docs && First(A.log).date = Text(Blank()), {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = decidedTaskName && First(ThisRecord.log).date = Text(Blank()), {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, 
                    UpdateIf(selPrj_currentPhase_task_K, A.docs = ThisRecord.docs && First(ThisRecord.log).date = Text(Blank()), {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = ThisRecord.docs, {log: A.log})),
                    //"MYN",
                    //UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = decidedTaskName && First(ThisRecord.log).date = Text(Blank()), {log: selPrj_logCollection});
                    //ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = ThisRecord.docs, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = ThisRecord.docs, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = ThisRecord.docs, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = ThisRecord.docs, {log: A.log}))
                );
                */
                
                Set(visAddingTask_single, !visAddingTask_single);
                Set(displayMode, DisplayMode.Edit);
                Set(selTaskPopup, !selTaskPopup);
                Set(titleEditor, false);
                Set(selectedTask, decidedTaskName);
                Reset(taskSelecting);
                Reset(taskName);
                Reset(weight);
            RadiusBottomLeft: =5
            RadiusBottomRight: =5
            RadiusTopLeft: =5
            RadiusTopRight: =5
            Size: =9
            Text: ="NEXT"
            Visible: =visAddingTask_single
            Width: =52
            X: =814
            Y: =382
            ZIndex: =199

        taskSelecting As combobox:
            BorderColor: =RGBA(0, 0, 0, 1)
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            DefaultSelectedItems: |
                =//ForAll(currentOpgaver.docs, If(ThisRecord.docs in docs2.Value, ThisRecord.docs))
                //If(CountRows(currentOpgaver.docs) = 0, docs2, currentOpgaver.docs)
            DisplayFields: =["doc"]
            DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 = true, DisplayMode.Disabled, DisplayMode.Edit) 
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Lighter
            Height: =22
            InputTextPlaceholder: |-
                =Switch(
                    selectedCategory,
                    "ARK", "Ark docs",
                    "KON", "Kon docs",
                    "BRA", "Brand docs",
                    "MYN", "Myn docs",
                    "BÆR", "Energy docs",
                    "VVS", "Vvs docs"
                )
            IsSearchable: =false
            Items: |-
                =Switch(
                    selectedCategory,
                    "ARK", Blank(),
                    "KON", konDocProperty,
                    "BRA", BraDocProperty,
                    "MYN", MynDocProperty,
                    "BÆR", Blank(),
                    "VVS", Blank()
                )
            OnChange: |-
                =Set(decidedTaskName, taskSelecting.Selected.doc);
                Set(decidedTaskWeight, taskSelecting.Selected.weight);
            Reset: =true
            SearchFields: =["doc"]
            SearchItems: =[]
            SelectionFill: =RGBA(0, 0, 0, 1)
            SelectMultiple: =false
            Size: =8
            Visible: =visAddingTask_single
            Width: =361
            X: =505
            Y: =238
            ZIndex: =200

        Icon5 As icon.Cancel:
            Color: =RGBA(255, 0, 0, 1)
            Height: =15
            Icon: =Icon.Cancel
            OnSelect: |-
                =Set(visAddingTask_single, false);
                Set(displayMode, DisplayMode.Edit);
                
                //Resume the auto kick-out timer
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
                Reset(taskSelecting);Reset(taskName);
            Visible: =visAddingTask_single
            Width: =15
            X: =850
            Y: =216
            ZIndex: =201

        weight As text:
            Align: =Align.Right
            BorderThickness: =0
            Default: =decidedTaskWeight
            DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 = true, DisplayMode.Disabled, DisplayMode.Edit) 
            FocusedBorderThickness: =1
            Height: =25
            HintText: ="weight"
            PaddingLeft: =5
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Reset: =true
            Size: =9
            Visible: =visAddingTask_single
            Width: =52
            X: =814
            Y: =318
            ZIndex: =202

        Label9 As label:
            Align: =Align.Center
            Height: =18
            Size: =9
            Text: ="eller"
            Visible: =visAddingTask_single
            Width: =36
            X: =666
            Y: =263
            ZIndex: =203

    Group18 As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =214

        newProject As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =700
            Visible: =visReg
            Width: =853
            X: =273
            Y: =36
            ZIndex: =73

        Button19_15 As button:
            BorderThickness: =0
            DisplayMode: =displayMode
            Fill: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Normal
            Height: =20
            HoverFill: =ColorFade(RGBA(255, 0, 0, 0.9), -30%)
            OnSelect: |
                =Set(selectedTasksRegist_FOR, Filter(LookUp(selectPhaseInRegist, ThisRecord.phase = "FOR").task, ThisRecord.mark = true).value);
                Set(selectedTasksRegist_SKI, Filter(LookUp(selectPhaseInRegist, ThisRecord.phase = "SKI").task, ThisRecord.mark = true).value);
                Set(selectedTasksRegist_MYN, Filter(LookUp(selectPhaseInRegist, ThisRecord.phase = "MYN").task, ThisRecord.mark = true).value);
                Set(selectedTasksRegist_HOV, Filter(LookUp(selectPhaseInRegist, ThisRecord.phase = "HOV").task, ThisRecord.mark = true).value);
                Set(selectedTasksRegist_UDB, Filter(LookUp(selectPhaseInRegist, ThisRecord.phase = "UDB").task, ThisRecord.mark = true).value);
                Set(selectedTasksRegist_UDF, Filter(LookUp(selectPhaseInRegist, ThisRecord.phase = "UDF").task, ThisRecord.mark = true).value);
                Set(selectedTasksRegist_AFL, Filter(LookUp(selectPhaseInRegist, ThisRecord.phase = "AFL").task, ThisRecord.mark = true).value);
                
                ClearCollect(toSP_json_ProjectManagement_commonInfo, 
                    {
                        PL: plDD.Selected.Value,
                        prjName: prjNameTextInput.Text,
                        prjNr: sagsNrTextInput.Text,
                        bClass: brandClassDD.Selected.Value,
                        kClass: conClassDD.Selected.Value
                    }
                );
                
                Patch('Project List', Defaults('Project List'), 
                    {
                        'Sagsnr. ATICONs ': sagsNrTextInput.Text,
                        Projektnavn: prjNameTextInput.Text,
                        projectStatus: {Value: "active"},
                        Opdragsgiver:clientTextInput.Text,
                        Bygherre: bygherreTextInput.Text,
                        //projectLeader: selectedPLinRegist,
                        assignedPhase: toSP_json_ProjectList_assignedPhase, 
                        PL: plDD.Selected.Value,
                        Rådgivning: selectedradgivning_regist,
                        bygCategories: selectedbygCategory_regist,
                        projectType: selectedPrjType_regist,
                        Entreprise: selectedEntreprise_regist,
                        Konstruktionsklasse: conClassDD.Selected,
                        Brandklasse: brandClassDD.Selected,
                        entrepreneur: entrepTextInput.Text,
                        architect: archiTextInput.Text,
                        engineer: enginrTextInput.Text,
                        brand: brndTextInput.Text,
                        baeredygtighed:baerTextInput.Text, 
                        FOR:JSON(
                            ClearCollect(toSP_json_ProjectManagment_FOR, AddColumns(toSP_json_ProjectManagement_commonInfo, 
                                assignedTasks, ForAll(selectedTasksRegist_FOR, {value: ThisRecord.value}),
                                deadline, LookUp(selectPhaseInRegist, ThisRecord.phase = "FOR").deadline))),
                        SKI: JSON(ClearCollect(toSP_json_ProjectManagment_SKI, 
                    AddColumns(toSP_json_ProjectManagement_commonInfo, 
                        assignedTasks, ForAll(selectedTasksRegist_SKI, {value: ThisRecord.value}),
                        deadline, LookUp(selectPhaseInRegist, ThisRecord.phase = "SKI").deadline
                    ))),
                        MYN: JSON(ClearCollect(toSP_json_ProjectManagment_MYN, 
                    AddColumns(toSP_json_ProjectManagement_commonInfo, 
                        assignedTasks, ForAll(selectedTasksRegist_MYN, {value: ThisRecord.value}),
                        deadline, LookUp(selectPhaseInRegist, ThisRecord.phase = "MYN").deadline
                    ))),
                        HOV: JSON(ClearCollect(toSP_json_ProjectManagment_HOV, 
                    AddColumns(toSP_json_ProjectManagement_commonInfo, 
                        assignedTasks, ForAll(selectedTasksRegist_HOV, {value: ThisRecord.value}),
                        deadline, LookUp(selectPhaseInRegist, ThisRecord.phase = "HOV").deadline
                    ))),
                        UDB: JSON(ClearCollect(toSP_json_ProjectManagment_UDB, 
                    AddColumns(toSP_json_ProjectManagement_commonInfo, 
                        assignedTasks, ForAll(selectedTasksRegist_UDB, {value: ThisRecord.value}),
                        deadline, LookUp(selectPhaseInRegist, ThisRecord.phase = "UDB").deadline
                    ))),
                        UDF: JSON(ClearCollect(toSP_json_ProjectManagment_UDF, 
                    AddColumns(toSP_json_ProjectManagement_commonInfo, 
                        assignedTasks, ForAll(selectedTasksRegist_UDF, {value: ThisRecord.value}),
                        deadline, LookUp(selectPhaseInRegist, ThisRecord.phase = "UDF").deadline
                    ))),
                        AFL: JSON(ClearCollect(toSP_json_ProjectManagment_AFL, 
                    AddColumns(toSP_json_ProjectManagement_commonInfo, 
                        assignedTasks, ForAll(selectedTasksRegist_AFL, {value: ThisRecord.value}),
                        deadline, LookUp(selectPhaseInRegist, ThisRecord.phase = "AFL").deadline
                )))
                    }
                );
                
                
                //The code below is for quick refresh with the updated information
                ClearCollect(opgaver, 
                    ForAll('Project List' As firstRecord,
                        {   
                            currentEditor: firstRecord.currentEditor,
                            ID: firstRecord.ID,
                            PL: firstRecord.PL,
                            savsnr: firstRecord.'Sagsnr. ATICONs ',
                            prjnavn: firstRecord.Projektnavn,
                            prjType: firstRecord.projectType.Value,
                            prjPhase: firstRecord.projectPhase.Value,
                            assignedPhase: ForAll(Table(ParseJSON(firstRecord.assignedPhase)) As phaseRecord, {phase: Text(phaseRecord.Value.phase)}),
                            prjStatus: firstRecord.projectStatus.Value,
                            bygCategory: firstRecord.bygCategories.Value,
                            prjEntreprise: firstRecord.Entreprise.Value,
                            prjRadgivning: firstRecord.Rådgivning.Value,
                            conClass: firstRecord.Konstruktionsklasse.Value,
                            brandClass: firstRecord.Brandklasse.Value,
                            client: firstRecord.Opdragsgiver,
                            builder: firstRecord.Bygherre,
                            entrepreneur: firstRecord.entrepreneur,
                            architect: firstRecord.architect,
                            engineer: firstRecord.engineer,
                            brand: firstRecord.brand,
                            sustainability: firstRecord.baeredygtighed,
                            tilbudAccepted: firstRecord.tilbudAccepted,
                            prjDescription: ForAll(Table(ParseJSON(firstRecord.prjDescription)) As descriptionRecord,
                                        {
                                            head: Text(descriptionRecord.Value.head),
                                            body: Text(descriptionRecord.Value.body)
                                        } 
                            ), 
                            currentPhaseTask:
                            ForAll(Table(ParseJSON(firstRecord.currentPhase)) As secondRecord,
                                {
                                    tilbudAccepteret: Text(secondRecord.Value.tilbudAccepteret),
                                    deadline: Text(secondRecord.Value.deadline),                     
                                    assignedTasks: ForAll(Table(secondRecord.Value.assignedTasks) As assignedRecord,
                                        {
                                            value: Text(assignedRecord.Value.value)   
                                        }
                                    ),             
                                    taskCategory: ForAll(Table(secondRecord.Value.task) As thirdRecord,
                                        { 
                                            ARK: ForAll(Table(thirdRecord.Value.ARK) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            KON: ForAll(Table(thirdRecord.Value.KON) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            BRA: ForAll(Table(thirdRecord.Value.BRA) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            MYN: ForAll(Table(thirdRecord.Value.MYN) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            BÆR: ForAll(Table(thirdRecord.Value.BÆR) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            VVS: ForAll(Table(thirdRecord.Value.VVS) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            UDF: ForAll(Table(thirdRecord.Value.UDF) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            )
                                        }
                                    )
                                }
                            )
                        }
                    )
                );
                
                //-----------------In case, there is an error making 'No name projects'
                RemoveIf(opgaver, prjnavn = Blank());
                //-----------------For numbering the Projects. Could be useful to prioritize the projects.
                ClearCollect(opgaver,
                    ForAll(Sequence(CountRows(opgaver)) As ThisSequence, 
                        Patch(Last(FirstN(opgaver, ThisSequence.Value)), {rowNumberPlanning: ThisSequence.Value})
                    )
                );
                ClearCollect(opgaverWhole, Ungroup(opgaver, currentPhaseTask));
                
                
                Refresh('Project List');
                Reset(sagsNrTextInput);
                Reset(prjNameTextInput);
                Reset(clientTextInput);
                Reset(bygherreTextInput);
                Reset(plDD); Reset(bygcategoryDD); Reset(prjTypeDD); Reset(entrePriseDD); Reset(conClassDD); Reset(brandClassDD); Reset(radgivningDD);
                Reset(entrepTextInput);Reset(archiTextInput);Reset(enginrTextInput);Reset(brndTextInput);Reset(baerTextInput);
                Set(visReg, !visReg);
                Clear(assignedPhase);
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =8
            Text: ="GEM"
            Visible: =visReg
            Width: =45
            X: =1053
            Y: =708
            ZIndex: =74

        Icon7_3 As icon.Cancel:
            BorderColor: =RGBA(0, 0, 0, 1)
            BorderThickness: =1
            Color: =RGBA(0, 0, 0, 1)
            DisplayMode: =displayMode
            FocusedBorderThickness: =1
            Height: =20
            Icon: =Icon.Cancel
            OnSelect: |+
                =Set(visReg, !visReg);
                Reset(sagsNrTextInput);
                Reset(prjNameTextInput);
                Reset(clientTextInput);
                Reset(bygherreTextInput);
                Reset(plDD); Reset(bygcategoryDD); Reset(prjTypeDD); Reset(entrePriseDD); Reset(conClassDD); Reset(brandClassDD); Reset(radgivningDD);
                Reset(entrepTextInput);Reset(archiTextInput);Reset(enginrTextInput);Reset(brndTextInput);Reset(baerTextInput);
                Clear(assignedPhase);
                
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =visReg
            Width: =20
            X: =1092
            Y: =48
            ZIndex: =75

        sagsNrTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: ="ex) 23.05-02"
            PaddingLeft: =5
            Size: =9
            Visible: =visReg
            Width: =115
            X: =309
            Y: =113
            ZIndex: =76

        prjNameTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =24
            HintText: ="ex) Tværagervej 33"
            PaddingLeft: =5
            Size: =9
            Visible: =visReg
            Width: =658
            X: =436
            Y: =113
            ZIndex: =77

        Label11 As label:
            Height: =18
            Size: =8
            Text: ="Sagsnr."
            Visible: =visReg
            Width: =101
            X: =310
            Y: =92
            ZIndex: =78

        Label11_2 As label:
            Height: =18
            Size: =8
            Text: ="Projektnavn"
            Visible: =visReg
            Width: =101
            X: =436
            Y: =92
            ZIndex: =79

        Label11_3 As label:
            FontWeight: =FontWeight.Bold
            Height: =18
            Size: =15
            Text: ="NYT PROJEKT"
            Visible: =visReg
            Width: =200
            X: =286
            Y: =59
            ZIndex: =80

        Rectangle7_10 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            Fill: =RGBA(0, 0, 0, 1)
            Height: =1.5
            Visible: =visReg
            Width: =817
            X: =290
            Y: =153
            ZIndex: =81

        Label11_4 As label:
            Color: =RGBA(128, 128, 128, 1)
            Height: =22
            Size: =10
            Text: ="Nøgleinformation"
            Visible: =visReg
            X: =285
            Y: =156
            ZIndex: =82

        Label11_5 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Projektleder"
            Visible: =visReg
            Width: =101
            X: =310
            Y: =185
            ZIndex: =83

        plDD As dropdown:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            Default: =First(prjLeaderTable).DisplayName
            Fill: =RGBA(184, 204, 214, 1)
            Height: =25
            Items: |-
                =Left(Upper(prjLeaderTable.Email), 3)
                
                /*
                ForAll(Filter(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, 
                    ThisRecord.GivenName = "Elmira" ||
                    ThisRecord.GivenName = "Jannie" ||
                    //ThisRecord.GivenName = "Joonseok" || 
                    ThisRecord.GivenName = "Kristel" || 
                    ThisRecord.GivenName = "Matias" ||
                    ThisRecord.GivenName = "Pawel"
                ), Left(Upper(ThisRecord.Mail), 3))
                
                */
                //Choices([@'Project List'].projectLeader)
            OnChange: |-
                =Switch(
                    plDD.Selected.Value,
                    "EVI", Set(selectedPLinRegist, LookUp(prjLeaderTable, ThisRecord.DisplayName = "Elmira Vilain")),
                    "JKH", Set(selectedPLinRegist, LookUp(prjLeaderTable, ThisRecord.DisplayName = "Jannie Grønneberg Kass Hauge")),
                    "KRE", Set(selectedPLinRegist, LookUp(prjLeaderTable, ThisRecord.DisplayName = "Kristel Reseke")),
                    "MLC", Set(selectedPLinRegist, LookUp(prjLeaderTable, ThisRecord.DisplayName = "Matias Labarca Clausen")),
                    "PZB", Set(selectedPLinRegist, LookUp(prjLeaderTable, ThisRecord.DisplayName = "Pawel Zboinski"))
                );
                
                Set(recordColumns, plDD.Selected);
                
                /*
                Switch(
                    plDD.Selected.Value,
                    "EVI", Set(selectedPLinRegist, JSON(LookUp(prjLeaderTable, ThisRecord.DisplayName = "Elmira Vilain"))),
                    "JKH", Set(selectedPLinRegist, JSON(LookUp(prjLeaderTable, ThisRecord.DisplayName = "Jannie Grønneberg Kass Hauge"))),
                    "KRE", Set(selectedPLinRegist, JSON(LookUp(prjLeaderTable, ThisRecord.DisplayName = "Kristel Reseke"))),
                    "MLC", Set(selectedPLinRegist, JSON(LookUp(prjLeaderTable, ThisRecord.DisplayName = "Matias Labarca Clausen"))),
                    "PZB", Set(selectedPLinRegist, JSON(LookUp(prjLeaderTable, ThisRecord.DisplayName = "Pawel Zboinski")))
                );
                
                Switch(
                    plDD.Selected.Value,
                    "EVI", Set(selectedPLinRegist, 
                    {DisplayName: "Elmira Vilain", Claims: Text(Blank()), Department: Text(Blank()), Email: "evi@aticon.dk", JobTitle: Text(Blank()), Picture: Blank()}),
                    "JKH", Set(selectedPLinRegist, 
                    {DisplayName: "Jannie Grønneberg Kass Hauge", Claims:Text(Blank()), Department: Text(Blank()), Email: "jkh@aticon.dk", JobTitle: Text(Blank()), Picture: Blank()}),
                    "KRE", Set(selectedPLinRegist, 
                    {DisplayName: "Kristel Reseke", Claims:Text(Blank()), Department: Text(Blank()), Email: "kre@aticon.dk", JobTitle: Text(Blank()), Picture: Blank()}),
                    "MLC", Set(selectedPLinRegist, 
                    {DisplayName: "Matias Labarca Clausen", Claims:Text(Blank()), Department: Text(Blank()), Email: "mlc@aticon.dk", JobTitle: Text(Blank()), Picture: Blank()}),
                    "PZB", Set(selectedPLinRegist, 
                    {DisplayName: "Pawel Zboinski", Claims:Text(Blank()), Department: Text(Blank()), Email: "pzb@aticon.dk", JobTitle: Text(Blank()), Picture: Blank()})
                )
                */
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =80
            X: =308
            Y: =207
            ZIndex: =84

        Label11_6 As label:
            Height: =18
            Size: =8
            Text: ="Opdragsgiver"
            Visible: =visReg
            Width: =101
            X: =432
            Y: =185
            ZIndex: =85

        Label11_7 As label:
            Height: =18
            Size: =8
            Text: ="Bygherre"
            Visible: =visReg
            Width: =101
            X: =655
            Y: =185
            ZIndex: =86

        clientTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: ="ex) AABERG ARKITEKTER"
            PaddingLeft: =5
            Size: =9
            Visible: =visReg
            Width: =180
            X: =436
            Y: =207
            ZIndex: =87

        bygherreTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: ="ex) OLE HANSEN (PRIVAT)"
            PaddingLeft: =5
            Size: =9
            Visible: =visReg
            Width: =180
            X: =656
            Y: =207
            ZIndex: =88

        Label11_8 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="ProjektKategori"
            Visible: =visReg
            Width: =160
            X: =308
            Y: =246
            ZIndex: =89

        bygcategoryDD As dropdown:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            Default: =First(bygCategoriTable).original
            Fill: =RGBA(202, 202, 202, 1)
            Height: =25
            Items: |
                =bygCategoriTable.style
                //Choices([@'Project List'].bygCategories)
            OnChange: |-
                =Switch(
                    bygcategoryDD.Selected.style,
                    Upper("Enfamiliehus"), Set(selectedbygCategory_regist, {Value: "Enfamiliehus"}),
                    Upper("Erhverv"), Set(selectedbygCategory_regist, {Value: "Erhverv"}),
                    Upper("Etagebyggeri - bolig"), Set(selectedbygCategory_regist, {Value: "Etagebyggeri - bolig"}),
                    Upper("Etagebyggeri - erhverv"), Set(selectedbygCategory_regist, {Value: "Etagebyggeri - erhverv"}),
                    Upper("Pavilloner"), Set(selectedbygCategory_regist, {Value: "Pavilloner"}),
                    Upper("Andet"), Set(selectedbygCategory_regist, {Value: "Andet"})
                )
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =200
            X: =308
            Y: =266
            ZIndex: =90

        Label11_9 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="KON-klasse"
            Visible: =visReg
            Width: =160
            X: =789
            Y: =246
            ZIndex: =91

        conClassDD As dropdown:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            Fill: =RGBA(202, 202, 202, 1)
            Height: =25
            Items: =ForAll(Choices('Project List'.Konstruktionsklasse), Upper(ThisRecord.Value))
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =150
            X: =789
            Y: =266
            ZIndex: =92

        Label11_10 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Projekttype"
            Visible: =visReg
            Width: =160
            X: =308
            Y: =305
            ZIndex: =93

        prjTypeDD As dropdown:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            Default: =First(prjTypeTable).original
            Fill: =RGBA(202, 202, 202, 1)
            Height: =25
            Items: |-
                =prjTypeTable.style
                //Choices([@'Project List'].projectType)
            OnChange: |-
                =Switch(
                    prjTypeDD.Selected.style,
                    Upper("Nybyggeri"), Set(selectedPrjType_regist, {Value: "Nybyggeri"}),
                    Upper("Tilbygning"), Set(selectedPrjType_regist, {Value: "Tilbygning"}),
                    Upper("Renovering"), Set(selectedPrjType_regist, {Value: "Renovering"}),
                    Upper("Prækvalificering"), Set(selectedPrjType_regist, {Value: "Prækvalificering"}),
                    Upper("Konkurrence"), Set(selectedPrjType_regist, {Value: "Konkurrence"}),
                    Upper("Pavillon (standard)"), Set(selectedPrjType_regist, {Value: "Pavillon (standard)"}),
                    Upper("Pavillon (ikke-standard)"), Set(selectedPrjType_regist, {Value: "Pavillon (ikke-standard)"}),
                    Upper("Standarddok."), Set(selectedPrjType_regist, {Value: "Standarddok."}),
                    Upper("Diverse"), Set(selectedPrjType_regist, {Value: "Diverse"})
                )
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =200
            X: =308
            Y: =324
            ZIndex: =94

        Label11_11 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="BRAND-klasse"
            Visible: =visReg
            Width: =160
            X: =789
            Y: =305
            ZIndex: =95

        brandClassDD As dropdown:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            Fill: =RGBA(202, 202, 202, 1)
            Height: =25
            Items: =ForAll(Choices('Project List'.Brandklasse), Upper(ThisRecord.Value))
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =150
            X: =789
            Y: =324
            ZIndex: =96

        Label11_12 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Entreprise"
            Visible: =visReg
            Width: =160
            X: =551
            Y: =246
            ZIndex: =97

        entrePriseDD As dropdown:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            Default: =First(entrepriseTable).original
            Fill: =RGBA(202, 202, 202, 1)
            Height: =25
            Items: |-
                =entrepriseTable.style
                //Choices([@'Project List'].Entreprise)
            OnChange: |-
                =Switch(
                    entrePriseDD.Selected.style,
                    Upper("Totalentreprise"), Set(selectedEntreprise_regist, {Value: "Totalentreprise"}),
                    Upper("Hovedentreprise"), Set(selectedEntreprise_regist, {Value: "Hovedentreprise"}),
                    Upper("Stor-/fagentreprise"), Set(selectedEntreprise_regist, {Value: "Stor-/fagentreprise"})
                )
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =200
            X: =551
            Y: =266
            ZIndex: =98

        Label11_13 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Rådgivning"
            Visible: =visReg
            Width: =160
            X: =551
            Y: =305
            ZIndex: =99

        radgivningDD As dropdown:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            Default: =First(radgivningTable).original
            Fill: =RGBA(202, 202, 202, 1)
            Height: =25
            Items: |-
                =radgivningTable.style
                //ForAll(Choices('Project List'.Rådgivning), Upper(ThisRecord.Value))
            OnChange: |-
                =Switch(
                    radgivningDD.Selected.style,
                    Upper("TR"), Set(selectedradgivning_regist, {Value: "TR"}),
                    Upper("HR (ARK)"), Set(selectedradgivning_regist, {Value: "HR (ARK)"}),
                    Upper("HR (KON)"), Set(selectedradgivning_regist, {Value: "HR (KON)"}),
                    Upper("UR til ARK"), Set(selectedradgivning_regist, {Value: "UR til ARK"}),
                    Upper("UR til ING"), Set(selectedradgivning_regist, {Value: "UR til ING"})
                )
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =200
            X: =551
            Y: =324
            ZIndex: =100

        Rectangle7_11 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            Fill: =RGBA(0, 0, 0, 1)
            Height: =1.5
            Visible: =visReg
            Width: =817
            X: =290
            Y: =497
            ZIndex: =101

        Label11_14 As label:
            Color: =RGBA(128, 128, 128, 1)
            Height: =22
            Size: =10
            Text: ="Faser og ansvarsområder"
            Visible: =visReg
            Width: =250
            X: =285
            Y: =498
            ZIndex: =102

        Gallery6 As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            Height: =28
            Items: |-
                =Table(
                    {phase:"Forundersøgelser", short: "FOR"},
                    {phase:"Skitseprojekt", short: "SKI"},
                    {phase:"Mynd.projekt", short: "MYN"},
                    {phase:"Hovedprojekt", short: "HOV"},
                    {phase:"Udbudsprojekt", short: "UDB"},
                    {phase:"Udførelse", short: "UDF"},
                    {phase:"Aflevering", short: "AFL"}
                )
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            ShowScrollbar: =false
            TemplatePadding: =2
            TemplateSize: =36
            Visible: =visReg
            Width: =785
            WrapCount: =7
            X: =309
            Y: =529
            ZIndex: =103

            Button5 As button:
                BorderThickness: =0
                Color: =If(ThisItem.short in selectPhaseInRegist.phase, RGBA(0, 0, 0, 1), RGBA(255, 255, 255, 1))
                Fill: =If(ThisItem.short in selectPhaseInRegist.phase, RGBA(184, 204, 214, 1), RGBA(219, 219, 219, 1))
                FocusedBorderThickness: =0
                Font: =Font.Lato
                FontWeight: =FontWeight.Bold
                Height: =22
                OnSelect: |-
                    =If(ThisItem.short in selectPhaseInRegist.phase, 
                        Remove(selectPhaseInRegist, LookUp(selectPhaseInRegist, ThisRecord.phase = ThisItem.short)), 
                        Patch(selectPhaseInRegist, Defaults(selectPhaseInRegist), {phase: ThisItem.short, deadline: Text(Blank()), task: taskTable})
                    );
                    
                    ClearCollect(assignedPhase, ForAll(selectPhaseInRegist, {phase: ThisRecord.phase}));
                    Set(toSP_json_ProjectList_assignedPhase, JSON(assignedPhase));
                RadiusBottomLeft: =5
                RadiusBottomRight: =5
                RadiusTopLeft: =5
                RadiusTopRight: =5
                Size: =7
                Text: =Upper(ThisItem.phase)
                Width: =Parent.TemplateWidth
                ZIndex: =1

        Gallery7 As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            Height: =139
            Items: |-
                =selectPhaseInRegist
                /*
                Table(
                    {phase:"Forundersøgelser", task: Blank(), deadline: Text(Blank())},
                    {phase:"Skitseprojekt", task: Blank(), deadline: Text(Blank())},
                    {phase:"Mynd.projekt", task: Blank(), deadline: Text(Blank())},
                    {phase:"Hovedprojekt", task: Blank(), deadline: Text(Blank())},
                    {phase:"Udbudsprojekt", task: Blank(), deadline: Text(Blank())},
                    {phase:"Udførelse", task: Blank(), deadline: Text(Blank())},
                    {phase:"Aflevering", task: Blank(), deadline: Text(Blank())}
                )
                */
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            TemplateSize: =59
            Visible: =visReg
            Width: =784
            X: =310
            Y: =560
            ZIndex: =104

            phaseName As label:
                Font: =Font.Lato
                FontWeight: =FontWeight.Semibold
                Height: =20
                OnSelect: =Select(Parent)
                Size: =9
                Text: |-
                    =Switch(
                        ThisItem.phase,
                        "FOR", "Forundersøgelser",
                        "SKI", "Skitseprojekt",
                        "MYN", "Myndighedsprojekt",
                        "HOV", "Hovedprojekt",
                        "UDB", "Udbudsprojekt",
                        "UDF", "Udførelse",
                        "AFL", "Aflevering"
                    )
                Width: =213
                ZIndex: =1

            Label12_1 As label:
                Font: =Font.Lato
                Height: =22
                OnSelect: =Select(Parent)
                Size: =9
                Text: |-
                    ="Deadline: "
                Width: =65
                X: =598
                Y: =20
                ZIndex: =2

            taskSelectBox As gallery.galleryHorizontal:
                '#CopilotOverlayLabel': ="Filtered"
                DelayItemLoading: =true
                Height: =32
                Items: |-
                    =ThisItem.task
                    //LookUp(selectPhaseInRegist, ThisRecord.phase = phaseName.Text).task
                LoadingSpinner: =LoadingSpinner.Data
                TemplatePadding: =2
                TemplateSize: =65
                Width: =477
                Y: =18
                ZIndex: =5

                Checkbox3 As checkbox:
                    CheckboxBorderColor: =RGBA(77, 77, 77, 1)
                    CheckboxSize: =18
                    CheckmarkFill: =RGBA(255, 0, 0, 1)
                    Default: =LookUp(LookUp(selectPhaseInRegist, ThisRecord.phase = phaseName_short.Text).task, ThisRecord.value = ThisItem.value).mark
                    Height: =24
                    OnCheck: |-
                        =With(
                            {parent: LookUp(selectPhaseInRegist, ThisRecord.phase = phaseName_short.Text)},
                            UpdateIf(parent.task, ThisRecord.value = ThisItem.value, {mark: true})
                        )
                    OnSelect: =Select(Parent)
                    OnUncheck: |-
                        =With(
                            {parent: LookUp(selectPhaseInRegist, ThisRecord.phase = phaseName.Text)},
                            UpdateIf(parent.task, ThisRecord.value = ThisItem.value, {mark: false})
                        )
                    Size: =8
                    Text: =ThisItem.value
                    Width: =60
                    ZIndex: =3

            phaseName_short As label:
                Font: =Font.Lato
                FontWeight: =FontWeight.Semibold
                Height: =20
                OnSelect: =Select(Parent)
                Size: =9
                Text: =ThisItem.phase
                Visible: =false
                Width: =213
                X: =213
                ZIndex: =6

            phaseDeadlineinRegist_text As label:
                DisplayMode: =displayMode
                Font: =Font.'Open Sans Condensed'
                FontWeight: =FontWeight.Lighter
                Height: =23
                Size: =11
                Text: =Text(DateValue(LookUp(selectPhaseInRegist, ThisRecord.phase = phaseName_short.Text).deadline), "dd/mm/yyyy")
                Visible: =visReg
                Width: =95
                X: =663
                Y: =19
                ZIndex: =7

            phaseDeadlineinRegist_btn As datepicker:
                BorderThickness: =0
                Color: =RGBA(0, 0, 0, 0)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(0, 0, 0, 0)
                DisabledFill: =RGBA(0, 0, 0, 0)
                DisplayMode: |-
                    =DisplayMode.Edit
                    //If(LookUp(selectPhaseInRegist, ThisRecord.phase = phaseName_short.Text).deadline = Text(Blank()), DisplayMode.Edit, DisplayMode.Disabled)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =24
                IconBackground: =RGBA(237, 237, 237, 0)
                IconFill: =If(LookUp(selectPhaseInRegist, ThisRecord.phase = phaseName_short.Text).deadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0))
                OnChange: |+
                    =Set(selectedIndvDeadline, phaseDeadlineinRegist_btn.SelectedDate);
                    
                    UpdateIf(selectPhaseInRegist, ThisRecord.phase = phaseName_short.Text, {deadline: phaseDeadlineinRegist_btn.SelectedDate});
                    
                    /*
                    //ClearCollect(selPrj_logCollection, ThisItem.log);
                    Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                        {
                            date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                            text: "Individuel deadline sat til " & Text(selectedIndvDeadline, "dd-mm-yyyy")
                        }
                    );
                    
                    
                    Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = ThisRecord.docs, {log: A.log})),
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = ThisRecord.docs, {log: A.log})),
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = ThisRecord.docs, {log: A.log})),
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = ThisRecord.docs, {log: A.log})),
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = ThisRecord.docs, {log: A.log})),
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = ThisRecord.docs, {log: A.log})),
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                        ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = ThisRecord.docs, {log: A.log}))
                    );
                    
                    Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                        {
                            task: 
                                [{
                                ARK: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"),
                                KON: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"),
                                BRA: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"),
                                MYN: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"),
                                BÆR: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"),
                                VVS: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"),
                                UDF: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf")
                                }]
                        }
                    );
                    */
                    
                OnSelect: =
                PaddingLeft: =3
                PaddingRight: =0
                Size: =8
                StartYear: =2010
                Visible: =visReg
                Width: =phaseDeadlineinRegist_text.Width
                X: =663
                Y: =19
                ZIndex: =8

        Rectangle7_12 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            Fill: =RGBA(0, 0, 0, 1)
            Height: =1.5
            Visible: =visReg
            Width: =817
            X: =290
            Y: =376
            ZIndex: =105

        Label11_15 As label:
            Color: =RGBA(128, 128, 128, 1)
            Height: =22
            Size: =10
            Text: ="Ansvarlige aktører"
            Visible: =visReg
            Width: =250
            X: =285
            Y: =378
            ZIndex: =106

        Label11_16 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Entreprenør"
            Visible: =visReg
            Width: =101
            X: =310
            Y: =412
            ZIndex: =107

        entrepTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: =""
            PaddingLeft: =5
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =150
            X: =309
            Y: =430
            ZIndex: =108

        Label11_17 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Arkitekt"
            Visible: =visReg
            Width: =101
            X: =468
            Y: =412
            ZIndex: =109

        archiTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: ="ex) ATICON"
            PaddingLeft: =5
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =150
            X: =467
            Y: =430
            ZIndex: =110

        Label11_18 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Ingeniør"
            Visible: =visReg
            Width: =101
            X: =626
            Y: =412
            ZIndex: =111

        enginrTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: ="ex) ATICON"
            PaddingLeft: =5
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =150
            X: =625
            Y: =430
            ZIndex: =112

        Label11_19 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Brand"
            Visible: =visReg
            Width: =101
            X: =784
            Y: =412
            ZIndex: =113

        brndTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: ="ex) ATICON"
            PaddingLeft: =5
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =150
            X: =783
            Y: =430
            ZIndex: =114

        Label11_20 As label:
            Height: =18
            PaddingLeft: =0
            Size: =8
            Text: ="Bæredygtighed"
            Visible: =visReg
            Width: =101
            X: =945
            Y: =412
            ZIndex: =115

        baerTextInput As text:
            BorderThickness: =0
            Default: =""
            Fill: =RGBA(237, 237, 237, 1)
            FocusedBorderThickness: =0
            Height: =25
            HintText: ="ex) ATICON"
            PaddingLeft: =5
            Reset: =true
            Size: =9
            Visible: =visReg
            Width: =150
            X: =944
            Y: =430
            ZIndex: =116

    Group9 As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =229

        prjGenInfo_1 As button:
            BorderThickness: =0
            DisabledColor: =RGBA(0, 0, 0, 1)
            DisabledFill: =RGBA(202, 202, 202, 1)
            DisplayMode: |-
                =If(
                    User().Email = "jkh@aticon.dk" || 
                    User().Email = "jpa@aticon.dk" ||
                    Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                    DisplayMode.Edit, DisplayMode.Disabled
                )
            Fill: =RGBA(255, 255, 255, 1)
            FocusedBorderThickness: =0
            FontWeight: =FontWeight.Normal
            Height: =263
            HoverFill: =RGBA(0, 0, 0, 1)
            OnSelect: |-
                =Set(visTaskCategorySelect, !visTaskCategorySelect);
                //Set(selectedCategory, Blank())
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =9
            Text: |-
                ="FAGOMRAÅDER i
                DENNE FASE"
            Visible: =If(visPlan = true, false, visManagerEdit, visTaskCategorySelect)
            Width: =120
            X: =266
            Y: =166
            ZIndex: =129

        categorySelGallery As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            Height: =258
            Items: |-
                =Table(
                    {task: "ARK", name: "Arkitektrådgivning"},
                    {task: "KON", name: "Konstruktionsrådgivning"},
                    {task: "BRA", name: "Brandrådgivning"},
                    {task: "MYN", name: "Myndighedsbehandling"},
                    {task: "BÆR", name: "Bæredygtighedsrådgivning"},
                    {task: "VVS", name: "VVS-rådgivning"},
                    {task: "UDF", name: "Udførelsesrådgivning"}
                )
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            TemplateSize: =31
            Visible: =If(visPlan = true, false, visManagerEdit, visTaskCategorySelect)
            Width: =120
            X: =266
            Y: =171
            ZIndex: =130

            categoryCheckbox As checkbox:
                CheckboxBorderColor: =RGBA(0, 0, 0, 1)
                CheckboxSize: =20
                CheckmarkFill: =RGBA(127, 178, 57, 1)
                Default: =ThisItem.task in First(phaseToSeeByPrj).assignedTasks
                Height: =31
                OnCheck: |-
                    =Patch(phaseToSeeByPrj_assignedTaskScope, Defaults(phaseToSeeByPrj_assignedTaskScope), {value: categorySelGallery.Selected.task});
                    UpdateIf(phaseToSeeByPrj, true, {assignedTasks: phaseToSeeByPrj_assignedTaskScope});
                OnSelect: =Select(Parent)
                OnUncheck: |-
                    =RemoveIf(phaseToSeeByPrj_assignedTaskScope, ThisRecord.value = ThisItem.task);
                    UpdateIf(phaseToSeeByPrj, true, {assignedTasks: phaseToSeeByPrj_assignedTaskScope});
                Size: =8
                Text: =ThisItem.task
                Width: =105
                X: =4
                ZIndex: =1

    Group10 As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =230

        Rectangle7_2 As rectangle:
            DisplayMode: =displayMode
            Fill: =RGBA(245, 245, 242, 1)
            Height: =635
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =190
            X: =29
            Y: =122
            ZIndex: =4

        Label1_17 As label:
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Bold
            Height: =18
            Size: =9
            Text: |-
                =//"Progress of the phase, " & First(selectedPrj).prjPhase
                "Deadline:"
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =144
            X: =44
            Y: =417
            ZIndex: =30

        Label1_19 As label:
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Bold
            Height: =26
            Size: =9
            Text: |-
                ="Fase:"
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =144
            X: =44
            Y: =128
            ZIndex: =31

        colorCode1 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            DisplayMode: =displayMode
            Fill: =If(DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0, RGBA(175, 55, 67, 1), RGBA(190, 180, 105, 1))
            Height: =10
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =10
            X: =61
            Y: =349
            ZIndex: =51

        colorCode2 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            DisplayMode: =displayMode
            Fill: =If(DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0, RGBA(209, 149, 154, 1), RGBA(215, 210, 175, 1))
            Height: =colorCode1.Height
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =colorCode1.Width
            X: =61
            Y: =364
            ZIndex: =52

        colorCode3 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            DisplayMode: =displayMode
            Fill: =RGBA(255, 255, 255, 1)
            Height: =colorCode1.Height
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =colorCode1.Width
            X: =61
            Y: =379
            ZIndex: =53

        Label1_26 As label:
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Lighter
            Height: =15
            Size: =8
            Text: ="Udført og kontrolleret"
            Visible: =If(visPlan = true, false, visManagerEdit)
            X: =73
            Y: =348
            ZIndex: =54

        Label1_27 As label:
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Lighter
            Height: =15
            Size: =8
            Text: ="Udført, mangler KS"
            Visible: =If(visPlan = true, false, visManagerEdit)
            X: =73
            Y: =362
            ZIndex: =55

        Label1_39 As label:
            DisplayMode: =displayMode
            FontWeight: =FontWeight.Lighter
            Height: =15
            Size: =8
            Text: ="Ikke udført"
            Visible: =If(visPlan = true, false, visManagerEdit)
            X: =73
            Y: =376
            ZIndex: =56

        Button2_1 As button:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 1)
            DisplayMode: =displayMode
            Fill: |-
                =If(
                    DateDiff(Today(), First(phaseToSeeByPrj).deadline, TimeUnit.Days) < 0, RGBA(204, 143, 148, 1), 
                    RGBA(190, 180, 105, 1)
                )
            FocusedBorderThickness: =0
            FontWeight: =FontWeight.Normal
            Height: =20
            HoverFill: =RGBA(0, 0, 0, 1)
            OnSelect: |-
                =Set(visDDmenu_phaseList, !visDDmenu_phaseList);
                
                
                Set(visDDmenu_phaseChange, false);
                Set(visDDmenu_PL, false);
                Set(visDDmenu_bygCategory, false);
                Set(visDDmenu_konklasse, false); 
                Set(visDDmenu_brandklasse, false);
                Set(visDDmenu_enterprise, false);
                Set(visDDmenu_radgivning, false); 
                
                Set(visTaskCategorySelect, false);
                Set(visPressedAddingTask, false);
                
                Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =9
            Text: |-
                =Switch(
                    selectedPrjPhase,
                    "FOR", "FORUNDERSØGELSER",
                    "SKI", "SKITSEFORSLAG",
                    "MYN", "MYNDIGHEDSPROJEKT",
                    "HOV", "HOVEDPROJEKTERING",
                    "UDB", "UDBUDSPROJEKT",
                    "UDF", "UDFØRELSE",
                    "AFL", "AFLEVERING"
                )
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =151
            X: =49
            Y: =150
            ZIndex: =57

        donutChart1 As image:
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: =displayMode
            Height: =163
            Image: |
                =If(
                    DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0,
                    IfError(
                        With(
                            {segmentPercentage:
                            Sum(opgaver_selPrj_allTasks, progressByHours)/ Sum(opgaver_selPrj_allTasks, assignedHours)
                            }, 
                            "data:image/svg+xml," & 
                            EncodeUrl(
                                    "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                        class='donut' xmlns='http://www.w3.org/2000/svg'>
                                        <circle class='donut-hole' cx='21' cy='21' 
                                            r='15.91549430918954' fill='#F5F5F2'></circle>
                                        <circle class='donut-ring' cx='21' cy='21' 
                                            r='15.91549430918954' fill='transparent' 
                                            stroke='#fff' stroke-width='4'></circle>
                                        <circle class='donut-segment' cx='21' cy='21' 
                                            r='15.91549430918954' fill='transparent' 
                                            stroke='#d3979d' stroke-width='4' 
                                            stroke-dasharray='" & 
                                            segmentPercentage * 100 & " " & 
                                            (100 - segmentPercentage * 100) & " " &
                                            "' stroke-dashoffset='25'>
                                            </circle> 
                                    </svg>"
                                )
                        ),
                    ""),
                
                    IfError(
                        With(
                            {segmentPercentage:
                            Sum(opgaver_selPrj_allTasks, progressByHours)/ Sum(opgaver_selPrj_allTasks, assignedHours)
                            }, 
                            "data:image/svg+xml," & 
                            EncodeUrl(
                                    "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                        class='donut' xmlns='http://www.w3.org/2000/svg'>
                                        <circle class='donut-hole' cx='21' cy='21' 
                                            r='15.91549430918954' fill='#F5F5F2'></circle>
                                        <circle class='donut-ring' cx='21' cy='21' 
                                            r='15.91549430918954' fill='transparent' 
                                            stroke='#fff' stroke-width='4'></circle>
                                        <circle class='donut-segment' cx='21' cy='21' 
                                            r='15.91549430918954' fill='transparent' 
                                            stroke='#d9d3ad' stroke-width='4' 
                                            stroke-dasharray='" & 
                                            segmentPercentage * 100 & " " & 
                                            (100 - segmentPercentage * 100) & " " &
                                            "' stroke-dashoffset='25'>
                                            </circle> 
                                    </svg>"
                                )
                        ),
                    "")
                )
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =171
            X: =38
            Y: =184
            ZIndex: =58

        donutChart2 As image:
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: =displayMode
            Height: =163
            Image: |+
                =If(
                    DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0,
                    IfError(
                        With(
                        {segmentPercentage:
                        Sum(Filter(opgaver_selPrj_allTasks, ThisRecord.approval = true), progressByHours) / Sum(opgaver_selPrj_allTasks, assignedHours)
                        }, 
                        "data:image/svg+xml," & 
                            EncodeUrl(
                                "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                    class='donut' xmlns='http://www.w3.org/2000/svg'>
                
                                    <circle class='donut-segment' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#af3743' stroke-width='4' 
                                        stroke-dasharray='" & 
                                        segmentPercentage * 100 & " " & 
                                        (100 - segmentPercentage * 100) & " " &
                                        "' stroke-dashoffset='25'>
                                        </circle> 
                                </svg>"
                            )
                        ), 
                    ""),
                
                    IfError(
                        With(
                        {segmentPercentage:
                        Sum(Filter(opgaver_selPrj_allTasks, ThisRecord.approval = true), progressByHours) / Sum(opgaver_selPrj_allTasks, assignedHours)
                        }, 
                        "data:image/svg+xml," & 
                        EncodeUrl(
                                "<svg width='100%' height='100%' viewBox='0 0 42 42' 
                                    class='donut' xmlns='http://www.w3.org/2000/svg'>
                
                                    <circle class='donut-segment' cx='21' cy='21' 
                                        r='15.91549430918954' fill='transparent' 
                                        stroke='#bfb369' stroke-width='4' 
                                        stroke-dasharray='" & 
                                        segmentPercentage * 100 & " " & 
                                        (100 - segmentPercentage * 100) & " " &
                                        "' stroke-dashoffset='25'>
                                        </circle> 
                                </svg>"
                            )
                        ),
                    "")
                )
                
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =171
            X: =38
            Y: =184
            ZIndex: =59

        Label1_10 As label:
            Align: =Align.Center
            DisplayMode: =displayMode
            Font: =Font.'Open Sans Condensed'
            Height: =24
            Size: =20
            Text: |-
                =IfError(
                    Round(
                        Sum(Filter(opgaver_selPrj_allTasks, ThisRecord.approval=true), progressByHours) / Sum(opgaver_selPrj_allTasks, assignedHours)
                    * 100, 0) & "%", "") 
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =133
            X: =60
            Y: =252
            ZIndex: =60

        phaseSelectGallery As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            Default: |
                =
                Switch(
                    selectedPrjPhase,
                    "FOR", LookUp(Choices('Project List'.projectPhase), ThisRecord.Value = "FOR"),
                    "SKI", LookUp(Choices('Project List'.projectPhase), ThisRecord.Value = "SKI"),
                    "MYN", LookUp(Choices('Project List'.projectPhase), ThisRecord.Value = "MYN"),
                    "HOV", LookUp(Choices('Project List'.projectPhase), ThisRecord.Value = "HOV"),
                    "UDB", LookUp(Choices('Project List'.projectPhase), ThisRecord.Value = "UDB"),
                    "UDF", LookUp(Choices('Project List'.projectPhase), ThisRecord.Value = "UDF"),
                    "AFL", LookUp(Choices('Project List'.projectPhase), ThisRecord.Value = "AFL")
                )
            DelayItemLoading: =true
            Fill: =RGBA(255, 255, 255, 1)
            Height: =192
            Items: =Choices('Project List'.projectPhase)
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            TemplatePadding: =3
            TemplateSize: =24
            Visible: =If(visPlan = true, false, visManagerEdit, visDDmenu_phaseList)
            Width: =151
            X: =49
            Y: =170
            ZIndex: =62

            Button18_3 As button:
                BorderThickness: =0
                Fill: |
                    =If(ThisItem.Value in First(opgaver_selPrj_static).assignedPhase, If(DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0, RGBA(170, 140, 140, 1), RGBA(155, 150, 120, 1)), RGBA(220, 220, 220, 1))
                FocusedBorderThickness: =1
                FontWeight: =FontWeight.Normal
                Height: =24
                HoverFill: =ColorFade(RGBA(50, 50, 50, 1), -20%)
                OnSelect: |-
                    =Switch(
                        phaseSelectGallery.Selected.Value,
                        "FOR", Set(selectedPrjPhase, "FOR"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).FOR),
                        "SKI", Set(selectedPrjPhase, "SKI"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).SKI),
                        "MYN", Set(selectedPrjPhase, "MYN"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).MYN),
                        "HOV", Set(selectedPrjPhase, "HOV"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).HOV),
                        "UDB", Set(selectedPrjPhase, "UDB"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).UDB),
                        "UDF", Set(selectedPrjPhase, "UDF"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).UDF),
                        "AFL", Set(selectedPrjPhase, "AFL"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).AFL)
                    );
                    
                    //The codes below is common both for the editor and viewers
                    ClearCollect(phaseToSeeByPrj,
                        ForAll(Table(ParseJSON(phaseWannaSee)) As secondRecord,
                            {
                                deadline: Text(secondRecord.Value.deadline),                     
                                assignedTasks: ForAll(Table(secondRecord.Value.assignedTasks) As assignedRecord,
                                    {
                                        value: Text(assignedRecord.Value.value)   
                                    }
                                ),             
                                taskCategory: ForAll(Table(secondRecord.Value.task) As thirdRecord,
                                    { 
                                        ARK: ForAll(Table(thirdRecord.Value.ARK) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        KON: ForAll(Table(thirdRecord.Value.KON) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        BRA: ForAll(Table(thirdRecord.Value.BRA) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        MYN: ForAll(Table(thirdRecord.Value.MYN) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        BÆR: ForAll(Table(thirdRecord.Value.BÆR) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        VVS: ForAll(Table(thirdRecord.Value.VVS) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        ),
                                        UDF: ForAll(Table(thirdRecord.Value.UDF) As forthRecord,
                                            {
                                                assignedHours: Value(forthRecord.Value.assignedHours),
                                                delegation: Value(forthRecord.Value.delegation),
                                                delegation2: Value(forthRecord.Value.delegation2),
                                                docCategory: Text(forthRecord.Value.docCategory),
                                                docs: Text(forthRecord.Value.docs),
                                                fontColor: Text(forthRecord.Value.fontColor),
                                                fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                kommentator: Text(forthRecord.Value.kommentator),
                                                ks: Text(forthRecord.Value.ks),
                                                markColor: Text(forthRecord.Value.markColor),
                                                modtaget: Text(forthRecord.Value.modtaget),
                                                indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                statusMessage: Text(forthRecord.Value.statusMessage),
                                                opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                resources: Text(forthRecord.Value.resources),
                                                slutDato: Text(forthRecord.Value.slutDato),
                                                udsendt: Text(forthRecord.Value.udsendt),
                                                complMark: Boolean(forthRecord.Value.complMark),
                                                readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                rejection: Boolean(forthRecord.Value.rejection),
                                                approval: Boolean(forthRecord.Value.approval),
                                                extSendt: Text(forthRecord.Value.extSendt),
                                                extReceive: Text(forthRecord.Value.extReceive),
                                                log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                    {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                            }
                                        )
                                    }
                                )
                            }
                        )
                    );
                    
                    //I don't remember why the codes below related with 'opgaver' are here
                    //-----------------In case, there is an error making 'No name projects'
                    RemoveIf(opgaver, prjnavn = Blank());
                    //-----------------For numbering the Projects. Could be useful to prioritize the projects.
                    ClearCollect(opgaver,
                        ForAll(Sequence(CountRows(opgaver)) As ThisSequence, 
                            Patch(Last(FirstN(opgaver, ThisSequence.Value)), {rowNumberPlanning: ThisSequence.Value})
                        )
                    );
                    ClearCollect(opgaverWhole, Ungroup(opgaver, currentPhaseTask));
                    //I don't remember why the codes above related with 'opgaver' are here
                    
                    
                    ClearCollect(opgaver_selPrj_taskCategory, First(phaseToSeeByPrj).taskCategory);
                    ClearCollect(opgaver_selPrj_allTasks, 
                        First(opgaver_selPrj_taskCategory).ARK, First(opgaver_selPrj_taskCategory).KON, First(opgaver_selPrj_taskCategory).BRA, 
                        First(opgaver_selPrj_taskCategory).MYN, First(opgaver_selPrj_taskCategory).BÆR, First(opgaver_selPrj_taskCategory).VVS, First(opgaver_selPrj_taskCategory).UDF
                    );
                    ClearCollect(phaseToSeeByPrj_assignedTaskScope, First(phaseToSeeByPrj).assignedTasks);
                    
                    ClearCollect(selPrj_currentPhase_task_A, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"));
                    ClearCollect(selPrj_currentPhase_task_K, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"));
                    ClearCollect(selPrj_currentPhase_task_B, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"));
                    ClearCollect(selPrj_currentPhase_task_M, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"));
                    ClearCollect(selPrj_currentPhase_task_N, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"));
                    ClearCollect(selPrj_currentPhase_task_V, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"));
                    ClearCollect(selPrj_currentPhase_task_U, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf"));
                    
                    
                    Set(visDDmenu_phaseList, !visDDmenu_phaseList);
                    Set(selectedCategory, First(First(phaseToSeeByPrj).assignedTasks).value);
                    Set(visTaskCategorySelect, false);
                    
                    Reset(timerAutoPopUpWindow);
                    
                    Set(activateTimer_AutoGetOutPage, false);
                    Set(activateTimer_AutoGetOutPage, true);
                    Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
                PaddingLeft: =1
                PaddingRight: =1
                RadiusBottomLeft: =6
                RadiusBottomRight: =6
                RadiusTopLeft: =6
                RadiusTopRight: =6
                Size: =9
                Text: |
                    =Switch(
                        ThisItem.Value,
                        "FOR", "FORUNDERSØGELSER",
                        "SKI", "SKITSEFORSLAG",
                        "MYN", "MYNDIGHEDSPROJEKT",
                        "HOV", "HOVEDPROJEKTERING",
                        "UDB", "UDBUDSPROJEKT",
                        "UDF", "UDFØRELSE",
                        "AFL", "AFLEVERING"
                    )
                Width: =145
                ZIndex: =1

        phaseDeadline_text As button:
            Align: =Align.Left
            BorderThickness: =0
            Color: |+
                =If(
                    DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0, RGBA(255, 255, 255, 1),
                    DateDiff(Today(), First(phaseToSeeByPrj).deadline) >= 0 && DateDiff(Today(), First(phaseToSeeByPrj).deadline) <= 14, RGBA(200, 80, 85, 1),
                    RGBA(0, 0, 0, 1)
                )
                
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisabledFill: =RGBA(244, 244, 244, 0)
            DisplayMode: =displayMode
            Fill: |
                =If(
                    First(phaseToSeeByPrj).deadline = Text(Blank()) || First(phaseToSeeByPrj).deadline = Blank(), RGBA(0,0,0,0),
                    If(
                        DateDiff(Today(), First(phaseToSeeByPrj).deadline) < 0, RGBA(190, 80, 85, 1), 
                        DateDiff(Today(), First(phaseToSeeByPrj).deadline) >= 0 && DateDiff(Today(), First(phaseToSeeByPrj).deadline) <= 14, RGBA(0, 80, 85, 0),
                        RGBA(0, 0, 0, 0))  
                )
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =30
            HoverFill: =RGBA(0, 0, 0, 1)
            OnSelect: =
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =20
            Text: |+
                =Text(DateValue(First(phaseToSeeByPrj).deadline), "dd-mm-yyyy")
                
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =115
            X: =47
            Y: =434
            ZIndex: =63

        phaseDeadline_datepicker As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DefaultDate: |-
                =
                //First(phaseToSeeByPrj).deadline
            DisabledBorderColor: =RGBA(255,255,255, 0)
            DisabledColor: =RGBA(166, 166, 166, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: |-
                =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                    If(
                        User().Email = "jkh@aticon.dk" || 
                        User().Email = "jpa@aticon.dk" ||
                        Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                        DisplayMode.Edit, DisplayMode.Disabled
                    )
                )
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =0
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =phaseDeadline_text.Height
            IconBackground: =RGBA(50, 50, 50, 0)
            IconFill: =If(First(phaseToSeeByPrj).deadline = Blank() || First(phaseToSeeByPrj).deadline = Text(Blank()), RGBA(0,0,0,0.2), RGBA(0, 0, 0, 0))
            OnChange: |
                =Patch(phaseToSeeByPrj, First(phaseToSeeByPrj), {deadline: phaseDeadline_datepicker.SelectedDate});
                
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: First(selectedPrj).PL,
                        prjName: First(selectedPrj).prjnavn,
                        prjNr: First(selectedPrj).savsnr,
                        bClass: First(selectedPrj).brandClass,
                        kClass: First(selectedPrj).conClass,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
                
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
                
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {currentPhase: makeJsonCurrentPhase});
                
                If(
                    selectedPrjPhase = "FOR", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {FOR: makeJsonCurrentPhase}),
                    selectedPrjPhase = "SKI", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {SKI: makeJsonCurrentPhase}),
                    selectedPrjPhase = "MYN", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {MYN: makeJsonCurrentPhase}),
                    selectedPrjPhase = "HOV", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {HOV: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDB", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDB: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDF", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDF: makeJsonCurrentPhase}),
                    selectedPrjPhase = "AFL", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {AFL: makeJsonCurrentPhase})
                );
            PaddingLeft: =0
            PaddingTop: =5
            Size: =0
            Visible: |-
                =If(visPlan = true, false, visManagerEdit)
                //, If(selectedCategory = Blank(), true, false))
            Width: =phaseDeadline_text.Width
            X: =47
            Y: =434
            ZIndex: =157

    Group5 As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =230

        tilbudAccept_text As button:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 1)
            DisabledColor: =RGBA(202, 202, 202, 1)
            DisabledFill: =RGBA(244, 244, 244, 0)
            DisplayMode: =displayMode
            Fill: =RGBA(197, 224, 220, 1)
            FontWeight: =FontWeight.Lighter
            Height: =25
            HoverFill: =RGBA(0, 0, 0, 1)
            OnSelect: =Select(tilbudAccept_datepicker)
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =11
            Text: |-
                =//Text(DateValue(First(phaseToSeeByPrj).tilbudAccepteret), "dd-mm-yyyy")
                //Text(DateValue(First(selectedPrj).tilbudAccepted), "dd-mm-yyyy")
                Text(DateValue(LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).tilbudAccepted), "dd-mm-yyyy")
            Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
            Width: =100
            X: =586
            Y: =577
            ZIndex: =67

        tilbudAccept_datepicker As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DefaultDate: |-
                =
                //First(phaseToSeeByPrj).deadline
            DisabledBorderColor: =RGBA(255,255,255, 0)
            DisabledColor: =RGBA(166, 166, 166, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: |-
                =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, 
                    If(
                        User().Email = "jkh@aticon.dk" || 
                        User().Email = "jpa@aticon.dk" ||
                        Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                        DisplayMode.Edit, DisplayMode.Disabled
                    )
                )
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =0
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =tilbudAccept_text.Height
            IconBackground: =RGBA(50, 50, 50, 0)
            IconFill: =RGBA(220, 0, 0, 0)
            OnChange: |+
                =//Patch(phaseToSeeByPrj, First(phaseToSeeByPrj), {tilbudAccepteret: tilbudAccept_datepicker.SelectedDate});
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {tilbudAccepted: tilbudAccept_datepicker.SelectedDate});
                
                
            PaddingLeft: =0
            PaddingTop: =5
            Size: =0
            Visible: =If(visPlan = true, false, visManagerEdit, If(selectedCategory = Blank(), true, false))
            Width: =tilbudAccept_text.Width
            X: =586
            Y: =577
            ZIndex: =68

    Group2 As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =233

        Rectangle8_2 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            BorderStyle: =BorderStyle.Dashed
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Fill: =RGBA(255, 255, 255, 1)
            Height: =95
            Visible: =visRSCard
            Width: =250
            X: =1100
            Y: =503
            ZIndex: =133

        readyForKSToggle As toggleSwitch:
            Default: |
                =Switch(
                    selectedCategory, 
                    "ARK", LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).readyForKS,
                    "KON", LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).readyForKS,
                    "BRA", LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).readyForKS,
                    "MYN", LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).readyForKS,
                    "BÆR", LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).readyForKS,
                    "VVS", LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).readyForKS,
                    "UDF", LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).readyForKS
                )
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            FalseText: ="Nej"
            FocusedBorderThickness: =1
            Height: =15
            OnChange: |
                =//Set(visRSsaveBtn, true);
            OnCheck: =
            OnSelect: |-
                =Switch(
                    selectedCategory, 
                    "ARK",
                    Switch(readyForKSToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: true, rejection: false, approval: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 1, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                    ),
                    "KON",
                    Switch(readyForKSToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: true, rejection: false, approval: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 1, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                    ),
                    "BRA",
                    Switch(readyForKSToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: true, rejection: false, approval: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 1, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                    ),
                    "MYN",
                    Switch(readyForKSToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: true, rejection: false, approval: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 1, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                    ),
                    "BÆR",
                    Switch(readyForKSToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: true, rejection: false, approval: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 1, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                    ),
                    "VVS",
                    Switch(readyForKSToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: true, rejection: false, approval: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 1, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                    ),
                    "UDF",
                    Switch(readyForKSToggle.Value,
                        true, 
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: true, rejection: false, approval: false, markColor: "I GANG"});
                        SendTeamMessageWhenReadyForKS.Run(
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).GivenName, 
                            selectedOpgave.ks, Lower(selectedOpgave.ks) & "@aticon.dk", selectedPrjName, selectedTask, 
                            selectedPrjPhase, selectedCategory, 1, 
                            LookUp(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, Left(ThisRecord.Mail, 3) = selectedOpgave.resources).Mail, 
                            User().FullName, User().Email, Lower(First(selectedPrj).PL) & "@aticon.dk"),
                        false,
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                    )
                );
                
                Switch(readyForKSToggle.Value,
                        true, Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                            {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: Upper(Left(User().Email, 3)) & " markerede 'Klar til KS'"})
                );
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
                );
            OnUncheck: |-
                =/*
                Switch(
                    selectedCategory, 
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr,
                        {readyForKS: false})
                );
                */
            Size: =9
            TrueFill: =RGBA(221, 79, 14, 1)
            TrueText: ="Ja"
            Visible: =visRSCard
            Width: =60
            X: =1198
            Y: =567
            ZIndex: =136

        opgaveStatus_10 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            Height: =22
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =9
            Strikethrough: =
            Text: ="KLAR TIL KS"
            Visible: =visRSCard
            Width: =78
            X: =1118
            Y: =563
            ZIndex: =137

        opgaveStatus_9 As label:
            BorderColor: =RGBA(0, 0, 0, 1)
            Color: =
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            Height: =24
            Italic: =
            PaddingLeft: =1
            PaddingRight: =0
            Size: =10
            Strikethrough: =
            Text: ="2. RESSOURCE"
            VerticalAlign: =VerticalAlign.Top
            Visible: =visStatusListBox
            Width: =231
            X: =1110
            Y: =506
            ZIndex: =156

    G_taskAssignment As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =235

        Rectangle1_1 As rectangle:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(242, 241, 237, 0.95)
            Height: =768
            Visible: =selTaskPopup
            Width: =1366
            ZIndex: =208

        taskMngBG As rectangle:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(255, 255, 255, 1)
            Height: =624
            Visible: =selTaskPopup
            Width: =613
            X: =722
            Y: =90
            ZIndex: =209

        Icon7_2 As icon.Cancel:
            Fill: =RGBA(230, 230, 230, 1)
            Height: =20
            Icon: =Icon.Cancel
            OnSelect: |-
                =Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
                );
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
                
                Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                    {
                        task: 
                            [{
                            ARK: Filter(opgaver_selPrj_allTasks, docCategory = "ark"),
                            KON: Filter(opgaver_selPrj_allTasks, docCategory = "kon"),
                            BRA: Filter(opgaver_selPrj_allTasks, docCategory = "bra"),
                            MYN: Filter(opgaver_selPrj_allTasks, docCategory = "myn"),
                            BÆR: Filter(opgaver_selPrj_allTasks, docCategory = "bær"),
                            VVS: Filter(opgaver_selPrj_allTasks, docCategory = "vvs"),
                            UDF: Filter(opgaver_selPrj_allTasks, docCategory = "udf")
                            }]
                    }
                );
                
                Reset(weightInput);
                Reset(kommentBox);
                Reset(deadlineCommentBox);
                Set(titleEditor, true);
                Set(selTaskPopup, !selTaskPopup);
                Set(decidedTaskName, Text(Blank()));
                Set(edited_selectedTask, Text(Blank()));
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =selTaskPopup
            Width: =21
            X: =1304
            Y: =106
            ZIndex: =210

        Label8_1 As label:
            Align: =Align.Center
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =18
            Size: =9
            Text: ="Ressource"
            Visible: =selTaskPopup
            Width: =70
            X: =1112
            Y: =171
            ZIndex: =211

        Label8_2 As label:
            Align: =Align.Center
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =18
            Size: =9
            Text: ="Kontrollant"
            Visible: =selTaskPopup
            Width: =77
            X: =1181
            Y: =171
            ZIndex: =212

        Rectangle7_7 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 1)
            Height: =1
            Visible: =selTaskPopup
            Width: =590
            X: =735
            Y: =304
            ZIndex: =213

        Rectangle7_8 As rectangle:
            BorderColor: =RGBA(0, 0, 0, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 1)
            Height: =1
            Visible: =selTaskPopup
            Width: =590
            X: =735
            Y: =441
            ZIndex: =214

        Label8_3 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =18
            Size: =9
            Text: ="Individuel deadline"
            Visible: =selTaskPopup
            Width: =124
            X: =740
            Y: =339
            ZIndex: =215

        Label8_4 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =18
            Size: =9
            Text: ="Kommentar"
            Visible: =selTaskPopup
            Width: =155
            X: =887
            Y: =339
            ZIndex: =216

        Label8_8 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Semibold
            Height: =14
            Size: =9
            Text: ="LOG"
            Visible: =selTaskPopup
            Width: =60
            X: =740
            Y: =470
            ZIndex: =217

        Button19_17 As button:
            BorderThickness: =0
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(153, 172, 169, 1)
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Normal
            Height: =26
            HoverFill: =ColorFade(RGBA(255, 0, 0, 0.9), -30%)
            OnSelect: |
                =Set(visUserGal, !visUserGal);
                Set(visUserGal2, false);
                //If(visUserGal = false, Set(displayMode, DisplayMode.Edit), Set(displayMode, DisplayMode.Disabled));
                //If(visWeekPlan = true, Set(visWeekPlan, false), Set(visWeekPlan, true));
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =9
            Text: |-
                =//Upper(selectedOpgave.resources)
                Switch(selectedCategory,
                    "ARK",
                    Upper(LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).resources),
                    "KON",
                    Upper(LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).resources),
                    "BRA",
                    Upper(LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).resources),
                    "MYN",
                    Upper(LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).resources),
                    "BÆR",
                    Upper(LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).resources),
                    "VVS",
                    Upper(LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).resources),
                    "UDF",
                    Upper(LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).resources)
                )
            Visible: =selTaskPopup
            Width: =52
            X: =1121
            Y: =190
            ZIndex: =218

        Button19_18 As button:
            BorderThickness: =0
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(153, 172, 169, 1)
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Normal
            Height: =26
            HoverFill: =ColorFade(RGBA(255, 0, 0, 0.9), -30%)
            OnSelect: |
                =If(visUserGal2 = true, Set(visUserGal2, false), Set(visUserGal2, true));
                Set(visUserGal, false);
                //If(visUserGal2 = false, Set(displayMode, DisplayMode.Edit), Set(displayMode, DisplayMode.Disabled));
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =9
            Text: |-
                =Switch(selectedCategory,
                    "ARK",
                    Upper(LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask && delegation = selectedRowNr).ks),
                    "KON",
                    Upper(LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask && delegation = selectedRowNr).ks),
                    "BRA",
                    Upper(LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask && delegation = selectedRowNr).ks),
                    "MYN",
                    Upper(LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask && delegation = selectedRowNr).ks),
                    "BÆR",
                    Upper(LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask && delegation = selectedRowNr).ks),
                    "VVS",
                    Upper(LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask && delegation = selectedRowNr).ks),
                    "UDF",
                    Upper(LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask && delegation = selectedRowNr).ks)
                )
            Visible: =selTaskPopup
            Width: =52
            X: =1194
            Y: =190
            ZIndex: =219

        logGallery As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Height: =197
            Items: |-
                =Sort(selPrj_logCollection, date, SortOrder.Descending)
                //SortByColumns(selPrj_logCollection, "date", SortOrder.Descending)
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            TemplateSize: =19
            Visible: =selTaskPopup
            Width: =579
            X: =740
            Y: =497
            ZIndex: =220

            Label10 As label:
                FontWeight: =FontWeight.Bold
                Height: =19
                OnSelect: =Select(Parent)
                Size: =9
                Text: =Text(Left(ThisItem.date, 10))
                Width: =80
                ZIndex: =1

            Label10_1 As label:
                Height: =19
                OnSelect: =Select(Parent)
                Size: =9
                Text: =ThisItem.text
                Width: =449
                X: =80
                ZIndex: =2

            Icon9 As icon.Trash:
                Color: =RGBA(149, 149, 149, 1)
                DisplayMode: |-
                    =Switch(selectedCategory,
                        "ARK",
                        If(LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask).complMark = true, DisplayMode.Disabled, DisplayMode.Edit),
                        "KON",
                        If(LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask).complMark = true, DisplayMode.Disabled, DisplayMode.Edit), 
                        "BRA",
                        If(LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask).complMark = true, DisplayMode.Disabled, DisplayMode.Edit),
                        "MYN",
                        If(LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask).complMark = true, DisplayMode.Disabled, DisplayMode.Edit), 
                        "BÆR",
                        If(LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask).complMark = true, DisplayMode.Disabled, DisplayMode.Edit),
                        "VVS",
                        If(LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask).complMark = true, DisplayMode.Disabled, DisplayMode.Edit),
                        "UDF",
                        If(LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask).complMark = true, DisplayMode.Disabled, DisplayMode.Edit)
                    )
                Height: =15
                Icon: =Icon.Trash
                OnSelect: =Remove(selPrj_logCollection, ThisItem);
                Visible: |-
                    =If(
                        User().Email = "jkh@aticon.dk" || 
                        User().Email = "jpa@aticon.dk" ||
                        Upper(Left(User().Email, 3)) = First(selectedPrj).PL,
                        true, false
                    )
                Width: =15
                X: =539
                ZIndex: =3

        weightInput As text:
            Align: =Align.Center
            BorderColor: =RGBA(219, 219, 219, 1)
            BorderThickness: =0.1
            Default: |-
                =Switch(selectedCategory,
                    "ARK",
                    LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).assignedHours,
                    "KON",
                    LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).assignedHours, 
                    "BRA",
                    LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).assignedHours,
                    "MYN",
                    LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).assignedHours, 
                    "BÆR",
                    LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).assignedHours,
                    "VVS",
                    LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).assignedHours,
                    "UDF",
                    LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).assignedHours
                )
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =1
            Format: =TextFormat.Number
            Height: =26
            OnChange: |-
                =Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, 
                    {assignedHours: Value(weightInput.Text), progressByHours:opgaveProgress/100 * Value(weightInput.Text)}),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, 
                    {assignedHours: Value(weightInput.Text), progressByHours:opgaveProgress/100 * Value(weightInput.Text)}),  
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, 
                    {assignedHours: Value(weightInput.Text), progressByHours:opgaveProgress/100 * Value(weightInput.Text)}),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, 
                    {assignedHours: Value(weightInput.Text), progressByHours:opgaveProgress/100 * Value(weightInput.Text)}),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, 
                    {assignedHours: Value(weightInput.Text), progressByHours:opgaveProgress/100 * Value(weightInput.Text)}),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, 
                    {assignedHours: Value(weightInput.Text), progressByHours:opgaveProgress/100 * Value(weightInput.Text)}),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, 
                    {assignedHours: Value(weightInput.Text), progressByHours:opgaveProgress/100 * Value(weightInput.Text)})
                );
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
            OnSelect: =
            PaddingLeft: =3
            Size: =8
            Visible: =selTaskPopup
            Width: =36
            X: =1119
            Y: =255
            ZIndex: =221

        Label8_14 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =18
            Size: =9
            Text: ="Opgavens vægtning (est. timebrug)"
            Visible: =selTaskPopup
            Width: =206
            X: =1109
            Y: =235
            ZIndex: =222

        indDeadlineText As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =44
            Size: =16
            Text: |+
                =Switch(selectedCategory,
                    "ARK", 
                    If(LookUp(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask).indvDeadline), "dd-mm-yyyy")),    
                    "KON",
                    If(LookUp(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask).indvDeadline), "dd-mm-yyyy")), 
                    "BRA",
                    If(LookUp(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask).indvDeadline), "dd-mm-yyyy")), 
                    "MYN",
                    If(LookUp(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask).indvDeadline), "dd-mm-yyyy")), 
                    "BÆR",
                    If(LookUp(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask).indvDeadline), "dd-mm-yyyy")), 
                    "VVS",
                    If(LookUp(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask).indvDeadline), "dd-mm-yyyy")), 
                    "UDF",
                    If(LookUp(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask).indvDeadline), "dd-mm-yyyy"))
                )
                
                
            Visible: =selTaskPopup
            Width: =98
            X: =744
            Y: =362
            ZIndex: =223

        indvDeadline_btn As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(0, 0, 0, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 0)
            Height: =44
            IconBackground: =RGBA(237, 237, 237, 0)
            IconFill: |+
                =Switch(
                    selectedCategory, 
                    "ARK", 
                    If(LookUp(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "KON", 
                    If(LookUp(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "BRA", 
                    If(LookUp(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "MYN", 
                    If(LookUp(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "BÆR", 
                    If(LookUp(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "VVS", 
                    If(LookUp(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "UDF", 
                    If(LookUp(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask).indvDeadline = Text(Blank()), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0))
                )
                
                
                
            OnChange: |+
                =Set(selectedIndvDeadline, indvDeadline_btn.SelectedDate);
                
                Switch(selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, 
                    {indvDeadline: indvDeadline_btn.SelectedDate}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, 
                    {indvDeadline: indvDeadline_btn.SelectedDate}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask,
                    {indvDeadline: indvDeadline_btn.SelectedDate}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, 
                    {indvDeadline: indvDeadline_btn.SelectedDate}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask,
                    {indvDeadline: indvDeadline_btn.SelectedDate}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask,
                    {indvDeadline: indvDeadline_btn.SelectedDate}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask,
                    {indvDeadline: indvDeadline_btn.SelectedDate})
                );
                
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(),"dd-mm-yyyy hh:mm:ss"),
                        text: "Individuel deadline sat til " & Text(selectedIndvDeadline, "dd-mm-yyyy")
                    }
                );
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = docs && A.delegation = delegation, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = docs && A.delegation = delegation, {log: A.log}))
                );
                
                
                Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                    {
                        task: 
                            [{
                            ARK: Filter(opgaver_selPrj_allTasks, docCategory = "ark"),
                            KON: Filter(opgaver_selPrj_allTasks, docCategory = "kon"),
                            BRA: Filter(opgaver_selPrj_allTasks, docCategory = "bra"),
                            MYN: Filter(opgaver_selPrj_allTasks, docCategory = "myn"),
                            BÆR: Filter(opgaver_selPrj_allTasks, docCategory = "bær"),
                            VVS: Filter(opgaver_selPrj_allTasks, docCategory = "vvs"),
                            UDF: Filter(opgaver_selPrj_allTasks, docCategory = "udf")
                            }]
                    }
                );
                
                
            OnSelect: =
            PaddingLeft: =3
            PaddingRight: =0
            Size: =8
            StartYear: =2010
            Visible: =selTaskPopup
            Width: =98
            X: =744
            Y: =362
            ZIndex: =224

        Icon10_1 As icon.Cancel:
            Color: =RGBA(128, 128, 128, 1)
            DisabledColor: =RGBA(244, 244, 244, 0)
            DisabledFill: =RGBA(220, 220, 220, 0)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Height: =30
            HoverFill: =RGBA(50, 50, 50, 0.3)
            Icon: =Icon.Cancel
            OnSelect: |-
                =Switch(
                    selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: Text(Blank())}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: Text(Blank())}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: Text(Blank())}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: Text(Blank())}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: Text(Blank())}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: Text(Blank())}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {indvDeadline: Text(Blank())})
                );
                
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(),"dd-mm-yyyy hh:mm:ss"),
                        text: "Individuel deadline blev slettet"
                    }
                );
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, delegation = selectedRowNr && docs = selectedTask, {log: selPrj_logCollection});
                );
                
                //Set(selectedOpgave, );
            Visible: =If(selTaskPopup, If(selectedOpgave.indvDeadline <> Text(Blank()), true, false))
            Width: =12
            X: =836
            Y: =369
            ZIndex: =225

        kommentBox As text:
            BorderColor: =RGBA(219, 219, 219, 1)
            BorderThickness: =0.1
            Default: |-
                =Switch(selectedCategory,
                    "ARK",
                    LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).kommentator,
                    "KON",
                    LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).kommentator, 
                    "BRA",
                    LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).kommentator,
                    "MYN",
                    LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).kommentator, 
                    "BÆR",
                    LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).kommentator,
                    "VVS",
                    LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).kommentator,
                    "UDF",
                    LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).kommentator
                )
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =1
            Height: =110
            HoverFill: =RGBA(186, 186, 186, 0.2)
            Mode: =TextMode.MultiLine
            OnChange: |-
                =Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {kommentator: kommentBox.Text}),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {kommentator: kommentBox.Text}),  
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {kommentator: kommentBox.Text}),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {kommentator: kommentBox.Text}),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {kommentator: kommentBox.Text}),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {kommentator: kommentBox.Text}),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {kommentator: kommentBox.Text})
                );
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
            OnSelect: =
            PaddingLeft: =3
            Size: =8
            Visible: =selTaskPopup
            Width: =351
            X: =738
            Y: =171
            ZIndex: =226

        deadlineCommentBox As text:
            BorderColor: =RGBA(219, 219, 219, 1)
            BorderThickness: =0.1
            Default: |-
                =Switch(selectedCategory,
                    "ARK",
                    LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).deadlineComment,
                    "KON",
                    LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).deadlineComment, 
                    "BRA",
                    LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).deadlineComment,
                    "MYN",
                    LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).deadlineComment, 
                    "BÆR",
                    LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).deadlineComment,
                    "VVS",
                    LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).deadlineComment,
                    "UDF",
                    LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).deadlineComment
                )
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =1
            Height: =24
            HoverFill: =RGBA(186, 186, 186, 0.2)
            OnChange: |-
                =Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {deadlineComment: deadlineCommentBox.Text}),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {deadlineComment: deadlineCommentBox.Text}),  
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {deadlineComment: deadlineCommentBox.Text}),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {deadlineComment: deadlineCommentBox.Text}),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {deadlineComment: deadlineCommentBox.Text}),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {deadlineComment: deadlineCommentBox.Text}),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {deadlineComment: deadlineCommentBox.Text})
                );
                UpdateIf(opgaver_selPrj_allTasks, docs = selectedTask && delegation = selectedRowNr, 
                {deadlineComment: deadlineCommentBox.Text});
            OnSelect: =
            PaddingLeft: =3
            Size: =8
            Visible: =selTaskPopup
            Width: =423
            X: =890
            Y: =374
            ZIndex: =227

        Label8_15 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =18
            PaddingLeft: =0
            Size: =10
            Text: ="t"
            Visible: =selTaskPopup
            Width: =15
            X: =1159
            Y: =261
            ZIndex: =228

        userSelectGallery1 As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(255, 255, 255, 0.7)
            Height: =268
            Items: |-
                =controllerList
                /*
                Filter(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, 
                    ThisRecord.GivenName = "Elmira" ||
                    ThisRecord.GivenName = "Jannie" ||
                    //ThisRecord.GivenName = "Joonseok" || 
                    ThisRecord.GivenName = "Kristel" || 
                    ThisRecord.GivenName = "Matias" || 
                    ThisRecord.GivenName = "Pawel" || 
                    ThisRecord.GivenName = "Sara Perez" || 
                    ThisRecord.GivenName = "Torben" 
                )
                */
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            TemplateSize: =24
            Visible: =If(selTaskPopup, If(visUserGal2 = true, true, false))
            Width: =61
            X: =1190
            Y: =218
            ZIndex: =229

            Button18_4 As button:
                BorderThickness: =0
                Color: =RGBA(0, 0, 0, 1)
                Fill: =RGBA(219, 219, 219, 1)
                FocusedBorderThickness: =1
                FontWeight: =FontWeight.Normal
                Height: =24
                OnSelect: |-
                    =Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {ks: Text(userSelectGallery1.Selected.initial)}),
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {ks: Text(userSelectGallery1.Selected.initial)}),
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {ks: Text(userSelectGallery1.Selected.initial)}),
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {ks: Text(userSelectGallery1.Selected.initial)}),
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {ks: Text(userSelectGallery1.Selected.initial)}),
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {ks: Text(userSelectGallery1.Selected.initial)}),
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {ks: Text(userSelectGallery1.Selected.initial)})
                    );
                    
                    Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                        {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: "KS Allocated to " & userSelectGallery1.Selected.givenName});
                    
                    
                    Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection}),
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection}),
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection}),
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection}),
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection}),
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection}),
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection})
                    );
                    
                    Set(visUserGal2, !visUserGal2);
                    Set(displayMode, DisplayMode.Edit);
                PaddingLeft: =1
                PaddingRight: =1
                RadiusBottomLeft: =8
                RadiusBottomRight: =8
                RadiusTopLeft: =8
                RadiusTopRight: =8
                Size: =9
                Text: |-
                    =ThisItem.initial
                    //Upper(Left(ThisItem.initial, Len(ThisItem.initial)-10))
                Width: =51
                ZIndex: =1

        userSelectGallery2 As gallery.galleryVertical:
            '#CopilotOverlayLabel': ="Filtered"
            DelayItemLoading: =true
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(255, 255, 255, 0.8)
            Height: =385
            Items: |-
                =//Office365Users.SearchUserV2({isSearchTermRequired:false}).value
                Filter(Office365Users.SearchUserV2({isSearchTermRequired:false}).value, 
                    ThisRecord.GivenName = "Allan" ||
                    ThisRecord.GivenName = "Elmira" ||
                    ThisRecord.GivenName = "Hamed" ||
                    ThisRecord.GivenName = "Jannie" ||
                    ThisRecord.GivenName = "Joonseok" || 
                    ThisRecord.GivenName = "Kristel" || 
                    ThisRecord.GivenName = "Matias" || 
                    ThisRecord.GivenName = "Markus" ||
                    ThisRecord.GivenName = "Niranjana" ||
                    ThisRecord.GivenName = "Pawel" || 
                    ThisRecord.GivenName = "Sara Perez" || 
                    ThisRecord.GivenName = "Torben" 
                )
            Layout: =Layout.Vertical
            LoadingSpinner: =LoadingSpinner.Data
            TemplateSize: =24
            Visible: =If(selTaskPopup, If(visUserGal = true, true, false))
            Width: =61
            X: =1117
            Y: =218
            ZIndex: =230

            Button18_1 As button:
                BorderThickness: =0
                Color: =RGBA(0, 0, 0, 1)
                Fill: =RGBA(219, 219, 219, 1)
                FocusedBorderThickness: =1
                FontWeight: =FontWeight.Normal
                Height: =24
                OnSelect: |-
                    =Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, 
                            {resources: Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))}),
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, 
                            {resources: Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))}),
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, 
                            {resources: Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))}),
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, 
                            {resources: Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))}),
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, 
                            {resources: Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))}),
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, 
                            {resources: Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))}),
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, 
                            {resources: Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))})
                    );
                    
                    Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                        {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: "Allocated to " & userSelectGallery2.Selected.GivenName});
                    
                    Switch(selectedCategory,
                        "ARK",
                        UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "KON",
                        UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "BRA",
                        UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "MYN",
                        UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "BÆR",
                        UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "VVS",
                        UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                        "UDF",
                        UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {log: selPrj_logCollection});
                    );
                    
                    
                    Set(visUserGal, !visUserGal);
                    Set(displayMode, DisplayMode.Edit);
                PaddingLeft: =1
                PaddingRight: =1
                RadiusBottomLeft: =8
                RadiusBottomRight: =8
                RadiusTopLeft: =8
                RadiusTopRight: =8
                Size: =9
                Text: |-
                    =Upper(Left(ThisItem.Mail, Len(ThisItem.Mail)-10))
                    //Text(Left(userSelectGallery2.Selected.Mail, Len(userSelectGallery2.Selected.Mail)-10))
                Width: =51
                ZIndex: =1

        extKontrol_sendt_text As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =44
            Size: =16
            Text: |+
                =Switch(selectedCategory,
                    "ARK",
                    If(LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask).extSendt = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask).extSendt), "dd-mm-yyyy")),    
                    "KON",
                    If(LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask).extSendt = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask).extSendt), "dd-mm-yyyy")), 
                    "BRA",
                    If(LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask).extSendt = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask).extSendt), "dd-mm-yyyy")), 
                    "MYN",
                    If(LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask).extSendt = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask).extSendt), "dd-mm-yyyy")), 
                    "BÆR",
                    If(LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask).extSendt = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask).extSendt), "dd-mm-yyyy")), 
                    "VVS",
                    If(LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask).extSendt = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask).extSendt), "dd-mm-yyyy")), 
                    "UDF",
                    If(LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask).extSendt = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask).extSendt), "dd-mm-yyyy"))
                )
                
                
            Visible: =false
            Width: =98
            X: =745
            Y: =699
            ZIndex: =231

        extKontrol_sendt_btn As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(0, 0, 0, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 0)
            Height: =44
            IconBackground: =RGBA(237, 237, 237, 0)
            IconFill: |-
                =Switch(
                    selectedCategory, 
                    "ARK", 
                    If(LookUp(selPrj_currentPhase_task_A, docs = selectedTask).extSendt = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_A, docs = selectedTask).extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "KON", 
                    If(LookUp(selPrj_currentPhase_task_K, docs = selectedTask).extSendt = Text(Blank()) ||
                        LookUp(selPrj_currentPhase_task_K, docs = selectedTask).extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "BRA", 
                    If(LookUp(selPrj_currentPhase_task_B, docs = selectedTask).extSendt = Text(Blank()) ||
                        LookUp(selPrj_currentPhase_task_B, docs = selectedTask).extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "MYN", 
                    If(LookUp(selPrj_currentPhase_task_M, docs = selectedTask).extSendt = Text(Blank()) ||
                        LookUp(selPrj_currentPhase_task_M, docs = selectedTask).extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "BÆR", 
                    If(LookUp(selPrj_currentPhase_task_N, docs = selectedTask).extSendt = Text(Blank()) ||
                        LookUp(selPrj_currentPhase_task_N, docs = selectedTask).extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "VVS", 
                    If(LookUp(selPrj_currentPhase_task_V, docs = selectedTask).extSendt = Text(Blank()) ||
                        LookUp(selPrj_currentPhase_task_V, docs = selectedTask).extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "UDF", 
                    If(LookUp(selPrj_currentPhase_task_U, docs = selectedTask).extSendt = Text(Blank()) ||
                        LookUp(selPrj_currentPhase_task_U, docs = selectedTask).extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0))
                )
                
                //If(ThisItem.extSendt = Text(Blank()) || ThisItem.extSendt = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0))
            OnChange: |-
                =Set(selectedExtKSDate, extKontrol_sendt_btn.SelectedDate);
                
                Switch(selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {extSendt: extKontrol_sendt_btn.SelectedDate}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {extSendt: extKontrol_sendt_btn.SelectedDate}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {extSendt: extKontrol_sendt_btn.SelectedDate}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {extSendt: extKontrol_sendt_btn.SelectedDate}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {extSendt: extKontrol_sendt_btn.SelectedDate}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {extSendt: extKontrol_sendt_btn.SelectedDate}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {extSendt: extKontrol_sendt_btn.SelectedDate})
                );
                
                //ClearCollect(selPrj_logCollection, ThisItem.log);
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                        text: "External Kontrol Sendt sat til " & Text(selectedExtKSDate, "dd-mm-yyyy")
                    }
                );
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = ThisRecord.docs, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = ThisRecord.docs, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = ThisRecord.docs, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = ThisRecord.docs, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = ThisRecord.docs, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = ThisRecord.docs, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = ThisRecord.docs, {log: A.log}))
                );
                
                Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                    {
                        task: 
                            [{
                            ARK: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"),
                            KON: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"),
                            BRA: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"),
                            MYN: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"),
                            BÆR: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"),
                            VVS: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"),
                            UDF: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf")
                            }]
                    }
                );
            OnSelect: =
            PaddingLeft: =3
            PaddingRight: =0
            Size: =8
            StartYear: =2010
            Visible: =false
            Width: =98
            X: =745
            Y: =699
            ZIndex: =232

        extKontrol_receive_text As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =44
            Size: =16
            Text: |+
                =Switch(selectedCategory,
                    "ARK",
                    If(LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask).extReceive = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask).extReceive), "dd-mm-yyyy")),    
                    "KON",
                    If(LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask).extReceive = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask).extReceive), "dd-mm-yyyy")), 
                    "BRA",
                    If(LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask).extReceive = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask).extReceive), "dd-mm-yyyy")), 
                    "MYN",
                    If(LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask).extReceive = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask).extReceive), "dd-mm-yyyy")), 
                    "BÆR",
                    If(LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask).extReceive = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask).extReceive), "dd-mm-yyyy")), 
                    "VVS",
                    If(LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask).extReceive = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask).extReceive), "dd-mm-yyyy")), 
                    "UDF",
                    If(LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask).extReceive = Text(Blank()), "", 
                       Text(DateValue(LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask).extReceive), "dd-mm-yyyy"))
                )
                
                
            Visible: =false
            Width: =98
            X: =893
            Y: =699
            ZIndex: =233

        extKontrol_receive_btn As datepicker:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 0)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(0, 0, 0, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 0)
            Height: =44
            IconBackground: =RGBA(237, 237, 237, 0)
            IconFill: |-
                =Switch(
                    selectedCategory, 
                    "ARK", 
                    If(LookUp(selPrj_currentPhase_task_A, docs = selectedTask).extReceive = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_A, docs = selectedTask).extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "KON", 
                    If(LookUp(selPrj_currentPhase_task_K, docs = selectedTask).extReceive = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_K, docs = selectedTask).extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "BRA", 
                    If(LookUp(selPrj_currentPhase_task_B, docs = selectedTask).extReceive = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_B, docs = selectedTask).extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "MYN", 
                    If(LookUp(selPrj_currentPhase_task_M, docs = selectedTask).extReceive = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_M, docs = selectedTask).extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "BÆR", 
                    If(LookUp(selPrj_currentPhase_task_N, docs = selectedTask).extReceive = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_N, docs = selectedTask).extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "VVS", 
                    If(LookUp(selPrj_currentPhase_task_V, docs = selectedTask).extReceive = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_V, docs = selectedTask).extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0)),
                    "UDF", 
                    If(LookUp(selPrj_currentPhase_task_U, docs = selectedTask).extReceive = Text(Blank()) ||
                       LookUp(selPrj_currentPhase_task_U, docs = selectedTask).extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0))
                )
                
                //If(ThisItem.extReceive = Text(Blank()) || ThisItem.extReceive = Blank(), RGBA(0,0,0,0.4), RGBA(0, 0, 0, 0))
            OnChange: |+
                =Set(selectedExtReceiveKSDate, extKontrol_receive_btn.SelectedDate);
                
                Switch(selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {extReceive: extKontrol_receive_btn.SelectedDate}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {extReceive: extKontrol_receive_btn.SelectedDate}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {extReceive: extKontrol_receive_btn.SelectedDate}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {extReceive: extKontrol_receive_btn.SelectedDate}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {extReceive: extKontrol_receive_btn.SelectedDate}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {extReceive: extKontrol_receive_btn.SelectedDate}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {extReceive: extKontrol_receive_btn.SelectedDate})
                );
                
                //ClearCollect(selPrj_logCollection, ThisItem.log);
                Patch(selPrj_logCollection, Defaults(selPrj_logCollection), 
                    {
                        date: Text(Now(), "dd-mm-yyyy hh:mm:ss"),
                        text: "External Kontrol modtaget sat til " & Text(selectedExtReceiveKSDate, "dd-mm-yyyy")
                    }
                );
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = ThisRecord.docs, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = ThisRecord.docs, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = ThisRecord.docs, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = ThisRecord.docs, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = ThisRecord.docs, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = ThisRecord.docs, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = ThisRecord.docs, {log: A.log}))
                );
                
                Patch(toSP_json_ProjectManagment_currentPhase, First(toSP_json_ProjectManagment_currentPhase), 
                    {
                        task: 
                            [{
                            ARK: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"),
                            KON: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"),
                            BRA: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"),
                            MYN: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"),
                            BÆR: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"),
                            VVS: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"),
                            UDF: Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf")
                            }]
                    }
                );
                
                
            OnSelect: =
            PaddingLeft: =3
            PaddingRight: =0
            Size: =8
            StartYear: =2010
            Visible: =false
            Width: =98
            X: =893
            Y: =699
            ZIndex: =234

        Icon10_2 As icon.Cancel:
            Color: =RGBA(128, 128, 128, 1)
            DisabledColor: =RGBA(244, 244, 244, 0)
            DisabledFill: =RGBA(220, 220, 220, 0)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Height: =30
            HoverFill: =RGBA(50, 50, 50, 0.3)
            Icon: =Icon.Cancel
            OnSelect: |-
                =//Set(selectedTask, ThisItem.docs);
                Switch(
                    selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {extSendt: Text(Blank())}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {extSendt: Text(Blank())}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {extSendt: Text(Blank())}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {extSendt: Text(Blank())}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {extSendt: Text(Blank())}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {extSendt: Text(Blank())}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {extSendt: Text(Blank())})
                )
            Visible: =false
            Width: =12
            X: =837
            Y: =706
            ZIndex: =235

        Icon10_3 As icon.Cancel:
            Color: =RGBA(128, 128, 128, 1)
            DisabledColor: =RGBA(244, 244, 244, 0)
            DisabledFill: =RGBA(220, 220, 220, 0)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Height: =30
            HoverFill: =RGBA(50, 50, 50, 0.3)
            Icon: =Icon.Cancel
            OnSelect: |-
                =//Set(selectedTask, ThisItem.docs);
                Switch(
                    selectedCategory,
                    "ARK", UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {extReceive: Text(Blank())}),
                    "KON", UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {extReceive: Text(Blank())}),
                    "BRA", UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {extReceive: Text(Blank())}),
                    "MYN", UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {extReceive: Text(Blank())}),
                    "BÆR", UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {extReceive: Text(Blank())}),
                    "VVS", UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {extReceive: Text(Blank())}),
                    "UDF", UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {extReceive: Text(Blank())})
                )
            Visible: =false
            Width: =12
            X: =986
            Y: =707
            ZIndex: =236

        Label8_6 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =14
            Size: =9
            Text: ="Sendt"
            Visible: =false
            Width: =60
            X: =741
            Y: =689
            ZIndex: =237

        Label8_7 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Lighter
            Height: =14
            Size: =9
            Text: ="Modtaget"
            Visible: =false
            Width: =77
            X: =888
            Y: =689
            ZIndex: =238

        Label8_5 As label:
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            FontWeight: =FontWeight.Semibold
            Height: =18
            Size: =9
            Text: ="EKSTERN KONTROL"
            Visible: =false
            Width: =129
            X: =741
            Y: =654
            ZIndex: =239

        Checkbox2 As checkbox:
            CheckboxBackgroundFill: =RGBA(0, 0, 0, 0)
            CheckboxBorderColor: =RGBA(51, 51, 51, 1)
            CheckboxSize: =20
            CheckmarkFill: =RGBA(54, 176, 75, 1)
            Default: =First(opgaver_selPrj_static).conClass = "KK2" || First(opgaver_selPrj_static).conClass = "KK3" || First(opgaver_selPrj_static).conClass = "KK4"
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Height: =26
            Text: =
            Visible: =false
            Width: =38
            X: =869
            Y: =649
            ZIndex: =240

        Button19_22 As button:
            Align: =Align.Left
            BorderThickness: =0.1
            Color: =RGBA(0, 0, 0, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Bold
            Height: =26
            HoverFill: =ColorFade(RGBA(50, 50, 50, 0.5), -30%)
            OnSelect: |-
                =Set(titleEditor, true);
                Set(edited_selectedTask, selectedOpgave.docs);
            PaddingLeft: =3
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =9
            Text: |
                =Switch(selectedCategory,
                    "ARK",
                    LookUp(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr).docs,
                    "KON",
                    LookUp(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr).docs, 
                    "BRA",
                    LookUp(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr).docs,
                    "MYN",
                    LookUp(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr).docs, 
                    "BÆR",
                    LookUp(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr).docs,
                    "VVS",
                    LookUp(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr).docs,
                    "UDF",
                    LookUp(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr).docs
                )
            Visible: =If(selTaskPopup , If(titleEditor = true, false, true))
            Width: =351
            X: =738
            Y: =taskTitleBox.Y
            ZIndex: =241

        taskTitleBox As text:
            BorderColor: =RGBA(219, 219, 219, 1)
            BorderThickness: =0.1
            Default: |-
                =Switch(selectedCategory,
                    "ARK",
                    LookUp(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask && delegation = selectedRowNr).docs,
                    "KON",
                    LookUp(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask && delegation = selectedRowNr).docs, 
                    "BRA",
                    LookUp(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask && delegation = selectedRowNr).docs,
                    "MYN",
                    LookUp(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask && delegation = selectedRowNr).docs, 
                    "BÆR",
                    LookUp(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask && delegation = selectedRowNr).docs,
                    "VVS",
                    LookUp(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask && delegation = selectedRowNr).docs,
                    "UDF",
                    LookUp(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask && delegation = selectedRowNr).docs
                )
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(225, 232, 232, 1)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Semibold
            Height: =26
            HoverFill: =RGBA(186, 186, 186, 0.2)
            OnChange: |-
                =Set(edited_selectedTask, taskTitleBox.Text);
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text})
                );
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
                
                Set(selectedTask, edited_selectedTask);
            OnSelect: =
            PaddingLeft: =3
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =9
            Visible: =If(selTaskPopup, If(titleEditor = true, true, false))
            Width: =351
            X: =738
            Y: =122
            ZIndex: =242

        Button19_21 As button:
            BorderThickness: =0
            DisplayMode: =If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, DisplayMode.Disabled, displayMode)
            Fill: =RGBA(73, 92, 92, 1)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =26
            HoverFill: =ColorFade(RGBA(255, 0, 0, 0.9), -30%)
            OnSelect: |
                =Set(titleEditor, false);
                
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, docs = selectedTask && delegation = selectedRowNr, 
                    {docs: taskTitleBox.Text, readyForKS: selectedOpgave.readyForKS, approval: selectedOpgave.approval, rejection: selectedOpgave.rejection}),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),  
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, docs = selectedTask && delegation = selectedRowNr, 
                    {docs: taskTitleBox.Text, readyForKS: selectedOpgave.readyForKS, approval: selectedOpgave.approval, rejection: selectedOpgave.rejection}),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text}),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, docs = selectedTask && delegation = selectedRowNr, {docs: taskTitleBox.Text})
                );
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
                
                Set(selectedTask, edited_selectedTask);
                
                
                /*
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = ThisRecord.docs, {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_K, A.docs = ThisRecord.docs, {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = ThisRecord.docs, {log: A.log})),
                    "MYN",
                    UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = ThisRecord.docs, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = ThisRecord.docs, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = ThisRecord.docs, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = selectedTask, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = ThisRecord.docs, {log: A.log}))
                );
                */
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: =0
            RadiusBottomRight: =6
            RadiusTopLeft: =0
            RadiusTopRight: =6
            Size: =8
            Text: ="save"
            Visible: =If(selTaskPopup, If(titleEditor = true, true, false))
            Width: =23
            X: =1066
            Y: =122
            ZIndex: =243

    leftNavigationBar_3 As leftNavigationBar:
        NavigationItems: =gblNavItems
        Visible: =visOverview
        ZIndex: =244

    group_task_Package As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =246

        Rectangle1_4 As rectangle:
            Fill: =RGBA(242, 241, 237, 0.95)
            Height: =768
            Visible: =visAddingTask_package
            Width: =1366
            ZIndex: =204

        Button19_6 As button:
            BorderThickness: =0
            DisplayMode: =If(visStatusListBox || visUserGal ||  visUserGal2 = true, DisplayMode.Disabled, DisplayMode.Edit) 
            Fill: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =1
            FontWeight: =FontWeight.Normal
            Height: =20
            OnSelect: |-
                =Clear(selPrj_logCollection);
                Collect(selPrj_logCollection, {date: Text(Now(), "dd-mm-yyyy hh:mm:ss"), text: "Oprettet"}); 
                
                Switch(selectedCategory,
                    "ARK",
                    ForAll(taskSelecting_package.SelectedItems As doclistRecord, 
                        Patch(selPrj_currentPhase_task_A, Defaults(selPrj_currentPhase_task_A), 
                            {docs: doclistRecord.doc, docCategory:"ark", assignedHours: Value(doclistRecord.weight), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                            complMark: false}));
                    ClearCollect(selPrj_currentPhase_task_A, ForAll(Sequence(CountRows(selPrj_currentPhase_task_A)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_A, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_A).delegation),
                    "KON",
                    ForAll(taskSelecting_package.SelectedItems As doclistRecord, 
                        Patch(selPrj_currentPhase_task_K, Defaults(selPrj_currentPhase_task_K), 
                            {docs: doclistRecord.doc, docCategory:"kon", assignedHours: Value(doclistRecord.weight), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                            complMark: false}));
                    ClearCollect(selPrj_currentPhase_task_K, ForAll(Sequence(CountRows(selPrj_currentPhase_task_K)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_K, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_K).delegation),
                    "BRA",
                    ForAll(taskSelecting_package.SelectedItems As doclistRecord, 
                        Patch(selPrj_currentPhase_task_B, Defaults(selPrj_currentPhase_task_B), 
                            {docs: doclistRecord.doc, docCategory:"bra", assignedHours: Value(doclistRecord.weight), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                            complMark: false}));
                    ClearCollect(selPrj_currentPhase_task_B, ForAll(Sequence(CountRows(selPrj_currentPhase_task_B)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_B, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_B).delegation),
                    "MYN",
                    ForAll(taskSelecting_package.SelectedItems As doclistRecord, 
                        Patch(selPrj_currentPhase_task_M, Defaults(selPrj_currentPhase_task_M), 
                            {docs: doclistRecord.doc, docCategory:"myn", assignedHours: Value(doclistRecord.weight), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                            complMark: false}));
                    ClearCollect(selPrj_currentPhase_task_M, ForAll(Sequence(CountRows(selPrj_currentPhase_task_M)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_M, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_M).delegation),
                    "BÆR",
                    ForAll(taskSelecting_package.SelectedItems As doclistRecord, 
                        Patch(selPrj_currentPhase_task_N, Defaults(selPrj_currentPhase_task_N), 
                            {docs: doclistRecord.doc, docCategory:"bær", assignedHours: Value(doclistRecord.weight), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                            complMark: false}));
                    ClearCollect(selPrj_currentPhase_task_N, ForAll(Sequence(CountRows(selPrj_currentPhase_task_N)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_N, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_N).delegation),
                    "VVS",
                    ForAll(taskSelecting_package.SelectedItems As doclistRecord, 
                        Patch(selPrj_currentPhase_task_V, Defaults(selPrj_currentPhase_task_V), 
                            {docs: doclistRecord.doc, docCategory:"vvs", assignedHours: Value(doclistRecord.weight), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                            complMark: false}));
                    ClearCollect(selPrj_currentPhase_task_V, ForAll(Sequence(CountRows(selPrj_currentPhase_task_V)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_V, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_V).delegation),
                    "UDF",
                    ForAll(taskSelecting_package.SelectedItems As doclistRecord, 
                        Patch(selPrj_currentPhase_task_U, Defaults(selPrj_currentPhase_task_U), 
                            {docs: doclistRecord.doc, docCategory:"udf", assignedHours: Value(doclistRecord.weight), opgaveProgress: 0, log: selPrj_logCollection, indvDeadline: Text(Blank()), 
                            complMark: false}));
                    ClearCollect(selPrj_currentPhase_task_U, ForAll(Sequence(CountRows(selPrj_currentPhase_task_U)) As ThisSequence, 
                        Patch(Last(FirstN(selPrj_currentPhase_task_U, ThisSequence.Value)), {delegation: Int(ThisSequence.Value)})));
                    Set(selectedRowNr, Last(selPrj_currentPhase_task_U).delegation)
                );
                
                ClearCollect(opgaver_selPrj_allTasks, 
                    selPrj_currentPhase_task_A, selPrj_currentPhase_task_K, selPrj_currentPhase_task_B, 
                    selPrj_currentPhase_task_M, selPrj_currentPhase_task_N, selPrj_currentPhase_task_V, selPrj_currentPhase_task_U
                );
                
                
                /*
                Switch(selectedCategory,
                    "ARK",
                    UpdateIf(selPrj_currentPhase_task_A, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_A, A.docs = ThisRecord.docs && First(A.log).date = Text(Blank()), {log: A.log})),
                    "KON",
                    UpdateIf(selPrj_currentPhase_task_K, ThisRecord.docs = decidedTaskName && First(ThisRecord.log).date = Text(Blank()), {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, 
                    UpdateIf(selPrj_currentPhase_task_K, A.docs = ThisRecord.docs && First(ThisRecord.log).date = Text(Blank()), {log: A.log})),
                    "BRA",
                    UpdateIf(selPrj_currentPhase_task_B, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_B, A.docs = ThisRecord.docs, {log: A.log})),
                    //"MYN",
                    //UpdateIf(selPrj_currentPhase_task_M, ThisRecord.docs = decidedTaskName && First(ThisRecord.log).date = Text(Blank()), {log: selPrj_logCollection});
                    //ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_M, A.docs = ThisRecord.docs, {log: A.log})),
                    "BÆR",
                    UpdateIf(selPrj_currentPhase_task_N, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_N, A.docs = ThisRecord.docs, {log: A.log})),
                    "VVS",
                    UpdateIf(selPrj_currentPhase_task_V, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_V, A.docs = ThisRecord.docs, {log: A.log})),
                    "UDF",
                    UpdateIf(selPrj_currentPhase_task_U, ThisRecord.docs = decidedTaskName, {log: selPrj_logCollection});
                    ForAll(managerEditor.AllItems As A, UpdateIf(selPrj_currentPhase_task_U, A.docs = ThisRecord.docs, {log: A.log}))
                );
                */
                
                Set(visAddingTask_package, !visAddingTask_package);
                Set(displayMode, DisplayMode.Edit);
                Set(titleEditor, false);
                Set(selectedTask, decidedTaskName);
                
                //Resume the timers
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            RadiusBottomLeft: =5
            RadiusBottomRight: =5
            RadiusTopLeft: =5
            RadiusTopRight: =5
            Size: =9
            Text: ="SAVE"
            Visible: =visAddingTask_package
            Width: =52
            X: =814
            Y: =278
            ZIndex: =205

        Icon5_1 As icon.Cancel:
            Color: =RGBA(255, 0, 0, 1)
            Height: =15
            Icon: =Icon.Cancel
            OnSelect: |
                =Set(visAddingTask_package, false);
                Set(displayMode, DisplayMode.Edit);
                
                //Resume the timers
                Set(activateTimer_AutoGetOutPage, true);
                Set(activateTimer_RefreshPrjList, true);
            Visible: =visAddingTask_package
            Width: =15
            X: =850
            Y: =216
            ZIndex: =206

        taskSelecting_package As combobox:
            BorderThickness: =0
            ChevronBackground: =RGBA(0, 0, 0, 1)
            DefaultSelectedItems: |-
                =If(
                    selectedKKChange = "KK1" && selectedPrjPhase = "MYN" && selectedCategory = "KON", konDocProperty_kk1_myn,
                    selectedKKChange = "KK1" && selectedPrjPhase = "HOV" && selectedCategory = "KON", konDocProperty_kk1_hov,
                    selectedKKChange = "KK2" && selectedPrjPhase = "MYN" && selectedCategory = "KON", konDocProperty_kk2_myn,
                    selectedKKChange = "KK2" && selectedPrjPhase = "HOV" && selectedCategory = "KON", konDocProperty_kk2_hov,
                    selectedPrjPhase = "MYN" && selectedCategory = "BRA", braDocProperty_myn,
                    selectedPrjPhase = "HOV" && selectedCategory = "BRA", braDocProperty_hov,
                    Switch(
                        selectedCategory,
                        "ARK", Blank(),
                        "KON", Blank(),
                        "BRA", Blank(),
                        "MYN", Blank(),
                        "BÆR", Blank(),
                        "VVS", Blank()
                    )
                )
            DisplayFields: =["doc"]
            FocusedBorderThickness: =0
            Height: =22
            HoverFill: =RGBA(219, 219, 219, 1)
            Items: |-
                =If(
                    selectedKKChange = "KK1" && selectedPrjPhase = "MYN" && selectedCategory = "KON", konDocProperty_kk1_myn,
                    selectedKKChange = "KK1" && selectedPrjPhase = "HOV" && selectedCategory = "KON", konDocProperty_kk1_hov,
                    selectedKKChange = "KK2" && selectedPrjPhase = "MYN" && selectedCategory = "KON", konDocProperty_kk2_myn,
                    selectedKKChange = "KK2" && selectedPrjPhase = "HOV" && selectedCategory = "KON", konDocProperty_kk2_hov,
                    selectedPrjPhase = "MYN" && selectedCategory = "BRA", braDocProperty_myn,
                    selectedPrjPhase = "HOV" && selectedCategory = "BRA", braDocProperty_hov,
                    Switch(
                        selectedCategory,
                        "ARK", Blank(),
                        "KON", Blank(),
                        "BRA", Blank(),
                        "MYN", Blank(),
                        "BÆR", Blank(),
                        "VVS", Blank()
                    )
                )
            SearchFields: =["doc"]
            SearchItems: |-
                =Search(If(
                    selectedKKChange = "KK1" && selectedPrjPhase = "MYN" && selectedCategory = "KON", konDocProperty_kk1_myn,
                    selectedKKChange = "KK1" && selectedPrjPhase = "HOV" && selectedCategory = "KON", konDocProperty_kk1_hov,
                    selectedKKChange = "KK2" && selectedPrjPhase = "MYN" && selectedCategory = "KON", konDocProperty_kk2_myn,
                    selectedKKChange = "KK2" && selectedPrjPhase = "HOV" && selectedCategory = "KON", konDocProperty_kk2_hov,
                    selectedPrjPhase = "MYN" && selectedCategory = "BRA", braDocProperty_myn,
                    selectedPrjPhase = "HOV" && selectedCategory = "BRA", braDocProperty_hov,
                    Switch(
                        selectedCategory,
                        "ARK", Blank(),
                        "KON", Blank(),
                        "BRA", Blank(),
                        "MYN", Blank(),
                        "BÆR", Blank(),
                        "VVS", Blank()
                    )
                ),taskSelecting_package.SearchText,doc)
            SelectionFill: =RGBA(102, 102, 102, 1)
            Size: =8
            Visible: =visAddingTask_package
            Width: =360
            X: =507
            Y: =238
            ZIndex: =207

    timerRefreshProjectList As timer:
        Align: =Align.Left
        BorderThickness: =0
        Fill: =RGBA(0, 13, 75, 1)
        Height: =22
        OnSelect: =
        OnTimerEnd: |+
            =//What is the purpose of this code? 
            //To keep project's entire data up to date when there are data changes while I am waiting. 
            
            
            //The different reasons in creating the whole 'opgaver' collection by calling from SP list between this and the one in 'RefreshCurrentUsers' is 
            //1. Here, this is because a current editor edits. To save the changes by a current editor, we should patch and generate the entire 'opgaver' again(at the moment every minute)
            //2. In 'RefreshCurrentUsers', the reason why we generate the entire 'opgaver' is for viewers to see the changes made by a current editor. But question: is it necessary to iterate it every 30secs.
            //what if it is possible to update it once there are changes by a current editor in SP list?
            
            //This is for saving data every minute from an editor's side
            Select(saveBUTTON);
            
            //Refresh is necessary bcz we save changes in SP just before. see the code right above
            Refresh('Project List');
            
            //Just to make sure a current editor doesn't lose its role as an editor. 
            //But, this code might be unnecessary
            Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName),
                {
                    currentEditor: First(selPrjCurrentUserList).Name
                    //projectPhase: {Value: selectedPrjPhase}
                }
            );
            Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
            
            
            
            
            
        PaddingBottom: =0
        PaddingTop: =0
        Repeat: =true
        Reset: =true
        Size: =7.5
        Start: =If(Left(User().Email, 3) = First(selPrjCurrentUserList).Name, activateTimer_RefreshPrjList, false)
        Text: |-
            ="RefreshProjectList(1m, 10sec earlier than userlist): " & Text(Time(0, 0, (Self.Duration - Self.Value)/1000), "mm:ss")
        Visible: =If(User().Email = "jpa@aticon.dk", true, false)
        Width: =280
        Y: =722
        ZIndex: =249

    G_opdragsgiverEditor As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =249

        Button4_7 As button:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 1)
            DisabledFill: =RGBA(150, 150, 150, 1)
            DisplayMode: =displayMode
            Fill: =RGBA(194, 101, 72, 1)
            FocusedBorderThickness: =0
            Height: =20
            HoverColor: =RGBA(0, 0, 0, 1)
            HoverFill: =RGBA(255, 255, 255, 1)
            OnSelect: |-
                =If(
                    User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                    
                    Set(visOpdragsgiverEditor, !visOpdragsgiverEditor);
                
                    Set(visPrjNavnEditor, false);
                    Set(visSagsNrEditor, false);
                    Set(visDDmenu_radgivning, false);
                    Set(visDDmenu_phaseChange, false);
                    Set(visDDmenu_phaseList, false);
                    Set(visDDmenu_PL, false);
                    Set(visDDmenu_bygCategory, false);
                    Set(visDDmenu_brandklasse, false);
                    Set(visDDmenu_enterprise, false);
                    Set(visDDmenu_konklasse, false);  
                
                    Set(visTaskCategorySelect, false);
                    
                    //Reset the auto kick-out timer
                    Reset(timerAutoPopUpWindow);
                    Set(activateTimer_AutoGetOutPage, false);
                    Set(activateTimer_AutoGetOutPage, true);
                    
                    Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
                );
                
                Set(visPressedAddingTask, false);
                //
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =8
            Text: =LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Opdragsgiver
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =150
            X: =1178
            Y: =58
            ZIndex: =185

        opdragsgiverEditor As text:
            BorderColor: =RGBA(219, 219, 219, 1)
            BorderThickness: =0.1
            Default: =LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Opdragsgiver
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =displayMode
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Semibold
            Height: =20
            HoverFill: =RGBA(237, 237, 237, 1)
            OnChange: =Set(edited_Opdragsgiver, opdragsgiverEditor.Text);
            OnSelect: =
            PaddingLeft: =5
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =9
            Visible: =If(visPlan = true, false, visOpdragsgiverEditor)
            Width: =150
            X: =1178
            Y: =58
            ZIndex: =189

        Button19_23 As button:
            BorderThickness: =0
            DisplayMode: =displayMode
            Fill: =RGBA(73, 92, 92, 1)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =20
            HoverFill: =ColorFade(RGBA(255, 0, 0, 0.9), -30%)
            OnSelect: |+
                =Set(visOpdragsgiverEditor, false);
                
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {Opdragsgiver: opdragsgiverEditor.Text});
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                
                
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =8
            Text: ="save"
            Visible: =If(visPlan = true, false, visOpdragsgiverEditor)
            Width: =23
            X: =1305
            Y: =58
            ZIndex: =190

    saveBUTTON As button:
        Align: =Align.Left
        BorderThickness: =0
        Fill: =RGBA(221, 79, 14, 1)
        Height: =36
        OnSelect: |-
            =If(
                //Necessary to divide the functions below by the users' status such as editor and viewer
                
                //1. when you are the editor
                Left(User().Email, 3) = First(selPrjCurrentUserList).Name, 
                ClearCollect(toSP_json_ProjectManagment_currentPhase,
                    {
                        PL: First(selectedPrj).PL,
                        prjName: First(selectedPrj).prjnavn,
                        prjNr: First(selectedPrj).savsnr,
                        bClass: First(selectedPrj).brandClass,
                        kClass: First(selectedPrj).conClass,
                        deadline: First(phaseToSeeByPrj).deadline,
                        assignedTasks:
                            ForAll(First(phaseToSeeByPrj).assignedTasks, {value: ThisRecord.value}),
                        task:  
                            Table({
                                ARK: selPrj_currentPhase_task_A,
                                KON: selPrj_currentPhase_task_K,
                                BRA: selPrj_currentPhase_task_B,
                                MYN: selPrj_currentPhase_task_M,
                                BÆR: selPrj_currentPhase_task_N,
                                VVS: selPrj_currentPhase_task_V,
                                UDF: selPrj_currentPhase_task_U
                            })
                    }
                );
            
                Set(makeJsonCurrentPhase, JSON(toSP_json_ProjectManagment_currentPhase));
            
                If(selectedPrjPhase = LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).projectPhase.Value, 
                    Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {currentPhase: makeJsonCurrentPhase});
                );
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                If(
                    selectedPrjPhase = "FOR", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {FOR: makeJsonCurrentPhase}),
                    selectedPrjPhase = "SKI", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {SKI: makeJsonCurrentPhase}),
                    selectedPrjPhase = "MYN", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {MYN: makeJsonCurrentPhase}),
                    selectedPrjPhase = "HOV", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {HOV: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDB", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDB: makeJsonCurrentPhase}),
                    selectedPrjPhase = "UDF", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {UDF: makeJsonCurrentPhase}),
                    selectedPrjPhase = "AFL", 
                        Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {AFL: makeJsonCurrentPhase})
                );
            );
            
            Switch(
                phaseSelectGallery.Selected.Value,
                "FOR", Set(selectedPrjPhase, "FOR"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).FOR),
                "SKI", Set(selectedPrjPhase, "SKI"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).SKI),
                "MYN", Set(selectedPrjPhase, "MYN"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).MYN),
                "HOV", Set(selectedPrjPhase, "HOV"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).HOV),
                "UDB", Set(selectedPrjPhase, "UDB"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).UDB),
                "UDF", Set(selectedPrjPhase, "UDF"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).UDF),
                "AFL", Set(selectedPrjPhase, "AFL"); Set(phaseWannaSee, LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).AFL)
            );
            //The codes below is common for both the editor and viewers
            ClearCollect(phaseToSeeByPrj,
                ForAll(Table(ParseJSON(phaseWannaSee)) As secondRecord,
                    {
                        deadline: Text(secondRecord.Value.deadline),                     
                        assignedTasks: ForAll(Table(secondRecord.Value.assignedTasks) As assignedRecord,
                            {
                                value: Text(assignedRecord.Value.value)   
                            }
                        ),             
                        taskCategory: ForAll(Table(secondRecord.Value.task) As thirdRecord,
                            { 
                                ARK: ForAll(Table(thirdRecord.Value.ARK) As forthRecord,
                                    {
                                        assignedHours: Value(forthRecord.Value.assignedHours),
                                        delegation: Value(forthRecord.Value.delegation),
                                        delegation2: Value(forthRecord.Value.delegation2),
                                        docCategory: Text(forthRecord.Value.docCategory),
                                        docs: Text(forthRecord.Value.docs),
                                        fontColor: Text(forthRecord.Value.fontColor),
                                        fontItalic: Boolean(forthRecord.Value.fontItalic),
                                        fontStrike: Boolean(forthRecord.Value.fontStrike),
                                        kommentator: Text(forthRecord.Value.kommentator),
                                        ks: Text(forthRecord.Value.ks),
                                        markColor: Text(forthRecord.Value.markColor),
                                        modtaget: Text(forthRecord.Value.modtaget),
                                        indvDeadline: Text(forthRecord.Value.indvDeadline),
                                        deadlineComment: Text(forthRecord.Value.deadlineComment),
                                        statusMessage: Text(forthRecord.Value.statusMessage),
                                        opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                        progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                        progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                        resources: Text(forthRecord.Value.resources),
                                        slutDato: Text(forthRecord.Value.slutDato),
                                        udsendt: Text(forthRecord.Value.udsendt),
                                        complMark: Boolean(forthRecord.Value.complMark),
                                        readyForKS: Boolean(forthRecord.Value.readyForKS),
                                        rejection: Boolean(forthRecord.Value.rejection),
                                        approval: Boolean(forthRecord.Value.approval),
                                        extSendt: Text(forthRecord.Value.extSendt),
                                        extReceive: Text(forthRecord.Value.extReceive),
                                        log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                            {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                    }
                                ),
                                KON: ForAll(Table(thirdRecord.Value.KON) As forthRecord,
                                    {
                                        assignedHours: Value(forthRecord.Value.assignedHours),
                                        delegation: Value(forthRecord.Value.delegation),
                                        delegation2: Value(forthRecord.Value.delegation2),
                                        docCategory: Text(forthRecord.Value.docCategory),
                                        docs: Text(forthRecord.Value.docs),
                                        fontColor: Text(forthRecord.Value.fontColor),
                                        fontItalic: Boolean(forthRecord.Value.fontItalic),
                                        fontStrike: Boolean(forthRecord.Value.fontStrike),
                                        kommentator: Text(forthRecord.Value.kommentator),
                                        ks: Text(forthRecord.Value.ks),
                                        markColor: Text(forthRecord.Value.markColor),
                                        modtaget: Text(forthRecord.Value.modtaget),
                                        indvDeadline: Text(forthRecord.Value.indvDeadline),
                                        deadlineComment: Text(forthRecord.Value.deadlineComment),
                                        statusMessage: Text(forthRecord.Value.statusMessage),
                                        opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                        progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                        progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                        resources: Text(forthRecord.Value.resources),
                                        slutDato: Text(forthRecord.Value.slutDato),
                                        udsendt: Text(forthRecord.Value.udsendt),
                                        complMark: Boolean(forthRecord.Value.complMark),
                                        readyForKS: Boolean(forthRecord.Value.readyForKS),
                                        rejection: Boolean(forthRecord.Value.rejection),
                                        approval: Boolean(forthRecord.Value.approval),
                                        extSendt: Text(forthRecord.Value.extSendt),
                                        extReceive: Text(forthRecord.Value.extReceive),
                                        log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                            {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                    }
                                ),
                                BRA: ForAll(Table(thirdRecord.Value.BRA) As forthRecord,
                                    {
                                        assignedHours: Value(forthRecord.Value.assignedHours),
                                        delegation: Value(forthRecord.Value.delegation),
                                        delegation2: Value(forthRecord.Value.delegation2),
                                        docCategory: Text(forthRecord.Value.docCategory),
                                        docs: Text(forthRecord.Value.docs),
                                        fontColor: Text(forthRecord.Value.fontColor),
                                        fontItalic: Boolean(forthRecord.Value.fontItalic),
                                        fontStrike: Boolean(forthRecord.Value.fontStrike),
                                        kommentator: Text(forthRecord.Value.kommentator),
                                        ks: Text(forthRecord.Value.ks),
                                        markColor: Text(forthRecord.Value.markColor),
                                        modtaget: Text(forthRecord.Value.modtaget),
                                        indvDeadline: Text(forthRecord.Value.indvDeadline),
                                        deadlineComment: Text(forthRecord.Value.deadlineComment),
                                        statusMessage: Text(forthRecord.Value.statusMessage),
                                        opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                        progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                        progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                        resources: Text(forthRecord.Value.resources),
                                        slutDato: Text(forthRecord.Value.slutDato),
                                        udsendt: Text(forthRecord.Value.udsendt),
                                        complMark: Boolean(forthRecord.Value.complMark),
                                        readyForKS: Boolean(forthRecord.Value.readyForKS),
                                        rejection: Boolean(forthRecord.Value.rejection),
                                        approval: Boolean(forthRecord.Value.approval),
                                        extSendt: Text(forthRecord.Value.extSendt),
                                        extReceive: Text(forthRecord.Value.extReceive),
                                        log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                            {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                    }
                                ),
                                MYN: ForAll(Table(thirdRecord.Value.MYN) As forthRecord,
                                    {
                                        assignedHours: Value(forthRecord.Value.assignedHours),
                                        delegation: Value(forthRecord.Value.delegation),
                                        delegation2: Value(forthRecord.Value.delegation2),
                                        docCategory: Text(forthRecord.Value.docCategory),
                                        docs: Text(forthRecord.Value.docs),
                                        fontColor: Text(forthRecord.Value.fontColor),
                                        fontItalic: Boolean(forthRecord.Value.fontItalic),
                                        fontStrike: Boolean(forthRecord.Value.fontStrike),
                                        kommentator: Text(forthRecord.Value.kommentator),
                                        ks: Text(forthRecord.Value.ks),
                                        markColor: Text(forthRecord.Value.markColor),
                                        modtaget: Text(forthRecord.Value.modtaget),
                                        indvDeadline: Text(forthRecord.Value.indvDeadline),
                                        deadlineComment: Text(forthRecord.Value.deadlineComment),
                                        statusMessage: Text(forthRecord.Value.statusMessage),
                                        opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                        progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                        progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                        resources: Text(forthRecord.Value.resources),
                                        slutDato: Text(forthRecord.Value.slutDato),
                                        udsendt: Text(forthRecord.Value.udsendt),
                                        complMark: Boolean(forthRecord.Value.complMark),
                                        readyForKS: Boolean(forthRecord.Value.readyForKS),
                                        rejection: Boolean(forthRecord.Value.rejection),
                                        approval: Boolean(forthRecord.Value.approval),
                                        extSendt: Text(forthRecord.Value.extSendt),
                                        extReceive: Text(forthRecord.Value.extReceive),
                                        log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                            {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                    }
                                ),
                                BÆR: ForAll(Table(thirdRecord.Value.BÆR) As forthRecord,
                                    {
                                        assignedHours: Value(forthRecord.Value.assignedHours),
                                        delegation: Value(forthRecord.Value.delegation),
                                        delegation2: Value(forthRecord.Value.delegation2),
                                        docCategory: Text(forthRecord.Value.docCategory),
                                        docs: Text(forthRecord.Value.docs),
                                        fontColor: Text(forthRecord.Value.fontColor),
                                        fontItalic: Boolean(forthRecord.Value.fontItalic),
                                        fontStrike: Boolean(forthRecord.Value.fontStrike),
                                        kommentator: Text(forthRecord.Value.kommentator),
                                        ks: Text(forthRecord.Value.ks),
                                        markColor: Text(forthRecord.Value.markColor),
                                        modtaget: Text(forthRecord.Value.modtaget),
                                        indvDeadline: Text(forthRecord.Value.indvDeadline),
                                        deadlineComment: Text(forthRecord.Value.deadlineComment),
                                        statusMessage: Text(forthRecord.Value.statusMessage),
                                        opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                        progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                        progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                        resources: Text(forthRecord.Value.resources),
                                        slutDato: Text(forthRecord.Value.slutDato),
                                        udsendt: Text(forthRecord.Value.udsendt),
                                        complMark: Boolean(forthRecord.Value.complMark),
                                        readyForKS: Boolean(forthRecord.Value.readyForKS),
                                        rejection: Boolean(forthRecord.Value.rejection),
                                        approval: Boolean(forthRecord.Value.approval),
                                        extSendt: Text(forthRecord.Value.extSendt),
                                        extReceive: Text(forthRecord.Value.extReceive),
                                        log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                            {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                    }
                                ),
                                VVS: ForAll(Table(thirdRecord.Value.VVS) As forthRecord,
                                    {
                                        assignedHours: Value(forthRecord.Value.assignedHours),
                                        delegation: Value(forthRecord.Value.delegation),
                                        delegation2: Value(forthRecord.Value.delegation2),
                                        docCategory: Text(forthRecord.Value.docCategory),
                                        docs: Text(forthRecord.Value.docs),
                                        fontColor: Text(forthRecord.Value.fontColor),
                                        fontItalic: Boolean(forthRecord.Value.fontItalic),
                                        fontStrike: Boolean(forthRecord.Value.fontStrike),
                                        kommentator: Text(forthRecord.Value.kommentator),
                                        ks: Text(forthRecord.Value.ks),
                                        markColor: Text(forthRecord.Value.markColor),
                                        modtaget: Text(forthRecord.Value.modtaget),
                                        indvDeadline: Text(forthRecord.Value.indvDeadline),
                                        deadlineComment: Text(forthRecord.Value.deadlineComment),
                                        statusMessage: Text(forthRecord.Value.statusMessage),
                                        opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                        progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                        progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                        resources: Text(forthRecord.Value.resources),
                                        slutDato: Text(forthRecord.Value.slutDato),
                                        udsendt: Text(forthRecord.Value.udsendt),
                                        complMark: Boolean(forthRecord.Value.complMark),
                                        readyForKS: Boolean(forthRecord.Value.readyForKS),
                                        rejection: Boolean(forthRecord.Value.rejection),
                                        approval: Boolean(forthRecord.Value.approval),
                                        extSendt: Text(forthRecord.Value.extSendt),
                                        extReceive: Text(forthRecord.Value.extReceive),
                                        log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                            {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                    }
                                ),
                                UDF: ForAll(Table(thirdRecord.Value.UDF) As forthRecord,
                                    {
                                        assignedHours: Value(forthRecord.Value.assignedHours),
                                        delegation: Value(forthRecord.Value.delegation),
                                        delegation2: Value(forthRecord.Value.delegation2),
                                        docCategory: Text(forthRecord.Value.docCategory),
                                        docs: Text(forthRecord.Value.docs),
                                        fontColor: Text(forthRecord.Value.fontColor),
                                        fontItalic: Boolean(forthRecord.Value.fontItalic),
                                        fontStrike: Boolean(forthRecord.Value.fontStrike),
                                        kommentator: Text(forthRecord.Value.kommentator),
                                        ks: Text(forthRecord.Value.ks),
                                        markColor: Text(forthRecord.Value.markColor),
                                        modtaget: Text(forthRecord.Value.modtaget),
                                        indvDeadline: Text(forthRecord.Value.indvDeadline),
                                        deadlineComment: Text(forthRecord.Value.deadlineComment),
                                        statusMessage: Text(forthRecord.Value.statusMessage),
                                        opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                        progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                        progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                        resources: Text(forthRecord.Value.resources),
                                        slutDato: Text(forthRecord.Value.slutDato),
                                        udsendt: Text(forthRecord.Value.udsendt),
                                        complMark: Boolean(forthRecord.Value.complMark),
                                        readyForKS: Boolean(forthRecord.Value.readyForKS),
                                        rejection: Boolean(forthRecord.Value.rejection),
                                        approval: Boolean(forthRecord.Value.approval),
                                        extSendt: Text(forthRecord.Value.extSendt),
                                        extReceive: Text(forthRecord.Value.extReceive),
                                        log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                            {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                    }
                                )
                            }
                        )
                    }
                )
            );
            
            //The code below is for quick refresh with the updated information
            Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
            
            
            ClearCollect(phaseToSeeByPrj_assignedTaskScope, First(phaseToSeeByPrj).assignedTasks);
            
            ClearCollect(opgaver_selPrj_taskCategory, First(phaseToSeeByPrj).taskCategory);
            
            ClearCollect(opgaver_selPrj_allTasks, 
                First(opgaver_selPrj_taskCategory).ARK, 
                First(opgaver_selPrj_taskCategory).KON, 
                First(opgaver_selPrj_taskCategory).BRA, 
                First(opgaver_selPrj_taskCategory).MYN, 
                First(opgaver_selPrj_taskCategory).BÆR, 
                First(opgaver_selPrj_taskCategory).VVS, 
                First(opgaver_selPrj_taskCategory).UDF
            );
            
            //currentAllTasks is protected from expanding/dropping
            ClearCollect(selPrj_currentPhase_task_A, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"));
            ClearCollect(selPrj_currentPhase_task_K, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"));
            ClearCollect(selPrj_currentPhase_task_B, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"));
            ClearCollect(selPrj_currentPhase_task_M, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"));
            ClearCollect(selPrj_currentPhase_task_N, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"));
            ClearCollect(selPrj_currentPhase_task_V, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"));
            ClearCollect(selPrj_currentPhase_task_U, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf"));
        Size: =7.5
        Text: |-
            ="Save changes in SP & Update all relevant collections
            'opgaver', 'phaseToSee', etc."
        VerticalAlign: =VerticalAlign.Top
        Visible: =If(User().Email = "jpa@aticon.dk", true, false)
        Width: =280
        Y: =660
        ZIndex: =250

    timerRefreshCurrentUsers As timer:
        Align: =Align.Left
        AutoStart: =true
        BorderThickness: =0
        Duration: =30000
        Fill: =RGBA(102, 158, 186, 1)
        Height: =22
        OnSelect: =
        OnTimerEnd: |-
            =//to know whether a current editor leaves the page, refresh is necessary
            Refresh('Project List');
            
            // ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ To store user logs of the project editing page ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
            // When multiple users use the app, the user name is stored into SP list respectively. That's why we store the collection, currentUserList, in the SP list and take the data from it
            // Extracting currentUser list from SP list, updating the Collection
            With(
                {parent: LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).currentUsers},
                ClearCollect(selPrjCurrentUserList,
                    ForAll(Table(ParseJSON(parent)) As userListRecord, {Name: Text(userListRecord.Value.Name), LogInTime: Text(userListRecord.Value.LogInTime)}))
            );
            
            //We locally modify the collection made from the data of the SP list. 
            Patch(selPrjCurrentUserList, Defaults(selPrjCurrentUserList), {Name:Left(User().Email, 3), LogInTime: Now()});
            //We remove past data made 1 minute ago in Collection
            RemoveIf(selPrjCurrentUserList, DateDiff(LogInTime, Now(), TimeUnit.Minutes) >= 1);
            
            //We store the latest collection made locally into the SP list
            Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName)); 
            IfError(
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName),
                    {
                        currentEditor: First(selPrjCurrentUserList).Name,
                        currentUsers: JSON(selPrjCurrentUserList)
                    }
                ), ""
            );
            Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
            
            //The most important thing is these code lines should be stopped if a user is the editor
            //The reason why we create the entire 'opgaver' is for viewers to see the changes by a current editor
            //Followed question: is it necessary to iterate it every 30secs? what if it is possible to create the entire 'opgaver' once there are changes by a current editor in SP list? 
            //the answer: Anyway we save data in SP list every minute from a editor side, which means the system will think there is modification which will cause generation of the whole 'opgaver'
            If(Left(User().Email, 3) <> First(selPrjCurrentUserList).Name, 
                //meaning if you are not an editor. then, Why doesn't it apply to the editor? This is because if you are the editor you don't need to repeatedly refresh 'opgaver'
                ClearCollect(opgaver,
                    ForAll('Project List' As firstRecord,
                        {   
                            currentEditor: firstRecord.currentEditor,
                            currentUsers: ForAll(Table(ParseJSON(firstRecord.currentUsers)) As userListRecord, {Name: Text(userListRecord.Value.Name), LogInTime: Text(userListRecord.Value.LogInTime)}),
                            ID: firstRecord.ID,
                            PL: firstRecord.PL,
                            savsnr: firstRecord.'Sagsnr. ATICONs ',
                            prjnavn: firstRecord.Projektnavn,
                            prjStatus: firstRecord.projectStatus.Value,
                            prjType: firstRecord.projectType.Value,
                            prjPhase: firstRecord.projectPhase.Value,
                            assignedPhase: ForAll(Table(ParseJSON(firstRecord.assignedPhase)) As phaseRecord, {phase: Text(phaseRecord.Value.phase)}),
                            bygCategory: firstRecord.bygCategories.Value,
                            prjEntreprise: firstRecord.Entreprise.Value,
                            prjRadgivning: firstRecord.Rådgivning.Value,
                            conClass: firstRecord.Konstruktionsklasse.Value,
                            brandClass: firstRecord.Brandklasse.Value,
                            client: firstRecord.Opdragsgiver,
                            builder: firstRecord.Bygherre,
                            entrepreneur: firstRecord.entrepreneur,
                            architect: firstRecord.architect,
                            engineer: firstRecord.engineer,
                            brand: firstRecord.brand,
                            sustainability: firstRecord.baeredygtighed,
                            tilbudAccepted: firstRecord.tilbudAccepted,
                            prjDescription: ForAll(Table(ParseJSON(firstRecord.prjDescription)) As descriptionRecord,
                                {
                                    head: Text(descriptionRecord.Value.head),
                                    body: Text(descriptionRecord.Value.body)
                                } 
                            ), 
                            currentPhaseTask:
                            ForAll(Table(ParseJSON(firstRecord.currentPhase)) As secondRecord,
                                {
                                    deadline: Text(secondRecord.Value.deadline),                      
                                    assignedTasks: ForAll(Table(secondRecord.Value.assignedTasks) As assignedRecord,
                                        {
                                            value: Text(assignedRecord.Value.value)   
                                        }
                                    ),             
                                    taskCategory: ForAll(Table(secondRecord.Value.task) As thirdRecord,
                                        { 
                                            ARK: ForAll(Table(thirdRecord.Value.ARK) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            KON: ForAll(Table(thirdRecord.Value.KON) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),                                    
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            BRA: ForAll(Table(thirdRecord.Value.BRA) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),                                    
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            MYN: ForAll(Table(thirdRecord.Value.MYN) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),                                    
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            BÆR: ForAll(Table(thirdRecord.Value.BÆR) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),                                    
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            VVS: ForAll(Table(thirdRecord.Value.VVS) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),                                    
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            ),
                                            UDF: ForAll(Table(thirdRecord.Value.UDF) As forthRecord,
                                                {
                                                    assignedHours: Value(forthRecord.Value.assignedHours),
                                                    delegation: Value(forthRecord.Value.delegation),
                                                    delegation2: Value(forthRecord.Value.delegation2),
                                                    docCategory: Text(forthRecord.Value.docCategory),
                                                    docs: Text(forthRecord.Value.docs),
                                                    fontColor: Text(forthRecord.Value.fontColor),
                                                    fontItalic: Boolean(forthRecord.Value.fontItalic),
                                                    fontStrike: Boolean(forthRecord.Value.fontStrike),
                                                    kommentator: Text(forthRecord.Value.kommentator),
                                                    ks: Text(forthRecord.Value.ks),
                                                    markColor: Text(forthRecord.Value.markColor),
                                                    modtaget: Text(forthRecord.Value.modtaget),
                                                    indvDeadline: Text(forthRecord.Value.indvDeadline),                                    
                                                    deadlineComment: Text(forthRecord.Value.deadlineComment),
                                                    statusMessage: Text(forthRecord.Value.statusMessage),
                                                    opgaveProgress: Value(forthRecord.Value.opgaveProgress),
                                                    progressByHours: Value(forthRecord.Value.opgaveProgress/100) * Value(forthRecord.Value.assignedHours),
                                                    progressHrsByComplMark: Value(forthRecord.Value.progressHrsByComplMark),
                                                    resources: Text(forthRecord.Value.resources),
                                                    slutDato: Text(forthRecord.Value.slutDato),
                                                    udsendt: Text(forthRecord.Value.udsendt),
                                                    complMark: Boolean(forthRecord.Value.complMark),
                                                    readyForKS: Boolean(forthRecord.Value.readyForKS),
                                                    rejection: Boolean(forthRecord.Value.rejection),
                                                    approval: Boolean(forthRecord.Value.approval),
                                                    extSendt: Text(forthRecord.Value.extSendt),
                                                    extReceive: Text(forthRecord.Value.extReceive),
                                                    log: ForAll(Table(forthRecord.Value.log) As logRecord,
                                                        {text: Text(logRecord.Value.text), date: Text(logRecord.Value.date)})
                                                }
                                            )
                                        }
                                    )
                                }
                            )
                        }
                    )
                );
            
                //-----------------Ocassionally there is an error generating a record with 'No name(project name)'
                RemoveIf(opgaver, prjnavn = Blank());
                //-----------------For numbering the Projects. Could be useful to prioritize the projects in the future
                ClearCollect(opgaver,
                    ForAll(Sequence(CountRows(opgaver)) As ThisSequence, 
                        Patch(Last(FirstN(opgaver, ThisSequence.Value)), {rowNumberPlanning: ThisSequence.Value})
                    )
                );
                ClearCollect(opgaverWhole, Ungroup(opgaver, currentPhaseTask));
            
                //Extract a Record(1 row) of the selected project from 'opgaver'
                Set(selectedPrj, Filter(opgaver, ThisRecord.prjnavn = selectedPrjName));
            
                //Purpose of 'opgaver_selPrj_static' is ?? I don't remember... For now it looks unnecessary
                ClearCollect(opgaver_selPrj_static, LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName));
                ClearCollect(opgaver_selPrj_taskCategory, First(First(opgaver_selPrj_static).currentPhaseTask).taskCategory);
            
                //Purpose of 'phaseToSeeByPrj' is to open only the 'currentPhaseTask' from SP list. (we save all the phase in SP, but we don't need to open all but only currentPhaseTask)
                ClearCollect(phaseToSeeByPrj, LookUp(opgaver, ThisRecord.prjnavn = selectedPrjName, currentPhaseTask));
                ClearCollect(phaseToSeeByPrj_assignedTaskScope, First(phaseToSeeByPrj).assignedTasks);
            
                //----------To group the tasks by document categories (ARK, KON, BRA, MYN, BAER, VVS, UDF) 
                ClearCollect(opgaver_selPrj_allTasks, 
                    First(opgaver_selPrj_taskCategory).ARK, 
                    First(opgaver_selPrj_taskCategory).KON, 
                    First(opgaver_selPrj_taskCategory).BRA, 
                    First(opgaver_selPrj_taskCategory).MYN, 
                    First(opgaver_selPrj_taskCategory).BÆR, 
                    First(opgaver_selPrj_taskCategory).VVS, 
                    First(opgaver_selPrj_taskCategory).UDF
                );
            
                //currentAllTasks is protected from expanding/dropping
                ClearCollect(selPrj_currentPhase_task_A, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "ark"));
                ClearCollect(selPrj_currentPhase_task_K, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "kon"));
                ClearCollect(selPrj_currentPhase_task_B, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bra"));
                ClearCollect(selPrj_currentPhase_task_M, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "myn"));
                ClearCollect(selPrj_currentPhase_task_N, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "bær"));
                ClearCollect(selPrj_currentPhase_task_V, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "vvs"));
                ClearCollect(selPrj_currentPhase_task_U, Filter(opgaver_selPrj_allTasks, ThisRecord.docCategory = "udf"));
            )
        PaddingBottom: =0
        PaddingTop: =0
        Repeat: =true
        Reset: =true
        Size: =7.5
        Start: =refreshUserList
        Text: |-
            ="RefreshCurrentUsers(0.5m): " & Text(Time(0, 0, (Self.Duration - Self.Value)/1000), "mm:ss")
        Visible: =If(User().Email = "jpa@aticon.dk", true, false)
        Width: =280
        Y: =746
        ZIndex: =251

    timerAutoPopUpWindow As timer:
        Align: =Align.Left
        BorderThickness: =0
        Duration: =170000
        Fill: =RGBA(109, 49, 162, 1)
        Height: =22
        OnSelect: |-
            =Set(goBackWarningWindow, true);
            Set(countDown_LogOut_Start, true);
        OnTimerEnd: |-
            =Set(goBackWarningWindow, true);
            Set(countDown_LogOut_Start, true);
        PaddingBottom: =0
        PaddingTop: =0
        Repeat: =true
        Reset: =true
        Size: =7.5
        Start: =If(Left(User().Email, 3) = First(selPrjCurrentUserList).Name, activateTimer_AutoGetOutPage, false)
        Text: |-
            ="WarningLogOutPopUp(2m50s): " & Text(Time(0, 0, (timerAutoPopUpWindow.Duration - timerAutoPopUpWindow.Value)/1000), "mm:ss")
        Visible: =If(User().Email = "jpa@aticon.dk", true, false)
        Width: =280
        Y: =698
        ZIndex: =252

    sagsNr_editingpage As group:
        Height: =5
        Width: =5
        X: =38
        Y: =60
        ZIndex: =252

        sagsNrInEditingPage As button:
            Align: =Align.Left
            BorderThickness: =0
            DisabledFill: =RGBA(150, 150, 150, 1)
            DisplayMode: =displayMode
            Fill: =barAtTop.Fill
            FocusedBorderThickness: =0
            Height: =20
            HoverColor: =RGBA(0, 0, 0, 1)
            HoverFill: =RGBA(150, 150, 150, 1)
            OnSelect: |-
                =If(
                    User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                    
                    Set(visSagsNrEditor, !visSagsNrEditor);
                
                    Set(visPrjNavnEditor, false);
                    Set(visOpdragsgiverEditor, false);
                    Set(visDDmenu_radgivning, false);
                    Set(visDDmenu_phaseChange, false);
                    Set(visDDmenu_phaseList, false);
                    Set(visDDmenu_PL, false);
                    Set(visDDmenu_bygCategory, false);
                    Set(visDDmenu_brandklasse, false);
                    Set(visDDmenu_enterprise, false);
                    Set(visDDmenu_konklasse, false);  
                
                    Set(visTaskCategorySelect, false);
                    
                    //Reset the auto kick-out timer
                    Reset(timerAutoPopUpWindow);
                    Set(activateTimer_AutoGetOutPage, false);
                    Set(activateTimer_AutoGetOutPage, true);
                    
                    Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
                );
                
                Set(visPressedAddingTask, false);
                //
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =8
            Text: |-
                =LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).'Sagsnr. ATICONs ' & " :"
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =100
            X: =37
            Y: =26
            ZIndex: =191

        sagsNrEditor As text:
            BorderColor: =RGBA(219, 219, 219, 1)
            BorderThickness: =0
            Default: =LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).'Sagsnr. ATICONs '
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =displayMode
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Semibold
            Height: =sagsNrInEditingPage.Height
            HoverFill: =RGBA(237, 237, 237, 1)
            OnChange: =
            OnSelect: =
            PaddingLeft: =5
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =9
            Visible: =If(visPlan = true, false, visSagsNrEditor)
            Width: =sagsNrInEditingPage.Width
            X: =37
            Y: =26
            ZIndex: =192

        Button19_24 As button:
            BorderThickness: =0
            DisplayMode: =displayMode
            Fill: =RGBA(73, 92, 92, 1)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =20
            HoverBorderColor: =
            HoverFill: =ColorFade(RGBA(255, 0, 0, 0.9), -30%)
            OnSelect: |-
                =Set(visSagsNrEditor, false);
                Set(edited_sagsNr, sagsNrEditor.Text);
                
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {'Sagsnr. ATICONs ': sagsNrEditor.Text});
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(selectedSagsNr, edited_sagsNr);
                
                Set(activateTimer_AutoGetOutPage, true);
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =8
            Text: ="save"
            Visible: =If(visPlan = true, false, visSagsNrEditor)
            Width: =23
            X: =114
            Y: =26
            ZIndex: =193

    Button6 As button:
        Align: =Align.Left
        Height: =28
        OnSelect: =Set(displayMode, DisplayMode.Edit)
        Size: =7.5
        Text: |-
            ="BTN" & " " & Text(DateValue(First(First(opgaver).currentPhaseTask).deadline), "mmm/dd/yyyy") & " " & Text(First(First(opgaver).currentPhaseTask).deadline, "dd/mmm/yyyy")
            & ", user log:" & Text(DateTimeValue(First(selPrjCurrentUserList).LogInTime), "ddmmm/yy hh:mm:ss")
        Visible: =If(User().Email = "jpa@aticon.dk", true, false)
        Width: =280
        Y: =630
        ZIndex: =253

    G_autoLogOut As group:
        Height: =5
        Width: =5
        X: =80
        Y: =80
        ZIndex: =254

        Rectangle1 As rectangle:
            Fill: =RGBA(255, 255, 255, 0.94)
            Height: =768
            Visible: |
                =If(visPlan = true, false, goBackWarningWindow)
            Width: =1366
            ZIndex: =245

        stayButton As button:
            BorderThickness: =0
            Fill: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =0
            Height: =25
            HoverFill: =ColorFade(RGBA(200, 200, 200, 1), -20%)
            OnSelect: |-
                =Set(goBackWarningWindow, false);
                Reset(timerAutoPopUpWindow);
                //Reset(timerRefreshCurrentUsers);
                Set(countDown_LogOut_Start, false);
                Set(activateTimer_RefreshPrjList, false);
                Set(activateTimer_RefreshPrjList, true);
                Set(activateTimer_AutoGetOutPage, false);
                Set(activateTimer_AutoGetOutPage, true);
                Reset(countdownTimer);
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =10
            Text: ="STAY"
            Visible: |
                =If(visPlan = true, false, goBackWarningWindow)
            Width: =77
            X: =604
            Y: =330
            ZIndex: =246

        leaveButton As button:
            BorderThickness: =0
            Fill: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =0
            Height: =25
            HoverFill: =ColorFade(RGBA(200, 200, 200, 1), -20%)
            OnSelect: |+
                =Select(backwardButton);
                Set(goBackWarningWindow, false);
                Set(countDown_LogOut_Start, false);
                
            RadiusBottomLeft: =6
            RadiusBottomRight: =6
            RadiusTopLeft: =6
            RadiusTopRight: =6
            Size: =10
            Text: ="LEAVE"
            Visible: |
                =If(visPlan = true, false, goBackWarningWindow)
            Width: =77
            X: =689
            Y: =330
            ZIndex: =247

        countdownTimer As timer:
            BorderThickness: =0
            Color: =RGBA(0, 0, 0, 1)
            Duration: =10000
            Fill: =RGBA(0, 0, 0, 0)
            FocusedBorderThickness: =0
            Font: =Font.'Dancing Script'
            FontWeight: =FontWeight.Semibold
            Height: =35
            HoverFill: =ColorFade(RGBA(200, 20, 20, 1), -20%)
            OnSelect: =
            OnTimerEnd: |
                =//Set(goBackWarningWindow, true);
                Select(leaveButton);
            RadiusBottomLeft: =15
            RadiusBottomRight: =15
            RadiusTopLeft: =15
            RadiusTopRight: =15
            Reset: =true
            Size: =11
            Start: =countDown_LogOut_Start
            Text: =Text(Time(0, 0, (countdownTimer.Duration-countdownTimer.Value)/1000), "ss")
            Visible: |
                =If(visPlan = true, false, goBackWarningWindow)
            Width: =41
            X: =663
            Y: =364
            ZIndex: =248

    prjNavn_editingpage As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =255

        prjNavnInEditingPage As button:
            Align: =Align.Left
            BorderThickness: =0
            DisabledFill: =RGBA(150, 150, 150, 1)
            DisplayMode: =displayMode
            Fill: =barAtTop.Fill
            FocusedBorderThickness: =0
            Height: =35
            HoverColor: =RGBA(0, 0, 0, 1)
            HoverFill: =RGBA(150, 150, 150, 1)
            OnSelect: |-
                =If(
                    User().Email = "jkh@aticon.dk" || User().Email = "jpa@aticon.dk" || Upper(Left(User().Email, 3)) = First(selectedPrj).PL || Upper(Left(User().Email, 3)) = selectedPLinChange,   
                    
                    Set(visPrjNavnEditor, !visPrjNavnEditor);
                
                    Set(visSagsNrEditor, false);
                    Set(visOpdragsgiverEditor, false);
                    Set(visDDmenu_radgivning, false);
                    Set(visDDmenu_phaseChange, false);
                    Set(visDDmenu_phaseList, false);
                    Set(visDDmenu_PL, false);
                    Set(visDDmenu_bygCategory, false);
                    Set(visDDmenu_brandklasse, false);
                    Set(visDDmenu_enterprise, false);
                    Set(visDDmenu_konklasse, false);  
                
                    Set(visTaskCategorySelect, false);
                    
                    //Reset the auto kick-out timer
                    Reset(timerAutoPopUpWindow);
                    Set(activateTimer_AutoGetOutPage, false);
                    Set(activateTimer_AutoGetOutPage, true);
                    
                    Set(activateTimer_RefreshPrjList, !activateTimer_RefreshPrjList);
                );
                
                Set(visPressedAddingTask, false);
                //
            PaddingBottom: =0
            PaddingTop: =3
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =11
            Text: =LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Projektnavn
            VerticalAlign: =VerticalAlign.Top
            Visible: =If(visPlan = true, false, visManagerEdit)
            Width: =459
            X: =37
            Y: =50
            ZIndex: =194

        prjNavnEditor As text:
            BorderColor: =RGBA(219, 219, 219, 1)
            BorderThickness: =0
            Default: =LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName).Projektnavn
            DisabledColor: =RGBA(219, 219, 219, 1)
            DisplayMode: =displayMode
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Semibold
            Height: =prjNavnInEditingPage.Height
            HoverFill: =RGBA(237, 237, 237, 1)
            OnChange: =
            OnSelect: =
            PaddingLeft: =5
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =9
            Visible: =If(visPlan = true, false, visPrjNavnEditor)
            Width: =prjNavnInEditingPage.Width
            X: =37
            Y: =50
            ZIndex: =195

        Button19_25 As button:
            BorderThickness: =0
            DisplayMode: =displayMode
            Fill: =RGBA(73, 92, 92, 1)
            FocusedBorderThickness: =1
            Font: =Font.'Open Sans Condensed'
            FontWeight: =FontWeight.Lighter
            Height: =35
            HoverBorderColor: =
            HoverFill: =ColorFade(RGBA(255, 0, 0, 0.9), -30%)
            OnSelect: |+
                =Set(visPrjNavnEditor, false);
                
                Set(edited_prjNavn, prjNavnEditor.Text);
                
                Patch('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName), {Projektnavn: prjNavnEditor.Text});
                Revert('Project List', LookUp('Project List', ThisRecord.Projektnavn = selectedPrjName));
                
                Set(selectedPrjName, edited_prjNavn);
                
                
                Set(activateTimer_AutoGetOutPage, true);
                
                
                
            PaddingLeft: =0
            PaddingRight: =0
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Size: =8
            Text: ="save"
            Visible: =If(visPlan = true, false, visPrjNavnEditor)
            Width: =20
            X: =476
            Y: =50
            ZIndex: =196

